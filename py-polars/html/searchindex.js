Search.setIndex({"docnames": ["index", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_column", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/pivot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_column", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_column.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/pivot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_column.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Pivot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 81, 94, 107, 110, 198, 200, 227, 230, 240, 516, 589], "refer": [0, 83, 84, 85, 195, 227, 388, 444, 516, 757, 818, 854], "input": [0, 53, 83, 84, 85, 365, 373, 424, 467, 485, 492, 493, 496, 516, 525, 739, 798, 854], "output": [0, 23, 25, 26, 59, 85, 101, 110, 131, 132, 154, 156, 191, 227, 236, 240, 367, 368, 372, 462, 467, 492, 503, 516, 525, 546, 547, 556, 587, 589, 595, 604, 843, 854], "seri": [0, 18, 44, 54, 57, 58, 59, 72, 73, 76, 81, 100, 101, 103, 107, 110, 116, 124, 126, 128, 129, 133, 136, 137, 139, 141, 146, 147, 150, 161, 162, 168, 176, 180, 185, 186, 195, 196, 199, 227, 239, 240, 241, 242, 243, 244, 245, 246, 249, 251, 252, 253, 254, 256, 260, 261, 268, 269, 272, 273, 277, 278, 282, 283, 295, 296, 298, 301, 304, 306, 308, 311, 315, 317, 320, 321, 324, 325, 333, 334, 339, 340, 344, 346, 348, 349, 350, 351, 352, 354, 355, 356, 366, 367, 384, 388, 389, 390, 391, 392, 394, 407, 410, 413, 414, 421, 438, 444, 448, 453, 454, 455, 456, 461, 467, 468, 470, 471, 472, 473, 474, 475, 477, 478, 479, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 504, 505, 506, 507, 508, 516, 525, 542, 569, 583, 584, 595, 847, 850, 853, 857, 858, 859], "datafram": [0, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 42, 44, 53, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 88, 89, 90, 92, 93, 95, 96, 97, 99, 101, 102, 225, 226, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 471, 472, 473, 474, 479, 482, 483, 484, 487, 502, 505, 506, 509, 516, 525, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 595, 603, 623, 639, 643, 658, 801, 803, 814, 815, 825, 834, 835, 843, 854], "lazyfram": [0, 41, 43, 53, 56, 57, 93, 94, 95, 96, 97, 99, 103, 144, 227, 337, 516, 525, 594, 860], "express": [0, 54, 56, 59, 101, 103, 104, 110, 122, 124, 130, 152, 156, 164, 174, 196, 198, 200, 227, 236, 237, 239, 240, 257, 279, 280, 281, 284, 290, 292, 312, 331, 337, 344, 346, 350, 353, 358, 361, 366, 367, 368, 372, 373, 384, 385, 386, 391, 405, 406, 407, 409, 416, 429, 444, 450, 453, 459, 461, 464, 468, 471, 472, 476, 477, 478, 479, 483, 484, 485, 486, 487, 491, 492, 498, 500, 501, 502, 503, 505, 506, 509, 515, 525, 531, 539, 542, 563, 571, 572, 574, 583, 584, 585, 588, 589, 595, 623, 647, 648, 649, 657, 685, 775, 782, 803, 854], "function": [0, 54, 58, 83, 84, 85, 93, 102, 110, 119, 126, 149, 155, 156, 187, 190, 200, 210, 227, 237, 240, 273, 290, 315, 328, 329, 330, 367, 368, 382, 394, 395, 396, 397, 398, 399, 401, 402, 403, 415, 457, 465, 467, 477, 478, 485, 486, 492, 500, 516, 525, 556, 560, 562, 589, 595, 604, 639, 657, 688, 702, 703, 704, 705, 763, 777, 778, 784, 789, 854], "data": [0, 11, 14, 28, 44, 53, 57, 63, 64, 69, 70, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 90, 91, 92, 93, 99, 100, 102, 103, 104, 111, 112, 121, 142, 144, 155, 159, 165, 166, 172, 179, 183, 184, 225, 227, 276, 295, 316, 324, 345, 352, 354, 388, 404, 405, 415, 457, 459, 471, 503, 516, 525, 529, 530, 539, 562, 588, 595, 603, 641, 646, 650, 662, 664, 697, 700, 757, 773, 774, 784, 789, 836, 837, 839, 841, 845, 853, 854], "type": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 56, 59, 63, 72, 74, 77, 79, 81, 83, 84, 85, 87, 91, 93, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 118, 120, 126, 131, 132, 133, 147, 167, 179, 183, 184, 186, 188, 189, 227, 240, 261, 273, 276, 277, 279, 280, 281, 296, 298, 301, 304, 306, 308, 311, 317, 325, 331, 342, 346, 348, 350, 351, 367, 391, 439, 440, 441, 444, 457, 467, 468, 472, 480, 481, 482, 484, 485, 491, 492, 516, 525, 531, 537, 539, 546, 547, 556, 563, 568, 572, 579, 580, 589, 595, 604, 627, 639, 641, 643, 647, 648, 649, 665, 667, 670, 676, 678, 681, 684, 690, 698, 700, 715, 717, 784, 813, 814, 815, 818, 836, 837, 839, 846, 854], "config": [0, 196, 227, 525, 584, 595], "except": [0, 143, 227, 525, 552, 595, 837, 845, 854], "test": [0, 85, 525, 548, 555, 595], "util": [0, 525, 539, 595], "sql": [0, 41, 92, 142, 227, 525], "class": [1, 2, 3, 5, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 76, 101, 102, 118, 167, 183, 184, 227, 516, 525, 537, 568, 595, 700, 836, 837, 854, 860], "arg": [1, 2, 3, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 155, 184, 227, 487, 562, 595, 604, 837, 854], "ani": [1, 2, 3, 5, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 55, 73, 74, 75, 77, 83, 84, 93, 101, 103, 104, 110, 117, 121, 123, 124, 126, 154, 155, 164, 165, 180, 181, 183, 184, 190, 227, 240, 254, 257, 276, 316, 336, 350, 367, 375, 392, 394, 409, 417, 444, 453, 467, 485, 491, 503, 516, 536, 541, 562, 595, 603, 604, 620, 623, 660, 689, 710, 726, 761, 763, 778, 818, 828, 836, 837, 854], "kwarg": [1, 2, 3, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 155, 184, 196, 227, 562, 584, 595, 837, 854], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 227, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 516, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 595, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 854, 860], "__init__": [1, 2, 3, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 101], "method": [1, 2, 3, 5, 22, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 83, 84, 85, 101, 117, 138, 152, 158, 211, 227, 237, 321, 387, 388, 395, 396, 397, 398, 399, 401, 402, 403, 460, 499, 510, 512, 516, 517, 520, 521, 522, 525, 536, 550, 564, 595, 604, 694, 718, 756, 757, 768, 839, 847, 850, 854, 857, 858, 859], "A": [3, 23, 41, 56, 59, 78, 83, 84, 90, 93, 126, 131, 143, 154, 156, 180, 182, 190, 191, 210, 227, 234, 273, 298, 301, 304, 306, 308, 311, 317, 348, 351, 352, 354, 367, 368, 373, 385, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 422, 423, 427, 428, 429, 447, 450, 472, 473, 483, 487, 516, 546, 552, 574, 595, 639, 667, 670, 676, 678, 681, 684, 690, 763, 764, 765, 767, 770, 771, 772, 796, 797, 801, 802, 803, 808, 809, 818, 821, 854], "encod": [3, 52, 83, 84, 93, 182, 227, 424, 798], "set": [3, 4, 5, 6, 7, 8, 9, 10, 13, 18, 19, 21, 23, 25, 26, 59, 74, 77, 83, 84, 85, 86, 90, 93, 95, 96, 97, 99, 100, 102, 103, 104, 113, 133, 143, 149, 166, 173, 187, 227, 240, 269, 324, 325, 342, 350, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 411, 415, 416, 438, 516, 525, 531, 532, 539, 551, 552, 556, 560, 573, 587, 589, 595, 603, 604, 635, 697, 698, 712, 715, 726, 763, 764, 765, 766, 767, 768, 770, 771, 772, 774, 778, 789, 790, 812, 837, 854], "string": [3, 4, 6, 8, 9, 13, 23, 25, 26, 30, 44, 52, 59, 83, 84, 93, 101, 102, 104, 106, 126, 131, 132, 143, 147, 174, 190, 191, 227, 261, 277, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 421, 422, 425, 426, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 444, 447, 472, 474, 487, 516, 531, 533, 534, 539, 544, 546, 547, 552, 587, 595, 627, 643, 685, 688, 693, 794, 795, 796, 800, 802, 803, 804, 805, 807, 808, 809, 810, 812, 813, 814, 815, 816, 818, 819, 820, 821, 854], "classmethod": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 544, 565, 595], "cfg": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "str": [4, 6, 9, 10, 13, 14, 21, 22, 23, 24, 25, 26, 27, 30, 41, 42, 43, 44, 45, 53, 55, 58, 59, 73, 74, 75, 77, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 101, 102, 103, 104, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 128, 130, 131, 132, 134, 136, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 160, 161, 162, 163, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 235, 236, 240, 254, 255, 259, 260, 261, 269, 272, 273, 292, 296, 312, 315, 318, 320, 321, 325, 331, 334, 335, 337, 339, 344, 350, 353, 368, 372, 374, 382, 385, 391, 393, 395, 396, 397, 398, 399, 401, 402, 403, 409, 410, 417, 418, 448, 449, 450, 453, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 516, 520, 531, 532, 533, 534, 535, 536, 538, 539, 542, 544, 545, 546, 547, 549, 551, 552, 556, 560, 563, 565, 566, 568, 569, 571, 572, 573, 574, 579, 580, 584, 585, 586, 587, 589, 590, 591, 595, 600, 621, 627, 639, 641, 658, 665, 685, 688, 691, 693, 694, 698, 708, 710, 712, 740, 743, 747, 748, 749, 760, 777, 778, 822, 824, 835, 854, 857], "previous": 4, "save": [4, 525], "share": [4, 44, 119, 227, 702, 854], "option": [4, 5, 6, 53, 59, 73, 74, 81, 83, 85, 86, 90, 95, 97, 98, 101, 102, 103, 104, 107, 110, 117, 143, 149, 152, 180, 182, 187, 191, 196, 227, 240, 359, 367, 394, 395, 396, 397, 398, 399, 401, 402, 403, 415, 437, 438, 443, 465, 468, 491, 516, 525, 551, 552, 560, 584, 589, 595, 604, 735, 763, 764, 765, 766, 767, 768, 770, 771, 772, 778, 789, 806, 811, 812, 817, 835, 854], "paramet": [4, 8, 9, 10, 13, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 38, 41, 43, 45, 53, 54, 56, 57, 58, 59, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 107, 110, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 142, 143, 145, 147, 149, 151, 152, 154, 155, 156, 158, 160, 161, 162, 164, 166, 168, 170, 171, 173, 174, 175, 176, 177, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 203, 210, 211, 213, 227, 236, 239, 240, 249, 251, 254, 255, 256, 257, 259, 260, 261, 268, 269, 272, 273, 275, 276, 277, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 299, 312, 315, 319, 320, 321, 324, 325, 327, 328, 329, 330, 331, 334, 336, 337, 341, 342, 343, 346, 350, 359, 362, 364, 367, 368, 382, 383, 387, 388, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 452, 453, 458, 459, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 486, 487, 489, 491, 492, 493, 498, 499, 500, 501, 502, 503, 505, 506, 507, 516, 531, 535, 536, 539, 540, 541, 542, 544, 545, 546, 547, 548, 551, 552, 555, 556, 560, 562, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 577, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 595, 600, 603, 604, 613, 616, 620, 621, 622, 623, 625, 626, 627, 634, 635, 638, 639, 641, 643, 647, 648, 649, 653, 654, 655, 656, 657, 659, 660, 664, 665, 668, 685, 688, 692, 693, 694, 697, 698, 701, 702, 703, 704, 705, 708, 709, 710, 711, 715, 716, 735, 737, 752, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 785, 789, 790, 791, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 824, 827, 828, 835, 836, 837, 840, 841, 843, 844, 845, 846, 854], "json": [4, 6, 25, 26, 88, 89, 96, 227, 429, 525, 544, 565, 587, 595, 803], "produc": [4, 103, 104, 372, 492], "reset": 5, "all": [5, 10, 13, 18, 21, 28, 56, 57, 59, 72, 74, 76, 77, 78, 83, 84, 85, 86, 90, 93, 95, 96, 101, 102, 104, 117, 123, 139, 141, 144, 147, 149, 151, 152, 159, 173, 182, 191, 227, 238, 239, 257, 261, 271, 275, 284, 290, 331, 341, 342, 345, 348, 351, 355, 356, 358, 361, 363, 367, 368, 377, 381, 385, 388, 393, 410, 416, 423, 428, 429, 434, 435, 450, 462, 472, 484, 505, 516, 525, 531, 536, 539, 541, 556, 560, 563, 573, 595, 623, 627, 637, 657, 721, 733, 757, 790, 797, 802, 803, 808, 809, 854], "default": [5, 13, 21, 22, 23, 24, 25, 26, 27, 72, 73, 75, 76, 77, 81, 83, 84, 90, 93, 101, 102, 103, 104, 107, 119, 130, 132, 133, 143, 149, 156, 166, 197, 227, 269, 273, 277, 327, 342, 346, 364, 379, 380, 383, 388, 405, 411, 427, 438, 444, 468, 469, 491, 503, 516, 545, 547, 552, 560, 587, 595, 635, 639, 643, 701, 702, 715, 748, 749, 752, 757, 774, 793, 801, 812, 844, 854], "state": [5, 56, 67, 477, 525, 531, 539, 563, 572, 595], "note": [5, 13, 53, 59, 75, 77, 81, 83, 90, 92, 102, 103, 104, 107, 110, 122, 130, 131, 132, 142, 143, 147, 152, 164, 181, 183, 187, 188, 191, 210, 227, 230, 257, 288, 289, 293, 294, 312, 315, 320, 352, 354, 395, 396, 397, 398, 399, 401, 402, 403, 415, 430, 433, 444, 451, 477, 486, 500, 516, 531, 539, 540, 546, 547, 548, 555, 572, 579, 595, 623, 655, 656, 685, 777, 778, 784, 789, 804, 807, 826, 837, 854], "thi": [5, 21, 23, 25, 27, 43, 44, 53, 54, 56, 57, 58, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 90, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 110, 117, 119, 121, 126, 130, 131, 132, 133, 137, 139, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 157, 158, 159, 166, 168, 171, 173, 175, 176, 179, 181, 183, 184, 187, 188, 190, 191, 192, 193, 197, 198, 200, 226, 227, 230, 237, 239, 240, 249, 251, 257, 261, 277, 284, 290, 295, 296, 302, 312, 315, 321, 324, 331, 333, 334, 339, 344, 345, 346, 350, 361, 366, 367, 372, 373, 379, 380, 382, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 407, 409, 410, 411, 416, 417, 418, 431, 436, 447, 448, 458, 459, 460, 461, 462, 465, 468, 473, 475, 477, 479, 484, 485, 486, 502, 506, 516, 525, 526, 528, 531, 536, 539, 545, 546, 547, 549, 552, 556, 560, 563, 569, 571, 572, 573, 579, 585, 586, 587, 589, 594, 595, 603, 604, 613, 616, 623, 627, 643, 657, 662, 664, 665, 671, 685, 688, 694, 697, 700, 702, 707, 708, 714, 719, 720, 725, 726, 732, 734, 736, 740, 741, 742, 743, 745, 746, 747, 748, 749, 751, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 770, 771, 772, 774, 777, 778, 779, 780, 782, 783, 784, 785, 790, 791, 793, 805, 810, 821, 822, 825, 826, 833, 835, 836, 837, 838, 840, 841, 844, 845, 854], "oper": [5, 44, 57, 63, 64, 72, 73, 74, 75, 76, 77, 83, 90, 110, 121, 126, 130, 137, 144, 152, 154, 159, 179, 183, 184, 187, 190, 198, 210, 227, 235, 285, 286, 287, 288, 289, 290, 358, 375, 388, 390, 465, 466, 483, 516, 539, 545, 548, 551, 555, 595, 603, 653, 654, 655, 656, 657, 757, 759, 833, 836, 837, 845, 854], "remov": [5, 115, 227, 230, 331, 432, 437, 443, 484, 516, 535, 595, 806, 811, 817], "from": [5, 23, 53, 59, 72, 73, 74, 75, 76, 77, 80, 82, 83, 84, 85, 86, 88, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 114, 115, 119, 121, 131, 132, 143, 144, 149, 160, 164, 166, 168, 187, 188, 190, 191, 227, 285, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 331, 345, 359, 379, 380, 383, 405, 417, 418, 427, 444, 460, 462, 471, 480, 481, 482, 484, 491, 503, 515, 516, 535, 536, 539, 544, 546, 547, 560, 565, 566, 569, 579, 585, 595, 603, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 702, 720, 735, 748, 749, 750, 752, 774, 801, 843, 846, 854], "environ": [5, 21], "local": [5, 321, 694, 753, 754, 854], "flag": [5, 101, 196, 227, 407, 516, 556, 584, 595, 779, 854], "back": [5, 53, 121, 227, 603, 854], "valu": [5, 8, 21, 23, 38, 39, 51, 53, 57, 58, 74, 76, 83, 84, 92, 93, 99, 100, 101, 102, 103, 104, 106, 110, 117, 121, 122, 123, 127, 131, 132, 133, 138, 146, 147, 148, 149, 150, 152, 154, 156, 157, 158, 160, 166, 170, 171, 174, 175, 176, 180, 190, 191, 192, 201, 202, 204, 205, 206, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 227, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 262, 264, 265, 266, 268, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 290, 291, 293, 294, 297, 309, 313, 322, 328, 329, 330, 332, 334, 335, 336, 338, 340, 341, 342, 344, 345, 347, 348, 349, 351, 352, 354, 355, 356, 357, 360, 361, 365, 366, 367, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 387, 388, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 435, 438, 440, 441, 442, 447, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 471, 474, 475, 477, 478, 479, 485, 486, 491, 493, 494, 495, 496, 497, 500, 501, 506, 509, 516, 536, 540, 541, 546, 547, 549, 550, 557, 558, 559, 560, 561, 564, 566, 570, 571, 574, 575, 576, 581, 588, 595, 599, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 618, 619, 622, 624, 625, 626, 628, 630, 631, 632, 634, 638, 640, 643, 644, 647, 648, 649, 651, 652, 657, 658, 659, 661, 662, 666, 682, 686, 695, 702, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 718, 721, 723, 724, 726, 727, 728, 729, 730, 731, 733, 740, 741, 743, 744, 746, 748, 749, 750, 751, 752, 755, 756, 757, 763, 764, 765, 766, 767, 768, 770, 771, 772, 774, 775, 776, 777, 778, 781, 782, 787, 788, 789, 795, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 809, 812, 814, 815, 816, 821, 826, 828, 829, 830, 831, 839, 842, 843, 845, 846, 854], "exampl": [5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 21, 23, 44, 53, 54, 57, 58, 59, 72, 73, 74, 75, 76, 77, 80, 84, 85, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 471, 472, 473, 474, 479, 482, 483, 484, 487, 491, 502, 505, 506, 509, 516, 529, 530, 531, 532, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 549, 550, 551, 554, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 571, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 622, 623, 626, 627, 629, 634, 635, 638, 639, 641, 643, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 710, 711, 713, 715, 716, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 740, 741, 742, 743, 744, 745, 746, 752, 753, 754, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 785, 786, 787, 788, 790, 791, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 814, 815, 816, 818, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 854], "pl": [5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 21, 23, 44, 53, 54, 57, 58, 59, 72, 73, 74, 75, 76, 77, 80, 83, 84, 85, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 471, 472, 473, 474, 475, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 499, 502, 505, 506, 509, 516, 526, 529, 530, 531, 532, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 549, 550, 551, 554, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 571, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 622, 623, 626, 627, 629, 634, 635, 638, 639, 641, 643, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 710, 711, 713, 715, 716, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 740, 741, 742, 743, 744, 745, 746, 752, 753, 754, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 785, 786, 787, 788, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 814, 815, 816, 818, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 854], "current": [6, 21, 111, 112, 196, 227, 315, 383, 516, 525, 529, 530, 584, 595, 646, 650, 688, 752, 854], "activ": [7, 11, 12, 14, 15, 16, 17, 20, 257, 623], "bool": [7, 9, 11, 12, 14, 15, 16, 17, 18, 20, 21, 23, 25, 27, 53, 54, 56, 57, 72, 76, 83, 84, 86, 88, 90, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 111, 112, 123, 124, 126, 127, 129, 130, 131, 136, 137, 139, 140, 141, 143, 147, 154, 156, 166, 172, 174, 180, 184, 187, 188, 189, 191, 193, 196, 202, 204, 206, 227, 237, 238, 239, 249, 251, 255, 257, 270, 276, 285, 286, 287, 288, 289, 290, 316, 327, 328, 329, 330, 334, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 367, 388, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 409, 410, 415, 417, 418, 422, 424, 426, 434, 435, 439, 440, 442, 444, 448, 449, 458, 459, 462, 467, 468, 469, 471, 477, 491, 501, 503, 505, 509, 516, 529, 531, 533, 539, 541, 542, 545, 546, 551, 552, 556, 563, 572, 574, 579, 580, 584, 587, 595, 601, 602, 603, 604, 613, 616, 621, 623, 636, 641, 646, 653, 654, 655, 656, 657, 689, 701, 703, 704, 705, 708, 711, 712, 714, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 753, 754, 757, 758, 759, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 776, 778, 779, 784, 789, 791, 796, 798, 800, 808, 809, 813, 814, 816, 818, 836, 837, 840, 841, 843, 845, 854], "true": [7, 9, 11, 12, 14, 15, 16, 17, 18, 20, 21, 23, 27, 54, 56, 57, 59, 72, 76, 80, 83, 84, 85, 86, 90, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 111, 112, 114, 117, 123, 126, 127, 129, 131, 137, 139, 140, 141, 143, 147, 151, 152, 154, 156, 157, 174, 180, 187, 188, 189, 190, 191, 196, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 227, 235, 237, 238, 239, 240, 255, 276, 285, 286, 287, 288, 289, 315, 316, 320, 327, 328, 329, 330, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 390, 400, 405, 410, 415, 417, 418, 422, 424, 426, 429, 439, 440, 442, 444, 448, 449, 453, 458, 459, 462, 467, 468, 501, 503, 505, 509, 516, 529, 530, 531, 533, 536, 539, 541, 545, 546, 551, 552, 554, 556, 563, 572, 574, 579, 580, 584, 595, 601, 602, 603, 604, 614, 641, 645, 646, 688, 689, 693, 701, 703, 704, 705, 711, 714, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 745, 753, 754, 759, 769, 776, 789, 791, 796, 798, 800, 803, 813, 814, 816, 818, 837, 840, 845, 846, 854], "us": [7, 8, 10, 13, 18, 19, 23, 27, 44, 53, 59, 73, 75, 77, 79, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 107, 110, 122, 123, 126, 131, 132, 143, 147, 149, 151, 152, 156, 164, 166, 174, 176, 187, 188, 191, 198, 200, 210, 227, 235, 240, 257, 273, 277, 290, 293, 294, 324, 327, 328, 329, 330, 331, 336, 337, 345, 359, 367, 371, 388, 390, 392, 395, 396, 397, 398, 399, 401, 402, 403, 405, 407, 410, 411, 415, 417, 418, 424, 425, 426, 430, 431, 436, 438, 440, 442, 444, 467, 468, 469, 472, 474, 477, 479, 486, 491, 493, 496, 501, 506, 515, 516, 531, 540, 541, 545, 546, 547, 548, 552, 554, 555, 560, 574, 579, 583, 589, 595, 604, 623, 639, 643, 657, 697, 701, 703, 704, 705, 709, 710, 714, 735, 757, 759, 761, 774, 777, 778, 779, 783, 789, 793, 798, 799, 804, 805, 810, 812, 814, 818, 828, 836, 837, 844, 845, 854], "ascii": [7, 13, 431, 433, 436, 447, 805, 807, 810, 821], "charact": [7, 8, 13, 19, 23, 83, 84, 93, 227, 312, 339, 430, 431, 436, 437, 439, 440, 443, 447, 516, 563, 595, 685, 804, 805, 806, 810, 811, 813, 814, 817, 821], "print": [7, 8, 10, 12, 18, 98, 118, 130, 144, 227, 344, 516, 549, 595, 726, 763, 854], "tabl": [7, 9, 10, 12, 13, 14, 15, 16, 18, 19, 43, 72, 83, 84, 93, 156, 179, 184, 190, 210, 227], "outlin": 7, "fals": [7, 9, 11, 12, 14, 15, 16, 17, 18, 21, 25, 27, 53, 54, 56, 59, 83, 84, 85, 86, 90, 93, 96, 97, 99, 100, 101, 102, 103, 104, 111, 112, 114, 126, 127, 129, 130, 131, 136, 137, 139, 140, 141, 143, 147, 151, 152, 154, 156, 157, 166, 172, 174, 180, 184, 187, 188, 191, 193, 196, 201, 202, 204, 205, 206, 208, 212, 227, 237, 238, 249, 251, 255, 257, 270, 285, 286, 287, 288, 289, 290, 316, 327, 328, 329, 330, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 367, 388, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 410, 415, 417, 418, 422, 424, 426, 434, 435, 439, 440, 442, 444, 458, 459, 462, 468, 469, 477, 491, 501, 503, 505, 509, 516, 529, 530, 531, 533, 539, 545, 546, 551, 552, 554, 556, 563, 572, 574, 584, 595, 603, 613, 616, 623, 636, 641, 645, 646, 653, 654, 655, 656, 657, 689, 701, 703, 704, 705, 711, 719, 721, 723, 726, 727, 728, 729, 730, 731, 733, 735, 745, 753, 754, 757, 758, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 776, 779, 784, 789, 791, 796, 798, 800, 808, 809, 813, 814, 816, 818, 836, 837, 840, 841, 843, 845, 846, 854], "revert": 7, "utf8": [7, 13, 44, 83, 84, 93, 101, 118, 119, 126, 167, 183, 227, 261, 333, 339, 421, 425, 427, 428, 429, 430, 438, 439, 440, 441, 444, 474, 516, 537, 568, 595, 627, 691, 707, 734, 795, 799, 801, 802, 803, 804, 812, 813, 814, 815, 818, 837, 854], "df": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 54, 72, 73, 74, 75, 76, 77, 78, 92, 93, 102, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 227, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 468, 471, 472, 473, 474, 479, 482, 483, 484, 487, 502, 505, 506, 509, 516, 529, 530, 531, 532, 536, 538, 539, 540, 541, 545, 546, 547, 549, 550, 551, 554, 557, 558, 559, 560, 561, 562, 563, 564, 569, 570, 571, 573, 574, 575, 576, 580, 581, 583, 586, 589, 590, 591, 595, 623, 639, 643, 801, 803, 809, 814, 815, 835, 854], "abc": [7, 11, 12, 14, 15, 16, 17, 18, 434, 808], "1": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 27, 44, 53, 54, 57, 58, 59, 72, 73, 74, 75, 76, 77, 81, 83, 84, 93, 94, 98, 99, 100, 101, 103, 104, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 487, 491, 498, 499, 502, 503, 504, 505, 506, 508, 509, 516, 531, 532, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 571, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 595, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 622, 623, 625, 626, 629, 634, 635, 638, 639, 641, 643, 644, 645, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 707, 708, 709, 710, 711, 713, 715, 716, 718, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 737, 740, 741, 742, 743, 744, 745, 746, 752, 753, 754, 756, 757, 760, 761, 762, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 801, 803, 814, 815, 818, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 854], "0": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 27, 53, 54, 58, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 107, 110, 111, 112, 114, 115, 118, 122, 123, 126, 127, 129, 131, 133, 137, 142, 146, 147, 148, 150, 151, 152, 153, 157, 158, 162, 166, 167, 168, 171, 173, 174, 175, 176, 182, 185, 187, 188, 190, 191, 192, 195, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 227, 230, 234, 235, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 257, 259, 265, 276, 278, 280, 281, 282, 283, 285, 290, 293, 294, 297, 300, 304, 306, 307, 311, 313, 316, 317, 323, 328, 329, 330, 332, 335, 336, 340, 342, 345, 348, 351, 352, 354, 355, 356, 358, 359, 364, 365, 367, 369, 370, 371, 376, 379, 380, 381, 383, 384, 387, 388, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 410, 412, 413, 414, 415, 419, 420, 427, 447, 451, 455, 456, 457, 463, 468, 471, 473, 477, 479, 483, 486, 499, 506, 509, 516, 529, 530, 537, 540, 541, 546, 551, 554, 559, 563, 564, 568, 569, 571, 572, 574, 575, 581, 583, 584, 586, 589, 595, 605, 606, 607, 608, 609, 610, 611, 613, 615, 623, 625, 641, 644, 646, 651, 652, 657, 658, 660, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 689, 690, 696, 701, 703, 704, 705, 709, 713, 715, 723, 725, 727, 728, 729, 730, 731, 735, 741, 742, 752, 756, 757, 763, 765, 766, 768, 769, 770, 772, 774, 786, 787, 788, 792, 793, 795, 801, 803, 821, 830, 831, 834, 838, 839, 844, 845, 854], "2": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 44, 53, 54, 57, 58, 72, 73, 74, 75, 76, 77, 92, 93, 94, 98, 99, 100, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 234, 235, 236, 238, 239, 240, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 292, 298, 300, 301, 304, 306, 307, 308, 309, 311, 312, 314, 315, 316, 317, 320, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 415, 416, 417, 418, 419, 421, 423, 426, 428, 429, 430, 433, 434, 435, 438, 440, 441, 442, 445, 446, 448, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 471, 472, 473, 474, 479, 482, 483, 484, 487, 491, 502, 505, 506, 509, 516, 529, 530, 531, 532, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 549, 551, 554, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 571, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 595, 600, 603, 604, 606, 610, 611, 612, 613, 614, 615, 622, 623, 626, 627, 629, 634, 635, 638, 639, 643, 644, 645, 650, 651, 654, 655, 656, 657, 658, 660, 669, 673, 674, 680, 682, 687, 688, 689, 693, 696, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 713, 715, 716, 718, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 752, 753, 754, 756, 757, 760, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 785, 787, 789, 790, 791, 792, 793, 795, 797, 802, 803, 807, 808, 809, 814, 815, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 854], "5": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 53, 54, 58, 72, 74, 75, 76, 77, 80, 84, 98, 103, 104, 110, 111, 112, 114, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 134, 135, 137, 138, 140, 143, 145, 147, 149, 151, 152, 156, 157, 158, 161, 165, 169, 177, 178, 179, 180, 181, 186, 188, 190, 191, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 235, 257, 260, 265, 271, 272, 276, 277, 278, 279, 280, 281, 290, 292, 298, 316, 317, 322, 325, 330, 331, 333, 334, 340, 343, 346, 349, 352, 354, 355, 356, 358, 363, 382, 383, 385, 387, 388, 392, 393, 394, 395, 396, 398, 402, 404, 406, 412, 423, 429, 430, 433, 447, 450, 452, 454, 458, 473, 479, 482, 483, 484, 506, 516, 529, 530, 531, 538, 539, 540, 541, 545, 546, 547, 548, 550, 554, 555, 558, 559, 560, 563, 570, 571, 573, 575, 576, 577, 578, 582, 583, 584, 586, 589, 590, 591, 595, 603, 606, 610, 613, 623, 626, 629, 638, 643, 645, 647, 653, 657, 658, 660, 665, 666, 667, 689, 690, 695, 696, 698, 705, 708, 718, 745, 752, 753, 754, 756, 757, 763, 764, 765, 767, 768, 771, 774, 776, 786, 792, 797, 803, 804, 840, 846, 854], "xyz": [7, 11, 12, 14, 15, 16, 17, 18, 423, 428, 797, 802, 835, 854], "shape": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 44, 53, 54, 57, 58, 59, 70, 72, 73, 74, 75, 76, 77, 93, 94, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 166, 168, 170, 171, 173, 174, 175, 176, 177, 178, 180, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 471, 472, 473, 474, 479, 482, 483, 484, 487, 502, 505, 506, 509, 516, 529, 531, 536, 538, 539, 540, 541, 542, 545, 546, 547, 550, 551, 557, 558, 559, 560, 561, 562, 563, 564, 569, 570, 571, 573, 574, 575, 576, 578, 580, 581, 583, 584, 585, 586, 589, 590, 591, 595, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 622, 623, 626, 627, 629, 634, 635, 638, 639, 641, 643, 644, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 704, 705, 707, 708, 709, 710, 711, 713, 715, 716, 718, 721, 723, 726, 727, 728, 729, 730, 731, 733, 737, 744, 752, 753, 754, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 781, 785, 786, 787, 788, 790, 791, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 812, 814, 815, 816, 818, 827, 828, 829, 830, 831, 834, 835, 839, 841, 842, 843, 846, 854], "3": [7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 44, 53, 54, 57, 58, 59, 72, 73, 74, 75, 76, 77, 85, 93, 94, 98, 99, 100, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 235, 236, 237, 240, 249, 250, 251, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 307, 309, 313, 314, 315, 316, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 361, 363, 364, 365, 366, 368, 377, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 415, 417, 418, 419, 422, 424, 425, 426, 427, 430, 432, 433, 437, 438, 439, 440, 441, 442, 443, 448, 449, 450, 452, 453, 454, 458, 460, 461, 462, 464, 465, 471, 472, 473, 474, 479, 483, 484, 487, 491, 502, 505, 506, 509, 516, 529, 530, 531, 532, 536, 537, 538, 539, 542, 545, 546, 547, 549, 550, 551, 552, 554, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 571, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 595, 600, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 622, 623, 626, 629, 634, 635, 638, 639, 641, 643, 644, 645, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 664, 665, 666, 667, 668, 669, 672, 673, 674, 676, 678, 679, 680, 682, 684, 686, 688, 689, 692, 693, 696, 697, 698, 700, 702, 704, 705, 707, 708, 709, 710, 711, 713, 715, 716, 718, 720, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 752, 753, 754, 756, 757, 760, 762, 763, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 785, 787, 788, 789, 790, 791, 793, 798, 799, 800, 801, 804, 807, 812, 816, 826, 827, 828, 829, 830, 831, 833, 834, 836, 837, 838, 841, 842, 843, 844, 846, 854], "f64": [7, 9, 11, 12, 14, 15, 16, 17, 18, 53, 58, 94, 103, 111, 112, 114, 115, 117, 118, 122, 123, 126, 129, 137, 142, 143, 147, 148, 157, 158, 173, 174, 175, 188, 192, 195, 196, 202, 204, 205, 206, 207, 208, 211, 212, 227, 234, 241, 242, 243, 244, 245, 246, 265, 276, 278, 282, 283, 290, 293, 294, 316, 327, 328, 329, 330, 331, 332, 340, 345, 352, 354, 355, 356, 358, 359, 364, 365, 369, 370, 371, 376, 379, 380, 383, 384, 387, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 413, 414, 415, 419, 420, 455, 456, 463, 471, 473, 484, 516, 529, 536, 540, 541, 551, 558, 559, 564, 574, 575, 581, 583, 584, 595, 605, 606, 607, 608, 609, 610, 644, 651, 652, 657, 658, 689, 704, 705, 709, 713, 752, 763, 765, 766, 768, 769, 770, 772, 773, 787, 788, 792, 830, 831, 854], "n": [8, 10, 18, 30, 31, 59, 80, 81, 83, 84, 93, 107, 110, 121, 131, 134, 145, 154, 166, 177, 178, 184, 203, 213, 227, 256, 260, 272, 290, 291, 295, 299, 319, 324, 334, 343, 362, 383, 391, 405, 415, 440, 441, 452, 454, 458, 489, 501, 507, 516, 531, 546, 548, 555, 577, 578, 590, 591, 595, 603, 622, 626, 638, 657, 659, 664, 668, 692, 697, 708, 716, 737, 752, 774, 789, 793, 814, 815, 827, 829, 832, 840, 844, 854], "int": [8, 10, 18, 19, 23, 27, 74, 77, 80, 81, 82, 83, 84, 85, 86, 90, 92, 93, 95, 96, 97, 101, 102, 103, 104, 105, 107, 110, 119, 122, 123, 125, 133, 134, 135, 137, 143, 145, 146, 147, 150, 151, 152, 162, 164, 166, 169, 170, 171, 173, 175, 176, 177, 178, 185, 190, 192, 194, 197, 203, 213, 227, 255, 256, 259, 260, 268, 269, 272, 273, 275, 279, 280, 281, 290, 291, 328, 329, 330, 334, 335, 336, 341, 342, 343, 346, 362, 383, 384, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 416, 420, 427, 431, 436, 438, 440, 441, 447, 448, 449, 452, 453, 454, 458, 463, 468, 471, 475, 479, 480, 481, 482, 489, 493, 495, 496, 497, 498, 501, 503, 504, 505, 506, 507, 508, 516, 539, 540, 541, 548, 552, 555, 563, 570, 571, 573, 575, 577, 578, 581, 582, 586, 590, 591, 595, 611, 612, 621, 622, 625, 626, 634, 635, 638, 639, 641, 645, 647, 648, 649, 657, 659, 702, 703, 704, 705, 708, 709, 710, 715, 716, 736, 737, 740, 741, 743, 745, 746, 748, 749, 750, 751, 752, 755, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 780, 781, 782, 785, 790, 793, 801, 805, 810, 812, 814, 815, 821, 826, 827, 828, 829, 840, 844, 854], "number": [8, 10, 18, 19, 23, 27, 53, 68, 80, 81, 83, 84, 85, 93, 96, 102, 103, 107, 119, 120, 122, 123, 134, 144, 145, 151, 152, 166, 170, 171, 177, 190, 201, 203, 213, 227, 256, 260, 268, 272, 273, 275, 284, 290, 291, 300, 302, 307, 309, 316, 322, 323, 326, 328, 329, 330, 334, 336, 341, 343, 352, 354, 361, 362, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 408, 409, 411, 430, 433, 440, 441, 452, 458, 475, 489, 503, 507, 516, 538, 539, 540, 541, 548, 555, 563, 570, 571, 577, 590, 591, 595, 622, 626, 634, 638, 639, 657, 659, 669, 671, 680, 682, 689, 695, 696, 699, 702, 703, 704, 705, 708, 710, 716, 725, 737, 745, 746, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 781, 782, 785, 793, 804, 807, 814, 815, 827, 840, 844, 854], "format": [9, 13, 23, 25, 82, 83, 84, 88, 93, 94, 120, 149, 225, 227, 315, 318, 320, 444, 538, 544, 560, 587, 595, 691, 818, 853], "liter": [9, 13, 54, 59, 85, 104, 146, 147, 150, 151, 154, 168, 176, 180, 227, 237, 238, 358, 389, 422, 434, 435, 468, 480, 481, 491, 501, 505, 509, 516, 541, 569, 595, 601, 602, 777, 778, 796, 808, 809, 854], "left": [9, 59, 99, 100, 131, 132, 142, 143, 227, 328, 329, 330, 345, 395, 396, 397, 398, 399, 401, 402, 403, 431, 447, 457, 471, 477, 478, 486, 500, 516, 546, 547, 551, 552, 595, 703, 704, 705, 805, 821, 839, 854], "center": [9, 328, 329, 330, 394, 395, 396, 397, 398, 399, 401, 402, 403, 516, 703, 704, 705, 763, 764, 765, 766, 767, 768, 770, 771, 772, 854], "right": [9, 11, 59, 83, 84, 99, 100, 131, 132, 142, 143, 227, 328, 329, 330, 395, 396, 397, 398, 399, 401, 402, 403, 415, 436, 471, 516, 546, 547, 551, 552, 595, 703, 704, 705, 789, 810, 854], "cell": 9, "align": [9, 53, 447, 821], "rais": [9, 13, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 99, 100, 147, 164, 227, 372, 384, 444, 491, 516, 818, 837, 845, 854], "keyerror": [9, 13], "recognis": [9, 13, 101], "column_abc": 9, "column_xyz": 9, "column": [10, 11, 14, 15, 17, 44, 53, 57, 58, 62, 66, 73, 74, 75, 76, 77, 78, 82, 83, 84, 86, 87, 90, 91, 92, 93, 95, 96, 97, 99, 103, 110, 115, 116, 117, 118, 119, 120, 125, 128, 130, 131, 132, 136, 137, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 160, 161, 162, 167, 168, 174, 175, 176, 180, 182, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 210, 227, 237, 238, 240, 249, 251, 254, 297, 300, 302, 303, 305, 307, 309, 310, 313, 314, 316, 322, 323, 326, 331, 337, 358, 372, 374, 382, 385, 389, 391, 395, 396, 397, 398, 399, 401, 402, 403, 410, 417, 418, 440, 441, 444, 450, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507, 508, 509, 516, 535, 536, 537, 538, 545, 546, 547, 551, 552, 556, 557, 558, 559, 560, 561, 564, 566, 568, 569, 574, 575, 576, 579, 580, 581, 583, 584, 585, 586, 595, 601, 602, 620, 666, 669, 671, 675, 677, 680, 682, 683, 686, 687, 689, 695, 696, 699, 783, 814, 815, 835, 854], "If": [10, 23, 25, 26, 27, 44, 55, 58, 59, 73, 75, 76, 77, 83, 84, 85, 86, 90, 92, 93, 95, 96, 97, 110, 121, 131, 132, 143, 149, 152, 154, 166, 173, 183, 184, 187, 210, 227, 240, 269, 279, 280, 281, 337, 359, 367, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 411, 415, 416, 417, 418, 430, 433, 438, 439, 440, 441, 444, 458, 465, 467, 468, 469, 475, 477, 486, 491, 503, 516, 546, 547, 551, 552, 556, 560, 573, 587, 589, 595, 603, 604, 635, 647, 648, 649, 714, 735, 759, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 779, 789, 790, 804, 807, 812, 813, 814, 815, 818, 833, 837, 840, 845, 854], "i": [10, 23, 25, 26, 44, 53, 55, 56, 57, 58, 59, 62, 63, 65, 66, 72, 75, 76, 77, 79, 80, 83, 84, 86, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 110, 117, 119, 127, 130, 131, 132, 133, 137, 138, 140, 143, 144, 147, 149, 152, 154, 156, 164, 166, 173, 176, 179, 181, 187, 188, 190, 191, 196, 198, 200, 210, 226, 227, 230, 237, 238, 239, 240, 257, 259, 269, 290, 312, 315, 320, 328, 329, 330, 333, 339, 342, 344, 346, 359, 367, 373, 382, 388, 390, 392, 395, 396, 397, 398, 399, 401, 402, 403, 405, 406, 407, 411, 415, 416, 417, 418, 423, 427, 428, 429, 431, 436, 438, 441, 444, 447, 462, 468, 469, 473, 475, 477, 478, 479, 486, 491, 502, 506, 516, 531, 536, 539, 545, 546, 547, 550, 552, 554, 556, 560, 563, 572, 573, 579, 584, 587, 589, 595, 602, 603, 604, 623, 625, 635, 657, 685, 688, 693, 702, 703, 704, 705, 707, 714, 715, 718, 719, 720, 722, 732, 734, 735, 757, 759, 761, 774, 775, 776, 777, 778, 779, 789, 790, 793, 797, 801, 802, 803, 805, 810, 812, 815, 821, 833, 837, 843, 844, 845, 854], "rang": [10, 58, 59, 92, 119, 131, 227, 297, 309, 313, 314, 315, 320, 322, 345, 468, 473, 480, 481, 516, 546, 595, 666, 682, 686, 687, 688, 693, 695, 702, 752, 854], "100": [10, 83, 84, 93, 96, 447, 468, 764, 765, 767, 854], "98": [10, 137, 227, 417, 418, 453, 458, 516], "99": [10, 122, 123, 137, 140, 227, 235, 334, 336, 417, 418, 453, 458, 471, 516, 540, 541, 595, 701, 708, 854], "i64": [10, 14, 57, 72, 73, 74, 75, 76, 77, 93, 104, 110, 111, 112, 113, 115, 117, 118, 120, 121, 123, 124, 128, 129, 130, 131, 132, 134, 136, 137, 138, 142, 143, 145, 146, 149, 150, 154, 155, 156, 157, 160, 161, 162, 163, 166, 168, 170, 171, 173, 174, 176, 177, 178, 180, 185, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 208, 210, 212, 213, 227, 236, 239, 240, 257, 258, 259, 262, 264, 266, 267, 270, 271, 274, 275, 277, 279, 280, 281, 286, 287, 288, 289, 291, 292, 298, 299, 301, 304, 306, 308, 311, 317, 319, 331, 333, 334, 336, 337, 338, 341, 343, 344, 345, 346, 349, 352, 354, 355, 356, 358, 360, 363, 366, 367, 368, 377, 382, 383, 385, 386, 389, 390, 392, 393, 405, 407, 408, 410, 411, 412, 416, 417, 434, 435, 449, 450, 451, 452, 453, 454, 458, 459, 461, 464, 465, 472, 474, 479, 483, 484, 502, 505, 506, 509, 516, 529, 531, 536, 538, 539, 541, 542, 545, 546, 547, 550, 551, 557, 560, 561, 562, 563, 569, 570, 571, 573, 574, 576, 578, 580, 583, 584, 586, 589, 590, 591, 595, 603, 604, 623, 643, 647, 650, 653, 654, 655, 656, 658, 665, 667, 668, 670, 676, 678, 681, 684, 690, 692, 707, 708, 710, 711, 716, 718, 726, 737, 744, 760, 764, 767, 771, 774, 777, 778, 781, 785, 786, 790, 791, 827, 828, 829, 835, 841, 843, 846, 854], "10": [10, 23, 27, 53, 58, 59, 92, 93, 98, 103, 104, 112, 121, 129, 131, 132, 134, 136, 137, 138, 151, 155, 157, 161, 162, 168, 177, 196, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 227, 239, 247, 248, 249, 250, 251, 256, 260, 268, 269, 272, 279, 284, 289, 291, 293, 294, 315, 320, 324, 339, 342, 343, 345, 350, 358, 361, 362, 365, 383, 396, 416, 447, 452, 483, 489, 507, 516, 531, 546, 547, 550, 562, 563, 569, 576, 584, 595, 604, 622, 626, 634, 635, 638, 647, 693, 697, 701, 707, 716, 726, 737, 739, 752, 777, 778, 827, 854], "4": [10, 18, 23, 44, 53, 54, 57, 59, 72, 73, 74, 75, 76, 77, 93, 98, 99, 100, 104, 110, 111, 112, 114, 117, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 149, 151, 152, 154, 155, 156, 157, 161, 165, 168, 169, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 234, 235, 239, 240, 250, 256, 257, 260, 268, 269, 272, 275, 276, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 297, 301, 307, 308, 309, 313, 314, 315, 316, 317, 320, 322, 323, 326, 332, 333, 335, 336, 340, 341, 343, 344, 345, 346, 355, 356, 358, 361, 363, 365, 368, 382, 384, 385, 387, 388, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 408, 409, 412, 416, 417, 418, 419, 422, 430, 431, 433, 436, 438, 440, 441, 444, 450, 452, 453, 454, 457, 458, 471, 474, 479, 483, 505, 506, 509, 516, 529, 530, 531, 536, 538, 539, 540, 541, 545, 546, 547, 550, 551, 552, 554, 557, 558, 559, 560, 561, 562, 563, 564, 569, 570, 571, 573, 575, 576, 578, 580, 581, 582, 583, 584, 586, 589, 590, 591, 595, 603, 606, 613, 622, 623, 626, 634, 635, 638, 644, 645, 647, 657, 658, 660, 669, 670, 675, 677, 680, 681, 682, 683, 687, 688, 689, 690, 691, 693, 695, 696, 707, 709, 710, 718, 721, 726, 728, 729, 730, 731, 733, 745, 752, 753, 754, 757, 766, 768, 769, 770, 771, 772, 774, 776, 786, 790, 791, 796, 804, 805, 807, 810, 812, 814, 815, 818, 828, 829, 839, 846, 854], "95": [10, 235, 516], "96": [10, 235, 516], "97": [10, 137, 227, 235, 516], "move": [11, 321, 328, 329, 330, 395, 396, 398, 402, 516, 694, 703, 704, 705, 764, 765, 767, 771, 854], "inlin": 11, "name": [11, 15, 17, 43, 58, 59, 62, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 90, 91, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 110, 113, 116, 117, 125, 128, 142, 143, 149, 156, 160, 167, 180, 186, 187, 189, 195, 196, 197, 227, 236, 273, 315, 320, 331, 358, 368, 372, 374, 385, 448, 449, 450, 465, 466, 472, 476, 479, 484, 489, 490, 498, 499, 501, 503, 506, 507, 516, 532, 535, 551, 552, 560, 566, 568, 574, 580, 584, 586, 588, 595, 600, 639, 646, 688, 693, 712, 760, 822, 824, 835, 838, 854], "parenthes": 11, "below": [12, 117, 130, 227, 345, 509, 516, 536, 595], "when": [12, 16, 27, 44, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 83, 84, 86, 90, 93, 95, 96, 103, 104, 106, 110, 118, 119, 121, 123, 126, 131, 164, 168, 227, 279, 280, 281, 328, 329, 330, 336, 367, 373, 444, 477, 486, 516, 541, 546, 569, 595, 603, 647, 648, 649, 702, 703, 704, 705, 710, 777, 778, 854], "displai": [12, 16], "ascii_ful": 13, "ascii_no_bord": 13, "ascii_borders_onli": 13, "ascii_borders_only_condens": 13, "ascii_horizontal_onli": 13, "ascii_markdown": 13, "utf8_ful": 13, "utf8_full_condens": 13, "utf8_no_bord": 13, "utf8_borders_onli": 13, "utf8_horizontal_onli": 13, "noth": [13, 423, 427, 428, 429, 797, 801, 802, 803], "style": [13, 156, 227], "border": 13, "line": [13, 83, 84, 85, 93], "onli": [13, 21, 44, 53, 55, 57, 83, 84, 85, 86, 90, 93, 95, 96, 97, 103, 104, 110, 117, 130, 143, 147, 174, 176, 227, 235, 278, 279, 280, 281, 312, 340, 390, 460, 501, 505, 516, 531, 536, 548, 552, 555, 574, 595, 644, 647, 648, 649, 685, 713, 759, 833, 854], "dens": [13, 388, 516, 757, 854], "row": [13, 18, 23, 25, 27, 53, 65, 68, 71, 74, 75, 77, 83, 84, 85, 86, 90, 93, 95, 96, 97, 102, 103, 110, 117, 121, 124, 126, 131, 133, 134, 139, 141, 143, 144, 145, 149, 152, 173, 177, 178, 181, 188, 190, 197, 200, 203, 213, 227, 240, 333, 339, 343, 362, 383, 392, 416, 452, 477, 478, 486, 489, 500, 507, 516, 531, 536, 539, 542, 543, 546, 548, 552, 553, 555, 556, 560, 573, 577, 578, 579, 586, 589, 590, 591, 595, 603, 707, 716, 737, 752, 761, 790, 827, 854], "space": 13, "horizont": [13, 57, 126, 136, 190, 227, 474, 477, 478, 479, 483, 486, 493, 496, 500, 506], "markdown": 13, "compat": [13, 27, 227], "same": [13, 44, 53, 56, 99, 102, 110, 188, 200, 227, 234, 239, 240, 333, 339, 394, 395, 396, 397, 398, 399, 401, 402, 403, 516, 579, 589, 595, 599, 603, 604, 707, 763, 764, 765, 766, 767, 768, 770, 771, 772, 846, 854], "No": 13, "other": [13, 59, 83, 84, 85, 93, 99, 100, 117, 121, 127, 142, 143, 149, 164, 225, 227, 239, 254, 279, 280, 281, 292, 350, 418, 457, 516, 525, 536, 551, 552, 560, 585, 595, 603, 620, 647, 648, 649, 660, 726, 776, 839, 846, 853, 854], "The": [13, 27, 38, 45, 53, 55, 80, 83, 90, 92, 93, 110, 131, 132, 133, 138, 143, 164, 189, 191, 200, 210, 227, 240, 275, 297, 309, 312, 313, 315, 320, 322, 334, 339, 341, 342, 367, 388, 391, 394, 395, 396, 397, 398, 399, 401, 402, 403, 415, 418, 421, 424, 425, 430, 431, 436, 447, 469, 510, 512, 516, 517, 520, 521, 522, 529, 531, 539, 545, 546, 547, 548, 550, 552, 555, 556, 563, 580, 589, 595, 646, 666, 682, 685, 686, 688, 693, 695, 708, 715, 718, 757, 763, 764, 765, 766, 767, 768, 770, 771, 772, 789, 795, 798, 799, 804, 805, 810, 821, 847, 850, 854, 857, 858, 859], "one": [13, 53, 65, 104, 123, 124, 131, 132, 149, 156, 164, 182, 186, 198, 199, 210, 227, 235, 336, 358, 394, 417, 418, 448, 453, 465, 505, 506, 516, 535, 541, 542, 546, 547, 560, 585, 595, 603, 710, 763, 822, 854], "more": [13, 25, 27, 53, 71, 90, 103, 104, 110, 130, 144, 149, 152, 164, 166, 188, 200, 227, 240, 279, 280, 281, 358, 359, 367, 405, 415, 459, 506, 516, 545, 560, 579, 589, 595, 604, 647, 648, 649, 735, 774, 789, 841, 854, 861], "semigraph": 13, "box": [13, 110, 227], "draw": [13, 18, 19], "found": [13, 23, 66, 118, 227, 429, 444, 449, 803], "unicod": 13, "block": [13, 586, 595, 777, 778, 854], "which": [13, 22, 23, 24, 25, 26, 27, 53, 83, 84, 85, 92, 93, 117, 121, 174, 188, 227, 237, 348, 351, 352, 354, 355, 356, 373, 516, 536, 579, 587, 595, 603, 723, 727, 728, 729, 730, 731, 777, 854], "ar": [13, 27, 44, 59, 65, 71, 72, 74, 76, 77, 83, 84, 85, 90, 92, 93, 95, 96, 99, 100, 102, 103, 106, 110, 117, 119, 122, 126, 131, 132, 143, 144, 149, 164, 180, 184, 191, 227, 237, 273, 288, 289, 293, 294, 315, 320, 327, 348, 350, 351, 352, 354, 355, 356, 359, 388, 391, 392, 394, 400, 415, 417, 418, 430, 433, 451, 468, 469, 474, 503, 510, 512, 515, 516, 517, 520, 521, 522, 525, 536, 540, 546, 547, 548, 552, 555, 556, 560, 563, 585, 595, 601, 603, 639, 655, 656, 688, 693, 701, 702, 712, 714, 723, 726, 727, 728, 729, 730, 731, 735, 757, 761, 763, 769, 789, 804, 807, 826, 837, 845, 847, 850, 854, 857, 858, 859], "http": [13, 427, 801, 861], "en": 13, "wikipedia": 13, "org": 13, "wiki": 13, "drawing_charact": 13, "box_draw": 13, "hide": [14, 15, 16, 17], "etc": [14, 75, 77, 83, 86, 90, 95, 97, 468, 777, 778, 854], "inform": [16, 55, 74, 279, 280, 281, 359, 415, 516, 563, 595, 647, 648, 649, 735, 789, 854], "separ": [17, 23, 187, 227, 261, 339, 474, 477, 478, 516, 627], "between": [17, 25, 57, 88, 101, 102, 103, 104, 158, 211, 227, 261, 276, 292, 346, 383, 387, 399, 421, 476, 498, 499, 503, 516, 564, 595, 627, 641, 660, 752, 756, 768, 795, 854], "set_tbl_column_data_type_inlin": 17, "max": [18, 27, 103, 104, 114, 123, 131, 132, 156, 227, 279, 280, 286, 336, 382, 388, 395, 407, 441, 516, 541, 546, 547, 588, 595, 647, 648, 653, 658, 710, 757, 764, 779, 815, 854], "both": [18, 23, 44, 59, 131, 132, 142, 143, 164, 227, 239, 346, 395, 396, 397, 398, 399, 401, 402, 403, 432, 437, 443, 516, 546, 547, 551, 552, 595], "element": [18, 81, 104, 107, 241, 242, 243, 244, 245, 246, 257, 282, 283, 285, 286, 287, 288, 289, 290, 332, 342, 350, 365, 383, 388, 391, 406, 412, 413, 414, 419, 440, 441, 455, 456, 458, 516, 604, 605, 606, 607, 608, 609, 610, 623, 651, 652, 653, 654, 655, 656, 657, 706, 711, 726, 739, 752, 757, 775, 786, 787, 788, 792, 793, 814, 815, 830, 831, 840, 841, 844, 854], "width": [19, 83, 84, 227, 431, 436, 447, 595, 805, 810, 821], "char": [19, 44, 433, 807], "enabl": [20, 407, 516, 779, 854], "addit": [20, 101, 102], "verbos": 20, "debug": [20, 531, 539, 556, 595], "log": [20, 327, 458, 516, 701, 840, 854], "if_set": 21, "dict": [21, 27, 45, 55, 73, 74, 83, 84, 85, 86, 87, 90, 91, 93, 95, 97, 103, 154, 160, 167, 180, 181, 227, 556, 566, 568, 589, 595, 712, 854], "none": [21, 22, 23, 24, 25, 26, 27, 30, 39, 43, 53, 58, 59, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 114, 117, 122, 123, 131, 132, 133, 138, 142, 143, 149, 152, 153, 164, 166, 171, 173, 180, 182, 187, 188, 189, 190, 191, 196, 227, 236, 239, 240, 250, 259, 269, 273, 275, 279, 280, 281, 284, 293, 294, 315, 320, 325, 328, 329, 330, 331, 334, 335, 336, 341, 342, 345, 352, 353, 354, 355, 356, 361, 367, 381, 383, 389, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 409, 410, 411, 412, 416, 421, 422, 424, 425, 426, 429, 430, 431, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 447, 448, 449, 457, 465, 467, 468, 471, 474, 475, 481, 482, 484, 485, 491, 492, 501, 504, 505, 508, 516, 529, 530, 536, 540, 541, 546, 547, 550, 551, 552, 554, 556, 560, 571, 572, 573, 579, 580, 584, 585, 587, 589, 595, 604, 611, 612, 625, 635, 639, 646, 647, 658, 660, 688, 693, 698, 701, 703, 704, 705, 708, 709, 710, 714, 715, 717, 718, 730, 731, 735, 763, 764, 765, 766, 767, 768, 770, 771, 772, 774, 782, 785, 786, 789, 790, 793, 795, 796, 798, 799, 800, 803, 804, 805, 806, 807, 810, 811, 812, 814, 815, 816, 817, 818, 832, 835, 836, 839, 844, 845, 854], "show": [21, 117, 144, 153, 227, 536, 563, 572, 595], "variabl": [21, 78, 149, 182, 227, 560, 595, 834, 854], "chang": [21, 53, 58, 83, 84, 94, 190, 191, 227, 290, 315, 383, 395, 396, 397, 398, 399, 401, 402, 403, 516, 657, 665, 688, 752, 784, 854], "restrict": [21, 441, 815], "return": [21, 23, 25, 26, 53, 54, 55, 56, 58, 59, 65, 68, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 93, 107, 110, 111, 115, 117, 118, 119, 120, 122, 123, 126, 134, 136, 142, 144, 145, 151, 152, 154, 155, 156, 164, 166, 177, 178, 184, 187, 188, 195, 198, 200, 203, 207, 213, 227, 237, 238, 241, 242, 243, 244, 245, 246, 249, 251, 252, 253, 255, 259, 260, 261, 272, 282, 283, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 326, 333, 339, 343, 346, 348, 349, 350, 351, 352, 354, 355, 356, 362, 366, 373, 377, 391, 392, 405, 413, 414, 421, 423, 425, 427, 428, 429, 430, 431, 433, 436, 438, 439, 440, 441, 447, 452, 453, 454, 455, 456, 458, 460, 461, 462, 467, 468, 472, 480, 481, 482, 489, 491, 492, 502, 507, 509, 516, 531, 537, 539, 548, 554, 555, 556, 562, 563, 572, 578, 579, 587, 590, 591, 595, 600, 601, 602, 604, 611, 612, 614, 615, 618, 619, 621, 625, 626, 627, 638, 658, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 699, 702, 707, 712, 714, 716, 717, 721, 723, 724, 726, 727, 728, 729, 730, 731, 733, 737, 744, 761, 762, 774, 776, 778, 795, 796, 797, 799, 801, 802, 803, 804, 805, 807, 810, 812, 813, 814, 815, 818, 821, 827, 829, 840, 842, 846, 854], "dictionari": [21, 73, 74, 77, 83, 84, 87, 91, 93, 154, 180, 181, 227, 658, 712, 854], "includ": [21, 23, 55, 103, 119, 131, 187, 190, 227, 316, 346, 439, 440, 477, 516, 546, 595, 689, 702, 813, 814, 845, 854], "those": [21, 388, 516, 757, 854], "_have_": 21, "been": [21, 230, 388, 516, 757, 854], "specif": [21, 92, 103, 394, 444, 505, 516, 763, 818, 854], "set_stat": 21, "all_stat": 21, "file": [22, 23, 24, 25, 26, 27, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 121, 227, 539, 565, 587, 595, 603, 854], "binaryio": [22, 24, 82, 83, 85, 86, 87, 90, 91, 227], "bytesio": [22, 23, 24, 27, 82, 83, 84, 85, 86, 90, 227], "path": [22, 23, 24, 25, 26, 27, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 227, 407, 429, 516, 565, 587, 595, 779, 803, 854], "compress": [22, 24, 27, 227], "avrocompress": [22, 227], "uncompress": [22, 24, 27, 86, 95, 227], "write": [22, 23, 24, 25, 27, 227, 279, 280, 281, 516, 554, 572, 587, 595, 647, 648, 649, 854], "apach": [22, 27, 82, 227], "avro": [22, 82, 227, 525], "should": [22, 23, 24, 25, 26, 27, 81, 101, 102, 104, 107, 110, 131, 143, 200, 227, 235, 240, 257, 277, 290, 324, 352, 354, 394, 395, 396, 397, 398, 399, 401, 402, 403, 406, 415, 437, 443, 491, 516, 535, 546, 551, 552, 556, 572, 587, 589, 595, 604, 623, 643, 657, 697, 763, 764, 765, 766, 767, 768, 770, 771, 772, 775, 789, 806, 811, 817, 854], "written": [22, 23, 24, 25, 26, 27, 227, 587, 595], "snappi": [22, 27, 227], "deflat": [22, 227], "has_head": [23, 83, 84, 85, 93, 227], "sep": [23, 80, 83, 84, 93, 227, 474], "quot": [23, 83, 84, 93, 227], "batch_siz": [23, 83, 84, 96, 227], "1024": [23, 27, 83, 84, 96, 227], "datetime_format": [23, 227], "date_format": [23, 227], "time_format": [23, 227], "float_precis": [23, 227], "null_valu": [23, 83, 84, 93, 227], "textio": [23, 83, 227], "_io": [23, 82, 85, 86, 227], "pathlib": [23, 25, 26, 82, 85, 86, 87, 88, 89, 91, 93, 95, 96, 227, 565, 587, 595], "comma": [23, 227], "csv": [23, 83, 84, 85, 93, 227, 525, 588], "result": [23, 25, 26, 53, 73, 75, 77, 92, 93, 95, 97, 104, 121, 131, 152, 171, 198, 227, 328, 329, 330, 359, 392, 394, 395, 396, 397, 398, 399, 401, 402, 403, 407, 409, 439, 440, 468, 477, 478, 479, 492, 506, 516, 528, 546, 556, 563, 571, 587, 595, 603, 703, 704, 705, 735, 761, 763, 764, 765, 766, 767, 768, 770, 771, 772, 779, 782, 813, 814, 837, 854], "instead": [23, 25, 26, 81, 90, 103, 107, 110, 131, 147, 152, 154, 227, 249, 251, 430, 468, 506, 516, 540, 545, 546, 587, 595, 613, 616, 777, 778, 804, 854], "whether": [23, 54, 59, 75, 77, 104, 131, 132, 227, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 595], "header": [23, 27, 83, 84, 85, 93, 118, 156, 187, 227], "field": [23, 45, 189, 227, 273, 440, 441, 449, 477, 478, 580, 595, 639, 814, 815, 824], "symbol": [23, 227], "byte": [23, 83, 84, 85, 86, 87, 90, 91, 93, 119, 227, 430, 433, 702, 804, 807, 854], "process": [23, 227], "per": [23, 102, 103, 152, 153, 207, 209, 211, 214, 215, 216, 217, 218, 219, 220, 221, 227, 257, 259, 623, 625], "thread": [23, 80, 83, 84, 92, 105, 227, 257, 623], "specifi": [23, 53, 59, 66, 73, 75, 77, 103, 119, 123, 227, 328, 329, 330, 336, 391, 431, 436, 516, 541, 595, 702, 703, 704, 705, 710, 805, 810, 854], "defin": [23, 30, 59, 101, 102, 103, 110, 131, 132, 152, 200, 227, 240, 395, 396, 397, 398, 399, 401, 402, 403, 467, 491, 516, 546, 547, 589, 595, 604, 854], "chrono": [23, 227, 318, 444, 691, 818], "rust": [23, 27, 67, 86, 90, 110, 200, 227, 240, 516, 589], "crate": [23, 227], "fraction": [23, 99, 100, 166, 227, 316, 383, 405, 444, 516, 689, 752, 774, 854], "second": [23, 59, 131, 132, 143, 191, 227, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 444, 469, 481, 482, 516, 546, 547, 552, 595, 685, 688, 693], "precis": [23, 227, 295, 444, 664], "infer": [23, 74, 75, 77, 83, 84, 85, 93, 96, 101, 110, 227, 392, 444, 516, 761, 854], "maximum": [23, 83, 84, 93, 102, 103, 104, 146, 227, 252, 279, 280, 369, 379, 388, 493, 516, 557, 595, 618, 647, 648, 672, 740, 748, 753, 757, 854], "timeunit": [23, 30, 31, 59, 227, 295, 319, 324, 664, 692, 697, 832, 854], "frame": [23, 53, 85, 103, 110, 152, 184, 190, 227, 530, 549, 554, 595], "": [23, 58, 83, 84, 104, 115, 117, 119, 130, 131, 137, 142, 143, 161, 162, 178, 198, 227, 256, 260, 261, 268, 269, 272, 299, 331, 359, 373, 377, 379, 380, 382, 383, 390, 394, 418, 430, 431, 433, 436, 438, 439, 441, 444, 447, 449, 479, 482, 484, 487, 493, 496, 498, 506, 516, 536, 545, 546, 552, 578, 588, 595, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 622, 626, 627, 629, 634, 635, 638, 641, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 660, 665, 668, 688, 693, 700, 702, 704, 705, 707, 708, 709, 710, 711, 713, 715, 716, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 748, 749, 752, 753, 754, 756, 757, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 785, 786, 787, 788, 790, 791, 793, 796, 797, 798, 799, 800, 802, 804, 805, 807, 808, 810, 812, 815, 816, 818, 821, 824, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 854], "datetim": [23, 59, 76, 114, 131, 132, 143, 191, 227, 255, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 346, 395, 396, 397, 398, 399, 401, 402, 403, 444, 457, 471, 482, 491, 496, 516, 546, 547, 552, 595, 621, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 720, 740, 743, 748, 749, 778, 818, 832, 839, 854], "col": [23, 53, 54, 75, 77, 93, 102, 103, 110, 124, 130, 131, 132, 140, 152, 155, 164, 168, 174, 189, 195, 196, 198, 227, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 338, 339, 340, 344, 345, 346, 347, 349, 350, 352, 353, 354, 357, 358, 359, 360, 364, 365, 366, 369, 370, 371, 376, 378, 379, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 468, 473, 474, 479, 482, 485, 487, 488, 499, 505, 506, 509, 516, 542, 545, 546, 547, 549, 562, 569, 580, 583, 584, 585, 588, 595, 623, 639, 643, 685, 761, 777, 778, 801, 803, 818, 854], "decim": [23, 227, 404, 516, 773, 854], "place": [23, 116, 136, 137, 161, 170, 171, 174, 193, 227, 249, 251, 261, 268, 408, 409, 516, 570, 571, 574, 595, 613, 616, 627, 634, 758, 760, 781, 782, 791, 854], "appli": [23, 54, 57, 93, 101, 103, 104, 117, 126, 155, 198, 227, 297, 300, 302, 303, 305, 307, 309, 310, 313, 314, 316, 322, 323, 326, 329, 330, 367, 382, 394, 395, 396, 398, 402, 465, 468, 477, 478, 486, 492, 500, 516, 536, 548, 555, 556, 562, 595, 666, 669, 671, 675, 677, 680, 682, 683, 686, 687, 689, 695, 696, 699, 704, 705, 763, 764, 765, 767, 771, 854], "float32": [23, 126, 227, 722, 854], "float64": [23, 81, 103, 107, 118, 119, 126, 167, 227, 241, 242, 243, 244, 245, 246, 276, 282, 283, 316, 331, 352, 354, 413, 414, 455, 456, 471, 484, 516, 537, 568, 595, 689], "datatyp": [23, 38, 45, 51, 74, 79, 81, 83, 84, 85, 87, 91, 101, 102, 103, 104, 107, 110, 118, 126, 167, 227, 240, 276, 331, 367, 410, 444, 457, 467, 468, 472, 484, 491, 492, 516, 525, 537, 556, 568, 589, 595, 604, 641, 658, 700, 717, 720, 732, 734, 783, 818, 839, 854], "repres": [23, 39, 51, 59, 72, 73, 75, 76, 77, 227, 352, 354, 472, 491, 516, 778, 793, 844, 854], "null": [23, 53, 57, 74, 83, 84, 93, 114, 117, 123, 126, 127, 138, 142, 147, 148, 153, 158, 170, 171, 174, 175, 176, 180, 189, 192, 206, 227, 236, 239, 249, 251, 256, 258, 259, 262, 268, 273, 275, 279, 280, 281, 284, 291, 293, 294, 298, 301, 304, 306, 308, 311, 317, 328, 329, 330, 331, 334, 335, 336, 337, 341, 345, 352, 353, 354, 355, 356, 361, 381, 383, 389, 394, 395, 396, 397, 398, 399, 401, 402, 403, 408, 409, 410, 412, 417, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 436, 438, 440, 441, 442, 447, 457, 464, 465, 471, 473, 474, 484, 491, 505, 516, 536, 541, 550, 551, 570, 571, 574, 580, 585, 595, 604, 613, 616, 622, 634, 639, 647, 659, 662, 667, 670, 676, 678, 681, 684, 690, 703, 704, 705, 708, 710, 714, 730, 731, 751, 752, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 776, 781, 782, 786, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 810, 812, 814, 815, 816, 837, 839, 845, 854], "empti": [23, 64, 85, 111, 112, 140, 149, 227, 502, 529, 530, 560, 595, 646, 650, 722, 854], "import": [23, 30, 59, 72, 75, 76, 92, 93, 94, 99, 100, 101, 102, 103, 104, 114, 131, 143, 184, 190, 191, 227, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 482, 491, 546, 556, 595, 651, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 720, 723, 727, 728, 729, 763, 787, 830, 854], "foo": [23, 110, 113, 115, 116, 117, 118, 121, 124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 140, 142, 145, 146, 147, 148, 150, 153, 154, 156, 158, 160, 161, 162, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 187, 189, 192, 193, 194, 198, 210, 227, 236, 255, 258, 259, 262, 263, 279, 280, 281, 312, 339, 343, 344, 384, 392, 408, 409, 421, 423, 424, 425, 428, 432, 437, 439, 441, 443, 445, 446, 452, 454, 465, 468, 472, 488, 491, 499, 502, 509, 516, 532, 536, 537, 542, 549, 550, 551, 568, 569, 574, 580, 582, 584, 585, 595, 627, 647, 685, 797, 798, 799, 802, 815, 854], "bar": [23, 110, 113, 115, 116, 117, 118, 121, 124, 125, 126, 127, 128, 129, 134, 136, 137, 138, 140, 142, 145, 146, 147, 148, 150, 153, 154, 156, 158, 160, 161, 162, 164, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 189, 192, 193, 198, 210, 227, 236, 263, 344, 415, 424, 425, 439, 441, 465, 502, 509, 516, 532, 536, 537, 542, 549, 550, 551, 568, 569, 574, 580, 582, 595, 627, 789, 798, 799, 815, 854], "6": [23, 72, 74, 75, 76, 77, 110, 113, 115, 116, 117, 118, 120, 121, 124, 125, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 140, 142, 145, 146, 147, 148, 149, 150, 153, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 189, 190, 191, 192, 193, 195, 196, 197, 198, 203, 210, 212, 213, 227, 240, 275, 276, 288, 289, 292, 297, 312, 313, 314, 316, 323, 327, 333, 335, 336, 341, 343, 345, 363, 382, 386, 388, 389, 392, 395, 396, 397, 398, 399, 401, 402, 403, 406, 417, 418, 423, 430, 433, 452, 454, 465, 479, 483, 505, 506, 516, 531, 532, 536, 537, 538, 539, 542, 545, 546, 547, 550, 551, 560, 563, 568, 569, 570, 571, 573, 574, 578, 580, 582, 583, 584, 586, 590, 591, 595, 603, 645, 651, 655, 656, 658, 660, 685, 696, 707, 745, 757, 766, 768, 769, 770, 772, 776, 797, 804, 826, 854], "7": [23, 59, 113, 114, 115, 116, 118, 120, 124, 125, 127, 131, 132, 134, 136, 138, 142, 146, 147, 148, 150, 153, 158, 160, 162, 164, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 183, 184, 185, 190, 191, 192, 193, 227, 289, 297, 313, 315, 320, 323, 326, 332, 343, 345, 382, 392, 396, 402, 452, 454, 505, 516, 532, 537, 538, 542, 546, 547, 550, 551, 564, 568, 569, 574, 578, 595, 610, 666, 671, 688, 693, 696, 771, 854], "8": [23, 37, 50, 52, 53, 98, 102, 103, 110, 113, 114, 115, 116, 117, 118, 120, 124, 125, 127, 134, 136, 142, 146, 147, 148, 150, 158, 160, 162, 164, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 183, 184, 185, 190, 192, 193, 196, 227, 239, 250, 256, 257, 284, 290, 293, 294, 345, 361, 382, 384, 385, 392, 393, 396, 397, 399, 401, 403, 410, 416, 431, 436, 444, 450, 454, 479, 483, 505, 506, 516, 532, 536, 537, 538, 542, 551, 563, 568, 569, 574, 578, 584, 595, 622, 623, 657, 671, 752, 763, 766, 768, 769, 770, 772, 805, 810, 818, 854], "9": [23, 53, 110, 126, 132, 134, 138, 168, 177, 190, 193, 195, 196, 198, 212, 227, 239, 250, 267, 270, 284, 289, 293, 294, 297, 313, 322, 323, 345, 350, 358, 361, 382, 392, 394, 396, 402, 412, 416, 454, 471, 473, 505, 516, 547, 550, 569, 583, 584, 595, 666, 675, 677, 683, 688, 689, 693, 695, 707, 726, 763, 771, 773, 786, 854], "ham": [23, 113, 115, 116, 117, 118, 124, 125, 127, 133, 134, 136, 142, 146, 147, 148, 150, 153, 158, 160, 162, 164, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 182, 183, 184, 185, 192, 193, 227, 472, 532, 536, 537, 542, 551, 568, 569, 574, 585, 595], "b": [23, 44, 57, 72, 73, 74, 75, 76, 77, 85, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133, 134, 136, 137, 139, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 227, 236, 239, 240, 250, 254, 257, 261, 263, 275, 276, 277, 284, 292, 293, 294, 331, 333, 335, 336, 337, 341, 342, 345, 348, 351, 352, 353, 354, 355, 356, 358, 361, 363, 368, 377, 381, 385, 393, 410, 416, 434, 448, 449, 450, 460, 462, 464, 465, 471, 474, 476, 479, 483, 484, 487, 498, 503, 505, 506, 516, 529, 530, 531, 532, 536, 537, 538, 539, 540, 541, 542, 545, 546, 551, 554, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 571, 573, 574, 575, 576, 578, 580, 581, 583, 584, 585, 586, 590, 591, 595, 603, 623, 643, 658, 660, 701, 702, 710, 726, 734, 760, 776, 808, 842, 854], "c": [23, 27, 44, 74, 76, 85, 93, 102, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 125, 126, 127, 129, 130, 131, 134, 136, 137, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 164, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 179, 183, 184, 185, 187, 188, 190, 192, 193, 196, 201, 202, 203, 204, 205, 206, 208, 210, 212, 213, 227, 240, 254, 261, 263, 358, 410, 440, 444, 460, 462, 465, 471, 474, 479, 487, 505, 506, 516, 529, 530, 531, 532, 536, 537, 538, 539, 542, 545, 546, 551, 554, 560, 563, 568, 569, 573, 574, 584, 585, 590, 591, 595, 658, 734, 814, 818, 842, 854], "d": [23, 44, 94, 114, 133, 134, 137, 142, 145, 177, 179, 190, 193, 196, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 227, 299, 339, 410, 423, 428, 440, 444, 471, 516, 551, 584, 595, 668, 691, 797, 802, 814, 818], "e": [23, 44, 83, 84, 85, 86, 90, 95, 97, 114, 134, 145, 177, 179, 190, 196, 227, 327, 331, 339, 364, 407, 410, 415, 484, 516, 554, 584, 595, 701, 776, 779, 789, 837, 854], "dirpath": [23, 93, 227], "new_fil": [23, 227], "ipccompress": [24, 227], "arrow": [24, 60, 72, 86, 95, 179, 210, 227, 833, 837, 854], "ipc": [24, 86, 87, 94, 95, 227, 525], "binari": [24, 227], "stream": [24, 56, 227, 531, 539, 563, 572, 595], "feather": [24, 86, 95, 227, 525], "lz4": [24, 27, 227], "zstd": [24, 27, 227], "pretti": [25, 227], "row_ori": [25, 227], "json_lin": [25, 88, 227], "to_str": [25, 227, 587, 595], "io": [25, 26, 88, 89, 227, 565, 587, 595, 861], "iobas": [25, 26, 88, 89, 227, 565, 587, 595], "serial": [25, 26, 227], "represent": [25, 26, 227, 277, 297, 300, 302, 303, 305, 307, 309, 310, 313, 314, 316, 322, 323, 326, 457, 516, 533, 534, 554, 595, 643, 666, 669, 671, 675, 677, 680, 682, 683, 686, 687, 689, 695, 696, 699, 839, 854], "orient": [25, 75, 77, 227], "slower": [25, 75, 77, 110, 154, 191, 200, 227, 240, 516, 589], "common": [25, 227], "deprec": [25, 56, 88, 227, 230, 531, 539, 587, 595], "argument": [25, 27, 56, 83, 88, 90, 131, 132, 147, 155, 156, 176, 184, 191, 227, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 516, 531, 539, 546, 547, 562, 587, 595, 688, 693, 854], "toggl": [25, 88, 106, 227], "ndjson": [25, 88, 227], "ignor": [25, 56, 103, 104, 147, 176, 227, 256, 291, 379, 380, 516, 531, 539, 587, 595, 622, 659, 748, 749, 854], "write_ndjson": [25, 227], "newlin": [26, 89, 96, 227], "delimit": [26, 83, 84, 89, 93, 96, 227, 421, 795], "parquetcompress": [27, 227], "compression_level": [27, 227], "statist": [27, 83, 84, 114, 227, 329, 330, 359, 395, 396, 397, 398, 399, 400, 401, 402, 403, 415, 516, 658, 704, 705, 735, 769, 789, 854], "row_group_s": [27, 227], "use_pyarrow": [27, 83, 86, 90, 227, 836, 854], "pyarrow_opt": [27, 90, 227], "object": [27, 59, 73, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 97, 102, 103, 104, 144, 184, 227, 491, 525, 530, 545, 549, 554, 565, 595, 617, 642, 663, 794, 833, 854], "parquet": [27, 90, 91, 97, 227, 525], "gzip": [27, 227], "lzo": [27, 227], "brotli": [27, 227], "choos": [27, 227], "good": [27, 227], "perform": [27, 64, 83, 84, 86, 90, 93, 95, 96, 97, 110, 131, 132, 143, 159, 200, 227, 240, 516, 546, 547, 552, 586, 589, 595], "fast": [27, 227, 407, 516, 779, 854], "decompress": [27, 227], "backward": [27, 123, 143, 227, 275, 336, 516, 541, 552, 595, 710, 854], "guarante": [27, 83, 84, 227, 539, 595], "you": [27, 53, 73, 81, 83, 84, 85, 90, 93, 107, 110, 117, 121, 143, 152, 183, 187, 200, 210, 227, 240, 257, 279, 280, 281, 331, 337, 367, 390, 395, 396, 397, 398, 399, 401, 402, 403, 430, 433, 468, 477, 486, 516, 531, 536, 548, 552, 555, 572, 589, 595, 603, 623, 647, 648, 649, 759, 804, 807, 837, 845, 854], "deal": [27, 227, 388, 444, 516, 757, 818, 854], "older": [27, 227], "reader": [27, 80, 83, 84, 86, 90, 227, 526], "level": [27, 93, 95, 96, 97, 103, 110, 126, 152, 227, 337, 516, 548, 555, 595], "higher": [27, 158, 211, 227, 387, 399, 499, 516, 564, 595, 756, 768, 854], "mean": [27, 78, 83, 84, 90, 93, 114, 123, 156, 182, 227, 333, 336, 339, 396, 415, 427, 470, 516, 541, 595, 658, 707, 710, 714, 765, 789, 801, 854], "smaller": [27, 119, 227, 539, 595, 702, 854], "disk": [27, 227, 572, 595], "min": [27, 103, 104, 114, 123, 131, 132, 156, 227, 279, 281, 287, 336, 388, 398, 502, 516, 541, 546, 547, 595, 647, 649, 654, 658, 710, 757, 767, 854], "11": [27, 130, 132, 227, 293, 294, 312, 315, 320, 345, 383, 402, 416, 447, 472, 506, 516, 531, 545, 547, 563, 595, 604, 685, 688, 693, 763, 854], "22": [27, 227, 315, 320, 324, 444, 472, 688, 693, 697, 818], "requir": [27, 76, 99, 100, 154, 184, 188, 196, 227, 328, 329, 330, 410, 444, 459, 516, 579, 584, 595, 703, 704, 705, 783, 818, 837, 841, 854], "extra": [27, 83, 85, 86, 90, 95, 97, 121, 154, 227, 603, 854], "comput": [27, 56, 57, 61, 119, 143, 188, 211, 227, 234, 241, 242, 243, 244, 245, 246, 264, 265, 266, 282, 283, 285, 286, 287, 288, 289, 292, 327, 332, 359, 364, 365, 377, 383, 386, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 412, 413, 414, 415, 419, 455, 456, 476, 483, 498, 503, 516, 549, 551, 552, 579, 585, 595, 599, 605, 606, 607, 608, 609, 610, 630, 631, 632, 651, 652, 653, 654, 655, 656, 660, 701, 702, 706, 735, 738, 739, 744, 752, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 786, 787, 788, 789, 792, 830, 831, 854], "size": [27, 83, 84, 102, 103, 104, 105, 119, 131, 190, 227, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 468, 516, 546, 595, 702, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 854], "group": [27, 130, 131, 132, 152, 154, 156, 190, 191, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 227, 235, 240, 257, 382, 417, 418, 427, 453, 467, 516, 545, 546, 547, 588, 589, 590, 591, 595, 623, 801], "chunk": [27, 80, 83, 84, 93, 95, 96, 97, 103, 104, 121, 151, 227, 239, 389, 516, 603, 645, 745, 758, 833, 854], "mai": [27, 57, 58, 72, 83, 86, 94, 95, 110, 119, 121, 143, 170, 171, 190, 227, 268, 290, 295, 302, 315, 331, 334, 395, 396, 397, 398, 399, 401, 402, 403, 408, 409, 477, 478, 486, 500, 516, 556, 570, 571, 586, 589, 595, 603, 634, 657, 664, 671, 688, 702, 708, 781, 782, 854], "reduc": [27, 83, 84, 90, 93, 95, 96, 97, 205, 206, 208, 212, 227, 410, 486, 516, 741, 755, 783, 826, 854], "memori": [27, 57, 72, 75, 76, 77, 83, 84, 86, 90, 93, 95, 96, 97, 110, 121, 172, 200, 210, 227, 240, 389, 410, 516, 589, 603, 758, 783, 784, 854], "pressur": [27, 90, 96, 97, 227, 410, 516, 783, 854], "improv": [27, 86, 95, 227], "speed": [27, 227], "minimum": [27, 102, 103, 104, 126, 150, 227, 279, 281, 328, 329, 330, 376, 380, 388, 496, 516, 561, 595, 647, 649, 679, 703, 704, 705, 749, 754, 757, 854], "64": [27, 33, 36, 49, 227, 384, 516, 752, 854], "implement": [27, 110, 200, 227, 240, 516, 589, 777, 778, 854], "v": [27, 58, 119, 227, 406, 516, 775, 854], "At": [27, 227], "moment": [27, 227, 359, 415, 516, 735, 789, 854], "support": [27, 57, 72, 85, 92, 101, 104, 173, 196, 227, 269, 416, 438, 516, 573, 584, 595, 635, 790, 812, 854], "featur": [27, 44, 55, 227], "pass": [27, 53, 59, 73, 85, 102, 103, 104, 227, 299, 344, 516, 549, 556, 572, 595, 604, 668, 854], "pyarrow": [27, 72, 76, 83, 86, 90, 94, 98, 179, 183, 184, 227, 526, 833, 836, 837, 854], "write_t": [27, 227], "base": [28, 117, 124, 131, 132, 210, 227, 327, 364, 365, 493, 496, 516, 525, 536, 542, 546, 547, 595, 701, 738, 739, 846, 854], "calendar": [29, 30, 131, 132, 143, 191, 227, 302, 312, 315, 320, 326, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 671, 685, 688, 693, 699], "date": [30, 53, 59, 83, 84, 93, 94, 114, 131, 132, 143, 184, 227, 255, 295, 297, 298, 299, 300, 301, 302, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 346, 395, 396, 397, 398, 399, 401, 402, 403, 444, 457, 471, 496, 516, 525, 546, 547, 552, 595, 621, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 720, 740, 743, 748, 749, 778, 818, 839, 854], "time": [30, 31, 55, 56, 59, 93, 121, 131, 132, 143, 191, 227, 254, 255, 295, 296, 299, 312, 319, 321, 324, 325, 444, 457, 458, 473, 474, 480, 481, 482, 501, 516, 525, 531, 546, 547, 552, 563, 595, 603, 620, 664, 665, 668, 685, 692, 694, 697, 698, 818, 832, 839, 840, 854], "time_unit": [30, 31, 59, 324, 697, 854], "u": [30, 31, 59, 295, 299, 319, 324, 444, 501, 664, 668, 692, 697, 832, 854], "time_zon": [30, 59], "m": [30, 31, 59, 154, 227, 295, 299, 319, 324, 444, 482, 664, 668, 691, 692, 697, 818, 832, 854], "unit": [30, 31, 59, 103, 104, 119, 227, 295, 299, 319, 324, 366, 373, 461, 516, 563, 595, 664, 668, 692, 697, 702, 832, 854], "timezon": [30, 59], "zoneinfo": 30, "run": [30, 56, 110, 144, 200, 227, 240, 257, 290, 501, 502, 516, 531, 539, 563, 572, 589, 595, 623, 657, 854, 860], "available_timezon": 30, "full": [30, 55, 83, 84, 93], "list": [30, 53, 56, 58, 78, 80, 82, 83, 84, 86, 90, 92, 93, 102, 103, 104, 113, 118, 119, 120, 124, 129, 131, 136, 151, 154, 165, 174, 180, 181, 187, 188, 189, 190, 196, 199, 210, 227, 235, 254, 256, 257, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 331, 333, 339, 367, 373, 374, 382, 391, 392, 394, 395, 396, 397, 398, 399, 401, 402, 403, 409, 417, 418, 428, 439, 448, 449, 453, 473, 479, 483, 493, 496, 505, 506, 516, 532, 535, 536, 537, 538, 542, 546, 560, 579, 580, 584, 585, 595, 617, 620, 622, 623, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 645, 702, 707, 711, 717, 726, 761, 763, 764, 765, 766, 767, 768, 770, 771, 772, 802, 813, 824, 828, 836, 854], "attribut": [30, 31, 38, 101, 227, 510, 512, 517, 520, 521, 522, 595, 847, 850, 854, 857, 858, 859], "delta": [31, 498, 503, 793, 844, 854], "32": [32, 35, 48, 98, 132, 227, 410, 516, 547, 595, 660, 686, 752, 768, 854], "bit": [32, 33, 34, 35, 36, 37, 47, 48, 49, 50, 390, 422, 516, 759, 796, 854], "float": [32, 33, 58, 94, 99, 100, 101, 103, 104, 119, 122, 143, 158, 166, 171, 211, 227, 255, 278, 279, 280, 281, 293, 294, 316, 327, 328, 329, 330, 334, 335, 340, 345, 346, 348, 351, 352, 354, 355, 356, 364, 369, 376, 379, 380, 384, 387, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 409, 470, 471, 479, 493, 494, 495, 496, 499, 501, 504, 506, 508, 516, 540, 552, 564, 571, 572, 595, 621, 641, 644, 647, 648, 649, 660, 689, 701, 702, 703, 704, 705, 708, 709, 713, 725, 735, 738, 740, 741, 742, 743, 748, 749, 755, 756, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 789, 793, 826, 844, 854], "point": [32, 33, 103, 104, 122, 144, 166, 227, 278, 293, 294, 316, 335, 340, 352, 354, 404, 405, 516, 540, 556, 595, 644, 689, 709, 713, 725, 773, 774, 854], "16": [34, 47, 98, 131, 132, 195, 196, 227, 345, 396, 482, 483, 516, 546, 547, 572, 583, 584, 595, 688, 693, 752, 787, 830, 854], "sign": [34, 35, 36, 37, 312, 390, 447, 516, 685, 759, 821, 854], "integ": [34, 35, 36, 37, 47, 48, 49, 50, 102, 103, 131, 132, 227, 278, 316, 340, 390, 395, 396, 397, 398, 399, 400, 401, 402, 403, 468, 491, 516, 546, 547, 595, 611, 612, 644, 689, 713, 759, 769, 778, 854], "inner": [38, 44, 142, 227, 261, 292, 516, 551, 595, 627, 660, 717, 854], "union": [38, 45, 53, 56, 57, 73, 74, 79, 81, 101, 102, 103, 104, 107, 110, 115, 117, 118, 120, 130, 146, 147, 149, 150, 152, 154, 160, 167, 168, 174, 176, 187, 189, 191, 196, 198, 227, 240, 276, 331, 350, 367, 444, 465, 466, 468, 469, 471, 472, 473, 474, 478, 479, 484, 492, 493, 496, 500, 502, 505, 506, 516, 531, 538, 539, 545, 556, 563, 568, 569, 572, 574, 584, 588, 589, 595, 604, 660, 726, 778, 818, 854], "nest": [38, 44, 119, 227, 525, 702, 854], "arrai": [38, 72, 75, 83, 84, 119, 179, 183, 227, 254, 263, 264, 265, 266, 267, 270, 271, 279, 280, 281, 285, 286, 287, 288, 289, 365, 395, 396, 398, 401, 402, 403, 407, 423, 425, 427, 428, 429, 473, 483, 516, 620, 629, 630, 631, 632, 633, 636, 637, 647, 648, 649, 653, 654, 655, 656, 660, 702, 739, 764, 765, 767, 770, 771, 772, 779, 784, 797, 799, 801, 802, 803, 833, 837, 845, 854], "within": [38, 99, 100, 143, 227, 552, 595], "wrap": 40, "arbitrari": [40, 103], "python": [40, 59, 83, 84, 98, 110, 165, 200, 227, 240, 367, 467, 516, 589, 604, 672, 673, 674, 679, 836, 854], "queri": [41, 56, 86, 92, 93, 95, 96, 97, 121, 144, 227, 429, 531, 533, 534, 539, 548, 555, 563, 572, 586, 589, 595, 603, 803, 854, 860], "pars": [41, 83, 84, 85, 93, 95, 96, 444, 818], "given": [41, 43, 53, 58, 81, 83, 84, 93, 101, 102, 103, 104, 107, 110, 119, 164, 170, 171, 227, 255, 268, 319, 327, 334, 364, 388, 391, 392, 395, 396, 398, 401, 402, 403, 408, 409, 428, 444, 458, 465, 516, 570, 571, 595, 604, 621, 634, 692, 701, 702, 708, 738, 750, 757, 761, 764, 765, 767, 770, 771, 772, 781, 782, 802, 840, 846, 854], "transform": [41, 110, 227, 367, 445, 446, 516], "lf": [43, 537, 542, 568, 582, 595], "under": [43, 510, 512, 517, 520, 521, 522, 847, 850, 857, 858, 859], "add": [43, 110, 121, 131, 196, 197, 227, 385, 450, 482, 509, 516, 546, 551, 583, 584, 585, 586, 595, 603, 854], "context": [44, 152, 227, 235, 240, 257, 337, 372, 417, 418, 462, 467, 475, 485, 502, 515, 516, 585, 595, 623], "manag": 44, "allow": [44, 63, 93, 95, 96, 97, 103, 104, 143, 144, 166, 227, 312, 390, 405, 444, 516, 551, 552, 556, 585, 595, 685, 759, 774, 776, 818, 854], "categor": [44, 78, 106, 142, 227, 277, 457, 516, 642, 643, 839, 854], "temporarili": [44, 131, 132, 227, 546, 547, 595], "cach": [44, 56, 86, 93, 95, 97, 106, 395, 396, 397, 398, 399, 401, 402, 403, 516, 531, 539, 563, 572, 595], "categori": [44, 58, 106, 277, 643], "until": [44, 144, 227], "finish": [44, 61, 121, 227, 603, 854], "global": [44, 103, 106, 531, 539, 595], "invalid": [44, 83, 84, 93, 424, 429, 798, 803], "outermost": 44, "exit": 44, "df1": [44, 53, 57, 99, 121, 127, 193, 227], "color": [44, 200, 589], "red": [44, 200, 589], "green": [44, 200, 589], "blue": 44, "orang": [44, 113, 201, 202, 204, 205, 206, 208, 211, 212, 227], "uint8": [44, 101, 147, 227, 288, 289, 451, 516, 655, 656, 826, 854], "df2": [44, 53, 57, 99, 121, 127, 193, 227], "yellow": 44, "black": [44, 110, 227], "so": [44, 93, 131, 132, 156, 227, 259, 469, 546, 547, 595, 625], "join": [44, 53, 56, 143, 227, 345, 382, 516, 531, 539, 552, 563, 572, 585, 595], "succe": [44, 83, 84, 93], "df_join": 44, "how": [44, 57, 74, 77, 92, 117, 142, 190, 227, 256, 277, 291, 345, 391, 424, 516, 536, 551, 595, 622, 643, 659, 798, 854], "cat": [44, 58, 422, 445, 446, 457, 474, 512, 516, 796, 850], "u8": [44, 182, 227, 834, 854], "sequenc": [45, 53, 56, 57, 73, 74, 75, 77, 80, 102, 103, 104, 115, 117, 120, 121, 130, 131, 132, 142, 143, 149, 152, 154, 156, 168, 174, 182, 187, 188, 189, 190, 191, 196, 198, 227, 331, 350, 367, 465, 466, 467, 469, 471, 472, 473, 474, 477, 478, 479, 484, 486, 492, 493, 496, 500, 502, 505, 506, 516, 538, 545, 546, 547, 551, 552, 569, 574, 584, 588, 595, 603, 660, 726, 778, 854], "composit": 45, "make": [45, 57, 72, 76, 83, 84, 86, 90, 92, 95, 97, 130, 131, 132, 152, 159, 191, 227, 321, 329, 330, 391, 440, 447, 516, 545, 546, 547, 595, 694, 704, 705, 814, 821, 854], "up": [45, 143, 227, 278, 447, 516, 551, 552, 556, 595, 644, 821, 854], "dai": [46, 59, 131, 132, 143, 191, 227, 299, 309, 312, 313, 314, 315, 319, 320, 322, 323, 326, 395, 396, 397, 398, 399, 401, 402, 403, 480, 481, 482, 516, 546, 547, 552, 595, 685, 686, 688, 693, 696], "unsign": [47, 48, 49, 50, 390, 516, 759, 854], "could": [51, 61, 117, 131, 227, 276, 477, 486, 516, 536, 546, 595, 641, 854], "determin": [51, 53, 57, 74, 77, 83, 84, 85, 90, 97, 110, 126, 131, 132, 187, 191, 227, 273, 277, 372, 391, 395, 396, 397, 398, 399, 401, 402, 403, 415, 469, 516, 546, 547, 595, 639, 643, 789, 854], "static": [51, 589], "utf": 52, "expr": [53, 54, 57, 59, 117, 120, 122, 124, 130, 131, 132, 142, 152, 156, 164, 168, 174, 195, 196, 198, 227, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 516, 517, 520, 521, 522, 536, 538, 540, 542, 545, 546, 547, 551, 569, 571, 574, 583, 584, 588, 595, 623, 657, 709, 782, 828, 854], "intern": [53, 54, 59, 85, 180, 227, 468, 479, 493, 496, 501, 505, 506, 530, 549, 554, 595, 617, 642, 663, 794], "select": [53, 54, 82, 83, 84, 86, 90, 92, 93, 94, 110, 143, 147, 152, 164, 173, 185, 189, 191, 227, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 338, 339, 340, 341, 342, 344, 345, 347, 348, 350, 351, 353, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 436, 437, 439, 440, 441, 443, 445, 446, 448, 449, 450, 451, 454, 455, 456, 458, 459, 460, 461, 462, 463, 465, 467, 468, 472, 473, 479, 482, 484, 487, 505, 506, 516, 532, 549, 552, 573, 580, 585, 595, 623, 639, 777, 778, 790, 801, 803, 828, 854], "revers": [53, 119, 174, 227, 249, 251, 270, 285, 286, 287, 288, 289, 368, 385, 388, 407, 417, 418, 450, 458, 469, 516, 574, 595, 613, 616, 636, 653, 654, 655, 656, 757, 779, 791, 840, 854], "uiqu": 53, "kei": [53, 55, 131, 143, 154, 156, 160, 163, 210, 227, 546, 552, 566, 595], "do": [53, 56, 93, 121, 143, 179, 187, 190, 210, 227, 257, 290, 465, 516, 531, 552, 556, 563, 572, 595, 603, 623, 657, 837, 845, 854], "contain": [53, 55, 73, 76, 152, 156, 227, 350, 423, 426, 427, 428, 429, 441, 442, 516, 563, 595, 712, 745, 797, 800, 801, 802, 803, 815, 816, 833, 854], "have": [53, 83, 84, 85, 99, 103, 104, 106, 121, 159, 210, 227, 290, 328, 329, 330, 373, 388, 516, 572, 586, 595, 603, 657, 665, 703, 704, 705, 714, 757, 854], "inject": 53, "fill": [53, 57, 81, 107, 122, 123, 171, 190, 227, 275, 334, 335, 336, 341, 345, 395, 396, 398, 401, 402, 403, 409, 431, 436, 447, 487, 516, 540, 541, 571, 595, 708, 709, 710, 750, 764, 765, 767, 770, 771, 772, 782, 805, 810, 821, 854], "non": [53, 149, 227, 383, 394, 395, 396, 397, 398, 399, 401, 402, 403, 423, 428, 471, 474, 516, 560, 595, 752, 763, 764, 765, 766, 767, 768, 770, 771, 772, 797, 802, 837, 854], "each": [53, 96, 99, 100, 102, 110, 143, 200, 201, 203, 213, 227, 240, 260, 272, 315, 320, 339, 388, 428, 440, 441, 467, 516, 552, 563, 589, 590, 591, 595, 626, 638, 645, 688, 693, 757, 802, 814, 815, 854], "sort": [53, 130, 131, 132, 143, 154, 156, 191, 198, 203, 213, 227, 249, 251, 277, 337, 407, 418, 462, 464, 469, 516, 546, 547, 552, 563, 590, 591, 595, 613, 616, 643, 779, 841, 843, 854], "origin": [53, 83, 84, 188, 227, 358, 390, 423, 427, 428, 429, 431, 436, 447, 516, 579, 595, 797, 801, 802, 803, 805, 810, 821], "order": [53, 99, 130, 131, 132, 154, 156, 166, 188, 191, 227, 249, 251, 277, 388, 405, 406, 407, 417, 418, 449, 459, 460, 469, 516, 545, 546, 547, 574, 579, 595, 613, 616, 643, 757, 762, 774, 775, 779, 824, 841, 842, 854], "unless": [53, 73, 845, 854], "case": [53, 97, 110, 121, 131, 132, 227, 367, 372, 373, 509, 516, 546, 547, 595, 603, 854], "final": [53, 97, 539, 595], "doe": [53, 68, 75, 77, 83, 84, 85, 93, 99, 100, 121, 227, 321, 324, 449, 460, 485, 516, 539, 545, 556, 595, 603, 694, 697, 714, 784, 845, 854], "receiv": [53, 110, 227], "now": [53, 132, 227, 547, 595], "ha": [53, 191, 227, 230, 240, 290, 358, 373, 458, 467, 516, 529, 589, 595, 646, 657, 714, 725, 840, 854], "whose": [53, 143, 156, 227, 331, 484, 516, 552, 595], "uniqu": [53, 101, 102, 104, 141, 152, 209, 227, 250, 349, 357, 378, 460, 462, 497, 516, 595, 615, 658, 724, 733, 746, 842, 843, 854], "post": 53, "constrain": 53, "newli": 53, "descend": [53, 174, 227, 249, 251, 407, 516, 574, 595, 613, 616, 779, 854], "can": [53, 59, 64, 83, 84, 85, 86, 93, 94, 95, 102, 103, 104, 110, 118, 126, 130, 131, 152, 156, 174, 187, 190, 198, 200, 227, 240, 257, 273, 290, 312, 331, 345, 377, 390, 395, 396, 397, 398, 399, 401, 402, 403, 407, 410, 415, 429, 462, 465, 468, 472, 479, 484, 493, 506, 515, 516, 531, 546, 574, 586, 589, 595, 604, 623, 639, 657, 685, 744, 759, 777, 778, 779, 783, 789, 803, 854], "singl": [53, 57, 83, 84, 92, 93, 102, 117, 121, 128, 174, 198, 227, 312, 337, 367, 389, 392, 421, 437, 443, 464, 467, 472, 492, 501, 516, 536, 574, 588, 595, 603, 685, 758, 761, 795, 806, 811, 817, 833, 854], "boolean": [53, 54, 124, 126, 147, 196, 227, 237, 238, 255, 337, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 464, 516, 542, 584, 595, 601, 602, 614, 621, 711, 719, 721, 723, 724, 726, 727, 728, 729, 730, 731, 733, 753, 754, 777, 796, 846, 854], "associ": 53, "dt": [53, 132, 227, 522, 547, 595, 859], "2022": [53, 59, 98, 114, 227, 444, 482, 671, 818], "x": [53, 83, 84, 93, 102, 103, 119, 136, 139, 141, 142, 149, 227, 240, 254, 261, 342, 367, 391, 415, 440, 457, 479, 506, 516, 551, 560, 573, 595, 600, 604, 710, 734, 789, 814, 839, 854], "y": [53, 102, 103, 119, 139, 141, 142, 149, 227, 254, 261, 391, 444, 479, 506, 516, 551, 560, 573, 595, 600, 691, 818, 854], "12": [53, 58, 59, 131, 132, 143, 191, 227, 288, 300, 309, 314, 315, 320, 326, 383, 410, 480, 481, 516, 546, 547, 552, 572, 595, 604, 682, 688, 693, 773, 854], "df3": [53, 227], "09": [53, 132, 227, 547, 595, 666], "01": [53, 59, 114, 131, 132, 191, 227, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 444, 482, 546, 547, 595, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 818], "02": [53, 59, 131, 132, 191, 227, 295, 299, 300, 301, 307, 308, 309, 316, 317, 319, 322, 324, 404, 482, 516, 546, 547, 595, 664, 665, 668, 669, 670, 672, 673, 674, 675, 677, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697], "03": [53, 59, 131, 132, 191, 227, 295, 298, 299, 301, 308, 309, 315, 316, 317, 319, 320, 322, 324, 325, 546, 547, 595, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 679, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698], "_": [53, 440, 814], "af1": 53, "af2": 53, "af3": 53, "keep": [53, 83, 84, 93, 154, 188, 191, 227, 358, 471, 516, 579, 595], "easili": 53, "calcul": [53, 131, 227, 256, 291, 328, 329, 330, 359, 366, 400, 415, 461, 516, 546, 595, 622, 659, 703, 704, 705, 735, 769, 789, 793, 844, 854], "wise": [53, 117, 126, 227, 241, 242, 243, 244, 245, 246, 282, 283, 332, 365, 412, 413, 414, 455, 456, 477, 478, 486, 500, 516, 536, 595, 605, 606, 607, 608, 609, 610, 651, 652, 706, 739, 786, 787, 788, 830, 831, 854], "dot": [53, 516, 572, 595, 854], "product": [53, 227, 288, 292, 516, 655, 660, 854], "fill_nul": [53, 122, 227, 444, 516, 540, 595, 818, 854], "sum": [53, 119, 126, 130, 132, 156, 198, 227, 240, 288, 289, 327, 337, 382, 395, 396, 398, 401, 402, 403, 464, 465, 477, 479, 486, 496, 516, 531, 539, 545, 547, 563, 595, 655, 656, 701, 702, 764, 765, 767, 770, 771, 772, 854], "alia": [53, 131, 132, 145, 189, 195, 196, 227, 240, 251, 257, 279, 280, 281, 285, 286, 287, 288, 289, 295, 297, 298, 299, 301, 304, 306, 308, 311, 312, 313, 315, 316, 317, 319, 320, 323, 324, 325, 337, 339, 344, 349, 350, 358, 361, 362, 375, 382, 383, 390, 406, 422, 423, 426, 428, 430, 433, 438, 440, 441, 442, 457, 458, 464, 470, 471, 473, 474, 479, 482, 483, 487, 501, 505, 506, 516, 546, 547, 549, 555, 580, 583, 584, 588, 595, 616, 623, 664, 665, 668, 685, 692, 697, 698, 737, 814, 815, 854], "167": 53, "47": 53, "condit": [54, 117, 124, 164, 227, 426, 442, 536, 542, 595], "eager": [54, 131, 190, 227, 468, 491, 501, 505, 515, 525, 546, 595], "indic": [54, 78, 82, 83, 84, 86, 90, 93, 101, 102, 104, 131, 132, 227, 348, 351, 352, 354, 355, 356, 395, 396, 397, 398, 399, 401, 402, 403, 406, 412, 453, 516, 546, 547, 595, 723, 727, 728, 729, 730, 731, 775, 786, 828, 854], "where": [54, 92, 117, 121, 149, 195, 227, 323, 327, 406, 415, 503, 509, 516, 560, 595, 603, 614, 696, 701, 775, 789, 793, 844, 846, 854], "evalu": [54, 122, 124, 143, 147, 196, 227, 290, 344, 346, 350, 466, 468, 483, 505, 516, 542, 549, 551, 552, 583, 584, 595, 614, 657, 846, 854], "eagerli": [54, 501], "oppos": 54, "lazili": [54, 83, 84, 93, 95, 96, 97], "to_seri": [54, 227, 273, 639], "u32": [54, 131, 153, 197, 201, 205, 208, 209, 212, 227, 235, 247, 248, 249, 250, 251, 252, 253, 263, 284, 285, 297, 300, 307, 309, 313, 314, 316, 322, 323, 361, 378, 381, 388, 406, 423, 430, 433, 457, 460, 516, 546, 586, 595, 613, 614, 615, 629, 641, 666, 669, 675, 677, 680, 682, 683, 686, 687, 689, 695, 696, 757, 797, 804, 807, 839, 842, 843, 854], "build": 55, "wa": 55, "compil": [55, 252, 253, 618, 619], "gate": 55, "info": [55, 98], "otherwis": [55, 168, 227, 279, 280, 281, 328, 329, 330, 390, 509, 516, 569, 595, 604, 647, 648, 649, 703, 704, 705, 759, 777, 778, 854], "version": [55, 98, 230, 500], "follow": [55, 83, 84, 92, 93, 110, 131, 132, 143, 191, 227, 240, 312, 315, 320, 339, 388, 395, 396, 397, 398, 399, 401, 402, 403, 467, 510, 512, 516, 517, 520, 521, 522, 545, 546, 547, 552, 595, 685, 688, 693, 757, 777, 778, 847, 850, 854, 857, 858, 859, 861], "depend": [55, 98, 240, 252, 253, 372, 388, 467, 485, 516, 618, 619, 757, 854], "host": [55, 83, 86, 90, 95, 97], "target": [55, 427, 444, 801, 818], "git": 55, "lazy_fram": 56, "type_coercion": [56, 531, 533, 539, 563, 572, 595], "predicate_pushdown": [56, 531, 533, 539, 556, 563, 572, 595], "projection_pushdown": [56, 531, 533, 539, 556, 563, 572, 595], "simplify_express": [56, 531, 533, 539, 563, 572, 595], "string_cach": [56, 531, 539, 595], "no_optim": [56, 531, 539, 556, 563, 595], "slice_pushdown": [56, 531, 533, 539, 556, 563, 572, 595], "common_subplan_elimin": [56, 531, 533, 539, 563, 572, 595], "allow_stream": [56, 531, 533, 539, 563, 572, 595], "collect": [56, 94, 144, 179, 227, 240, 382, 468, 473, 501, 505, 516, 536, 538, 539, 540, 541, 542, 545, 546, 550, 551, 557, 558, 559, 560, 561, 562, 564, 569, 570, 571, 573, 574, 575, 576, 578, 581, 583, 584, 585, 586, 589, 595], "multipl": [56, 57, 83, 84, 93, 95, 97, 102, 104, 119, 121, 124, 131, 136, 154, 156, 174, 196, 198, 227, 331, 373, 377, 392, 395, 396, 397, 398, 399, 401, 402, 403, 418, 469, 477, 478, 484, 486, 492, 500, 509, 516, 535, 542, 546, 574, 584, 588, 595, 603, 702, 744, 761, 854], "graph": [56, 144, 227, 549, 585, 595], "parallel": [56, 57, 80, 90, 92, 97, 131, 143, 144, 227, 257, 290, 516, 525, 546, 551, 552, 595, 623, 657, 854], "threadpool": 56, "coercion": [56, 391, 516, 531, 539, 563, 572, 595], "optim": [56, 90, 93, 95, 96, 97, 144, 159, 227, 531, 533, 539, 556, 563, 572, 586, 595], "predic": [56, 93, 95, 96, 97, 124, 164, 227, 337, 464, 509, 516, 531, 539, 542, 556, 563, 572, 586, 595, 711, 777, 778, 854], "pushdown": [56, 531, 539, 556, 563, 572, 586, 595, 777, 778, 854], "project": [56, 93, 95, 96, 97, 240, 417, 418, 516, 531, 539, 556, 563, 572, 595], "simplifi": [56, 531, 539, 563, 572, 595], "turn": [56, 83, 84, 93, 106, 339, 462, 516, 531, 539, 556, 563, 595], "off": [56, 83, 84, 93, 106, 462, 516, 531, 539, 556, 563, 595], "slice": [56, 119, 227, 260, 272, 394, 395, 396, 397, 398, 399, 401, 402, 403, 516, 531, 539, 556, 563, 572, 595, 626, 638, 702, 763, 764, 765, 766, 767, 768, 770, 771, 772, 854], "Will": [56, 187, 227, 493, 496, 531, 539, 563, 572, 595, 854], "try": [56, 69, 70, 83, 84, 85, 86, 90, 93, 95, 97, 531, 539, 563, 572, 595], "branch": [56, 531, 539, 563, 572, 595], "subplan": [56, 531, 539, 563, 572, 595], "occur": [56, 377, 388, 516, 531, 539, 563, 572, 595, 744, 757, 854], "self": [56, 155, 227, 382, 516, 531, 539, 562, 563, 572, 595, 603, 777, 778, 846, 854], "part": [56, 72, 440, 441, 531, 539, 563, 572, 585, 595, 666, 669, 675, 677, 680, 682, 683, 689, 699, 814, 815], "fashion": [56, 142, 227, 531, 539, 563, 572, 595], "an": [56, 59, 60, 63, 64, 67, 72, 83, 84, 85, 90, 92, 93, 95, 102, 103, 104, 110, 111, 112, 119, 122, 126, 131, 132, 143, 152, 154, 156, 162, 164, 179, 183, 190, 200, 210, 227, 236, 237, 240, 257, 259, 276, 279, 280, 281, 285, 286, 287, 288, 289, 290, 324, 337, 358, 367, 368, 373, 386, 394, 395, 396, 397, 398, 399, 401, 402, 403, 424, 428, 437, 443, 444, 453, 468, 472, 483, 491, 500, 502, 516, 525, 529, 530, 531, 539, 546, 547, 552, 556, 563, 572, 574, 585, 589, 595, 623, 625, 641, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 697, 702, 763, 764, 765, 766, 767, 768, 770, 771, 772, 777, 778, 798, 802, 806, 811, 817, 818, 837, 845, 854], "alpha": [56, 328, 329, 330, 516, 531, 539, 563, 572, 595, 703, 704, 705, 854], "item": [57, 166, 227, 255, 259, 261, 333, 339, 405, 441, 516, 621, 625, 627, 707, 774, 815, 854], "rechunk": [57, 72, 76, 83, 84, 86, 90, 93, 95, 96, 97, 121, 227, 516, 603, 645, 745, 854], "concatmethod": 57, "vertic": [57, 121, 190, 193, 227, 421, 493, 795], "aggreg": [57, 83, 84, 126, 130, 131, 146, 147, 148, 150, 152, 156, 157, 158, 175, 176, 190, 192, 198, 199, 202, 204, 210, 227, 235, 337, 363, 367, 382, 394, 395, 396, 397, 398, 399, 401, 402, 403, 462, 477, 478, 479, 486, 490, 493, 496, 500, 506, 516, 546, 556, 557, 558, 559, 561, 564, 575, 576, 581, 588, 595, 763, 764, 765, 767, 770, 771, 772, 854], "concaten": [57, 126, 227, 645, 745, 854], "sure": [57, 72, 76, 83, 84, 86, 92, 130, 159, 227, 468, 545, 595], "contigu": [57, 72, 76, 83, 84, 86, 93, 95, 96, 97, 159, 227], "diagon": [57, 187, 227], "lazi": [57, 59, 81, 93, 103, 107, 143, 198, 227, 240, 382, 468, 516, 525, 529, 530, 531, 532, 536, 537, 538, 539, 540, 541, 542, 545, 546, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 568, 569, 570, 571, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 586, 589, 595], "strategi": [57, 83, 101, 102, 103, 104, 123, 142, 143, 151, 227, 273, 336, 516, 541, 551, 552, 595, 639, 710, 854], "vstack": [57, 121, 227], "find": [57, 125, 227, 406, 469, 516, 775, 854], "schema": [57, 69, 74, 83, 84, 87, 91, 93, 96, 103, 110, 111, 112, 118, 227, 372, 529, 530, 537, 556, 589, 595, 650, 854], "miss": [57, 122, 227, 275, 341, 345, 352, 354, 503, 516, 540, 595, 845, 854], "stack": [57, 136, 193, 227], "length": [57, 58, 81, 96, 102, 107, 131, 132, 173, 227, 269, 290, 315, 320, 373, 394, 395, 396, 397, 398, 399, 401, 402, 403, 416, 431, 433, 436, 438, 447, 468, 516, 546, 547, 563, 573, 595, 635, 645, 657, 688, 693, 736, 750, 763, 764, 765, 766, 767, 768, 770, 771, 772, 790, 805, 807, 810, 812, 821, 854], "don": [57, 190, 227, 257, 290, 467, 516, 623, 657, 776, 845, 854], "t": [57, 85, 93, 110, 190, 227, 257, 290, 327, 328, 329, 330, 444, 467, 509, 516, 623, 657, 701, 703, 704, 705, 776, 818, 845, 854], "match": [57, 68, 73, 75, 77, 99, 100, 123, 143, 164, 227, 422, 423, 426, 428, 429, 432, 434, 435, 437, 442, 443, 444, 541, 552, 595, 796, 797, 800, 802, 803, 806, 808, 809, 811, 816, 817, 818], "relev": 57, "execut": [57, 144, 227, 257, 528, 563, 595, 623], "bin": 58, "label": [58, 73, 75, 77, 227, 394, 395, 396, 397, 398, 399, 401, 402, 403, 516, 563, 595, 763, 764, 765, 766, 767, 768, 770, 771, 772, 854], "break_point_label": 58, "break_point": 58, "category_label": 58, "discret": [58, 256, 291, 327, 516, 622, 659, 701, 854], "creat": [58, 59, 72, 75, 77, 102, 103, 104, 111, 112, 131, 132, 153, 156, 191, 227, 315, 320, 389, 438, 462, 468, 473, 480, 481, 482, 516, 529, 530, 533, 534, 546, 547, 595, 646, 650, 662, 688, 693, 750, 758, 812, 837, 854], "assign": [58, 102, 131, 227, 388, 440, 441, 516, 546, 595, 757, 814, 815, 854], "must": [58, 73, 75, 77, 99, 131, 132, 143, 164, 227, 331, 367, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 556, 595, 854], "len": [58, 102, 103, 285, 392, 431, 436, 447, 516, 761, 805, 810, 821, 854], "breakpoint": 58, "experiment": [58, 94, 190, 196, 227, 290, 315, 395, 396, 397, 398, 399, 401, 402, 403, 516, 584, 595, 657, 688, 854], "without": [58, 87, 91, 94, 190, 227, 290, 315, 395, 396, 397, 398, 399, 401, 402, 403, 502, 516, 657, 662, 688, 854], "being": [58, 83, 84, 93, 94, 190, 227, 290, 315, 395, 396, 397, 398, 399, 401, 402, 403, 509, 516, 657, 688, 854], "consid": [58, 94, 127, 149, 190, 196, 198, 210, 227, 279, 280, 281, 290, 315, 395, 396, 397, 398, 399, 401, 402, 403, 417, 477, 486, 516, 548, 555, 560, 584, 595, 647, 648, 649, 657, 688, 776, 777, 778, 854], "break": [58, 94, 190, 227, 290, 315, 395, 396, 397, 398, 399, 401, 402, 403, 516, 657, 688, 854], "30": [58, 121, 131, 136, 155, 161, 162, 180, 196, 227, 247, 248, 249, 251, 291, 298, 314, 315, 320, 326, 342, 410, 516, 546, 562, 584, 595, 665, 667, 688, 693], "inf": [58, 103, 104, 246, 348, 351, 516, 610, 723, 727, 752, 854], "low": [59, 131, 227, 316, 468, 546, 595], "high": [59, 131, 227, 316, 468, 546, 595], "interv": [59, 131, 132, 191, 227, 315, 316, 320, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 595, 666, 668, 669, 675, 677, 680, 682, 683, 686, 687, 688, 689, 691, 692, 693, 695, 696, 699], "timedelta": [59, 131, 132, 191, 227, 297, 299, 300, 307, 309, 312, 313, 314, 315, 316, 319, 320, 322, 323, 326, 395, 396, 397, 398, 399, 401, 402, 403, 471, 516, 546, 547, 595, 672, 674, 679, 685, 688, 693, 740, 743, 748, 749, 854], "close": [59, 131, 132, 227, 395, 396, 397, 398, 399, 401, 402, 403, 415, 516, 546, 547, 595, 789, 854], "closedwindow": [59, 131, 132, 227, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 595], "lower": [59, 93, 131, 158, 211, 227, 346, 366, 387, 390, 399, 468, 499, 516, 539, 546, 564, 595, 756, 759, 768, 854], "bound": [59, 83, 84, 119, 131, 227, 259, 346, 366, 461, 468, 516, 546, 595, 625, 702, 854], "upper": [59, 83, 84, 119, 131, 227, 346, 461, 468, 516, 546, 595, 702, 854], "period": [59, 131, 132, 170, 171, 227, 268, 315, 320, 328, 329, 330, 383, 408, 409, 516, 546, 547, 570, 571, 595, 634, 688, 693, 703, 704, 705, 752, 781, 782, 854], "It": [59, 110, 200, 227, 240, 321, 372, 516, 556, 589, 595, 694, 777, 778, 854], "like": [59, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 142, 210, 227, 257, 375, 388, 516, 539, 565, 595, 623, 757, 854], "durat": [59, 143, 191, 227, 298, 301, 304, 306, 308, 311, 317, 324, 457, 516, 552, 595, 667, 670, 676, 678, 681, 684, 690, 697, 839, 854], "3d12h4m25": [59, 131, 132, 143, 191, 227, 315, 320, 546, 547, 552, 595, 688, 693], "hour": [59, 131, 132, 143, 191, 227, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 481, 482, 516, 546, 547, 552, 595, 685, 688, 693], "minut": [59, 131, 132, 143, 191, 227, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 481, 482, 516, 546, 547, 552, 595, 685, 688, 693], "25": [59, 131, 132, 143, 191, 195, 196, 227, 315, 320, 326, 546, 547, 552, 558, 581, 583, 584, 595, 688, 693, 701, 752, 854], "tempor": [59, 131, 132, 227, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 595], "window": [59, 131, 132, 227, 290, 315, 320, 328, 329, 330, 382, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 473, 516, 546, 547, 595, 657, 688, 693, 703, 704, 705, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 854], "granular": 59, "finer": 59, "than": [59, 71, 75, 77, 83, 84, 103, 104, 110, 130, 143, 164, 166, 190, 200, 227, 240, 358, 405, 415, 417, 431, 436, 441, 447, 503, 506, 516, 545, 552, 589, 595, 774, 789, 805, 810, 815, 821, 854], "1d": [59, 131, 132, 143, 191, 227, 295, 301, 308, 312, 315, 320, 324, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 664, 668, 670, 672, 673, 674, 679, 681, 685, 688, 691, 692, 693, 696, 697], "also": [59, 103, 104, 118, 130, 131, 132, 152, 174, 227, 296, 331, 345, 388, 395, 396, 397, 398, 399, 401, 402, 403, 477, 478, 486, 500, 515, 516, 546, 547, 585, 595, 665, 757, 854], "permut": 59, "1mo": [59, 131, 132, 143, 191, 227, 298, 312, 315, 320, 325, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 665, 667, 682, 685, 686, 687, 688, 693, 695, 698], "drang": 59, "1985": 59, "00": [59, 131, 143, 191, 227, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 444, 482, 546, 595, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 818], "04": [59, 94, 131, 191, 227, 297, 298, 301, 307, 308, 309, 313, 315, 316, 317, 322, 323, 324, 325, 444, 482, 546, 595, 665, 667, 670, 675, 677, 680, 681, 682, 683, 687, 689, 690, 691, 695, 696, 697, 698, 818], "05": [59, 94, 99, 100, 143, 191, 227, 298, 316, 325, 665, 666, 667, 688, 693, 696, 698], "07": [59, 297, 313, 315, 320, 323, 444, 666, 696, 818], "08": [59, 99, 100, 132, 227, 315, 444, 482, 547, 595, 688, 693, 818], "underli": [60, 67, 90, 103, 104, 121, 179, 227, 295, 296, 297, 300, 302, 303, 305, 307, 309, 310, 313, 314, 316, 322, 323, 324, 326, 390, 404, 516, 603, 664, 665, 666, 669, 671, 675, 677, 680, 682, 683, 686, 687, 689, 695, 696, 697, 699, 759, 773, 784, 832, 833, 837, 854], "librari": [60, 67, 367, 516, 861], "encount": [60, 379, 380, 429, 477, 486, 503, 516, 748, 749, 803, 854], "error": [60, 83, 84, 93, 164, 227, 261, 276, 358, 424, 429, 444, 516, 589, 627, 641, 798, 803, 818, 854], "duplic": [62, 139, 142, 143, 188, 227, 347, 469, 516, 551, 552, 579, 595, 721, 854], "certain": [63, 137, 191, 227, 331, 484, 516, 531, 563, 595, 854], "structur": [64, 69, 70, 121, 227, 603, 854], "least": [65, 103, 383, 462, 516, 752, 843, 854], "expect": [65, 68, 71, 240, 467, 516, 554, 556, 595], "unexpect": [67, 227], "caus": [67, 83, 84, 93, 121, 227, 603, 854], "panic": 67, "combin": [69, 70, 131, 132, 133, 143, 191, 198, 227, 546, 547, 552, 572, 595], "mismatch": 69, "incompat": 70, "lib": [72, 833, 854], "chunkedarrai": [72, 151, 227, 660, 854], "zero": [72, 82, 83, 84, 86, 90, 123, 164, 179, 227, 335, 336, 406, 415, 447, 516, 541, 595, 710, 789, 821, 833, 837, 854], "copi": [72, 111, 112, 179, 227, 447, 529, 530, 595, 600, 646, 650, 662, 821, 833, 837, 854], "most": [72, 373, 377, 383, 441, 462, 516, 744, 752, 815, 843, 854], "cast": [72, 106, 126, 131, 132, 147, 155, 184, 227, 239, 277, 288, 289, 295, 296, 390, 429, 447, 451, 457, 474, 516, 546, 547, 562, 595, 643, 655, 656, 664, 665, 759, 803, 826, 835, 839, 854], "closest": 72, "construct": [72, 73, 74, 75, 76, 77, 227, 544, 565, 595, 854], "pa": [72, 94, 227], "map": [73, 74, 83, 84, 86, 87, 90, 91, 93, 95, 110, 118, 160, 180, 227, 315, 320, 368, 462, 467, 516, 537, 566, 595, 688, 693], "clone": [73, 74, 75, 76, 77, 111, 183, 184, 227, 529, 595, 646, 836, 837, 845, 854], "two": [73, 75, 77, 92, 126, 149, 156, 186, 198, 199, 200, 210, 227, 235, 292, 417, 418, 453, 465, 476, 498, 503, 505, 516, 560, 589, 595, 660, 854], "dimension": [73, 75, 77, 227, 854], "overrid": [73, 101, 102, 104, 227], "alreadi": [73, 227, 257, 290, 516, 623, 657, 854], "present": [73, 103, 227, 350, 516, 845, 854], "dimens": [73, 75, 77, 227, 392, 516, 761, 854], "infer_schema_length": [74, 77, 83, 84, 85, 93, 96], "50": [74, 77, 121, 227, 279, 280, 281, 315, 320, 516, 647, 693, 854], "mani": [74, 77, 92, 121, 227, 603, 854], "scan": [74, 77, 83, 84, 90, 93, 94, 95, 96, 97, 539, 548, 555, 595], "slow": [74, 77, 83, 84, 93, 181, 227, 290, 516, 657, 854], "partial": 74, "overwrit": [74, 83, 84, 93, 196, 227, 539, 583, 584, 595], "first": [74, 83, 84, 85, 92, 93, 96, 110, 134, 143, 145, 151, 156, 187, 188, 191, 203, 210, 227, 249, 250, 251, 257, 259, 260, 290, 312, 315, 343, 349, 362, 427, 429, 434, 435, 469, 471, 477, 486, 489, 516, 531, 548, 552, 555, 579, 585, 590, 595, 613, 616, 623, 625, 626, 657, 658, 685, 688, 716, 724, 737, 801, 803, 808, 809, 854], "dtype": [74, 81, 83, 84, 93, 101, 102, 103, 104, 107, 131, 132, 143, 184, 227, 240, 241, 242, 243, 244, 245, 246, 249, 251, 252, 253, 254, 261, 276, 279, 280, 281, 282, 283, 288, 289, 298, 301, 304, 306, 308, 311, 317, 324, 331, 333, 339, 366, 367, 390, 391, 395, 396, 397, 398, 399, 401, 402, 403, 410, 413, 414, 421, 438, 451, 453, 455, 456, 457, 461, 462, 467, 468, 473, 475, 484, 491, 492, 505, 516, 546, 547, 552, 595, 618, 619, 620, 627, 641, 646, 647, 648, 649, 655, 656, 667, 670, 676, 678, 681, 684, 690, 697, 702, 707, 717, 722, 762, 776, 783, 795, 812, 818, 826, 837, 838, 839, 854], "int32": [74, 103, 104, 131, 132, 227, 276, 302, 326, 457, 516, 546, 547, 595, 671, 699, 839, 854], "i32": [74, 103, 276, 326, 410, 509, 516, 671, 699], "let": 74, "about": [74, 415, 516, 789, 854], "3rd": 74, "unknown": [74, 491], "np": [75, 227, 723, 727, 728, 729, 763, 854], "ndarrai": [75, 124, 183, 227, 453, 516, 660, 778, 828, 837, 854], "numpi": [75, 98, 124, 183, 227, 379, 380, 453, 516, 723, 727, 728, 729, 748, 749, 763, 828, 837, 845, 854], "columnar": [75, 77, 165, 227], "column_0": [75, 77, 110, 187, 227], "column_1": [75, 77, 110, 187, 227], "interpret": [75, 77, 83, 84, 93, 227], "yield": [75, 77, 83, 84, 93, 119, 121, 187, 227, 603, 702, 854], "conclus": [75, 77, 227], "nan_to_non": 76, "panda": [76, 85, 92, 98, 184, 227, 457, 516, 838, 839, 854], "core": [76, 184, 227], "index": [76, 79, 98, 125, 131, 132, 137, 143, 156, 162, 164, 173, 185, 191, 197, 227, 235, 247, 248, 249, 250, 251, 252, 253, 259, 269, 312, 395, 396, 397, 398, 399, 401, 402, 403, 416, 427, 438, 453, 469, 516, 546, 547, 552, 573, 586, 595, 611, 612, 613, 614, 615, 616, 618, 619, 625, 635, 685, 750, 778, 790, 801, 812, 828, 854], "datetimeindex": [76, 660, 854], "instal": [76, 83, 84, 86, 90, 92, 98, 183, 184, 227, 572, 595, 837, 854], "nan": [76, 99, 100, 103, 122, 227, 293, 294, 335, 345, 352, 354, 355, 356, 369, 376, 379, 380, 503, 516, 540, 595, 606, 610, 661, 709, 728, 729, 748, 749, 763, 854], "convert": [76, 78, 85, 92, 165, 180, 181, 182, 183, 184, 186, 227, 273, 639, 825, 836, 837, 838, 845, 854], "pd": [76, 85, 92, 227, 457, 516, 839, 854], "pd_df": 76, "pd_seri": 76, "dummi": [78, 182, 227, 834, 854], "subset": [78, 117, 152, 182, 188, 227, 536, 579, 595], "get": [79, 87, 91, 105, 113, 118, 128, 129, 131, 132, 134, 135, 139, 141, 145, 151, 164, 167, 169, 173, 177, 182, 194, 203, 213, 215, 216, 217, 218, 219, 220, 221, 227, 235, 247, 248, 249, 250, 251, 258, 262, 263, 274, 285, 286, 287, 288, 289, 299, 338, 343, 347, 349, 357, 360, 362, 369, 370, 371, 372, 374, 376, 379, 380, 387, 416, 420, 430, 433, 451, 452, 459, 463, 485, 489, 493, 494, 495, 496, 504, 507, 508, 516, 532, 537, 543, 546, 547, 548, 553, 555, 568, 573, 577, 582, 590, 591, 595, 611, 612, 613, 614, 615, 616, 624, 628, 629, 640, 645, 653, 654, 655, 656, 668, 700, 712, 716, 717, 721, 724, 733, 737, 740, 742, 743, 745, 747, 748, 749, 753, 754, 756, 790, 793, 804, 807, 827, 832, 833, 834, 841, 844, 845, 854], "uint32": [79, 98, 119, 227, 249, 251, 252, 253, 263, 297, 300, 303, 305, 307, 309, 310, 313, 314, 316, 322, 323, 391, 423, 430, 433, 453, 457, 516, 614, 618, 619, 629, 641, 666, 669, 675, 677, 680, 682, 683, 686, 687, 689, 695, 696, 702, 776, 797, 839, 854], "regular": [79, 191, 227, 331, 472, 484, 516], "uint64": [79, 133, 227, 252, 253, 342, 390, 516, 618, 619, 715, 759, 854], "polars_u64_idx": 79, "read": [80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 121, 227, 367, 516, 539, 544, 565, 595, 603, 854], "over": [80, 83, 84, 93, 103, 110, 121, 130, 187, 200, 210, 227, 240, 290, 336, 345, 367, 368, 394, 395, 396, 397, 398, 399, 401, 402, 403, 467, 477, 478, 486, 492, 500, 516, 589, 603, 604, 657, 763, 764, 765, 767, 771, 854], "avail": [80, 102, 226, 230, 388, 510, 512, 515, 516, 517, 520, 521, 522, 526, 539, 594, 595, 757, 847, 850, 854, 857, 858, 859], "fetch": [80, 93, 144, 227, 529, 531, 548, 555, 580, 595], "ideal": [80, 210], "read_csv_batch": [80, 526], "tpch": [80, 84], "tables_scale_100": [80, 84], "lineitem": [80, 84, 92], "tbl": [80, 84], "parse_d": [80, 83, 84, 93], "new": [81, 107, 110, 115, 117, 136, 137, 152, 153, 160, 161, 178, 190, 195, 227, 236, 333, 339, 345, 368, 434, 435, 440, 441, 448, 449, 454, 516, 566, 578, 589, 595, 600, 604, 662, 707, 750, 760, 808, 809, 814, 815, 822, 824, 829, 835, 846, 854], "In": [81, 97, 103, 104, 107, 110, 119, 121, 131, 132, 152, 227, 240, 372, 417, 418, 516, 546, 547, 595, 603, 702, 758, 854], "probabl": [81, 107, 327, 516, 701, 854], "lit": [81, 107, 358, 477, 479, 486, 506, 509, 516, 710, 854], "n_row": [82, 83, 84, 86, 90, 93, 95, 96, 97, 539, 595], "accept": [82, 83, 84, 86, 90, 174, 227], "start": [82, 83, 84, 86, 90, 93, 95, 96, 97, 130, 131, 144, 173, 191, 197, 227, 269, 297, 299, 300, 307, 309, 313, 314, 315, 316, 319, 320, 322, 323, 326, 331, 346, 416, 422, 426, 438, 442, 472, 477, 484, 486, 509, 516, 545, 546, 563, 573, 586, 595, 635, 664, 665, 666, 668, 669, 675, 677, 680, 682, 683, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 699, 790, 800, 812, 816, 854], "stop": [82, 83, 84, 86, 90, 93, 95, 96, 97, 297, 299, 300, 307, 309, 313, 314, 315, 316, 319, 320, 322, 323, 326, 664, 665, 666, 668, 669, 675, 677, 680, 682, 683, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 699], "after": [82, 83, 84, 86, 90, 93, 95, 96, 97, 121, 189, 226, 227, 230, 388, 447, 516, 580, 595, 603, 665, 757, 821, 854], "new_column": [83, 84, 85], "comment_char": [83, 84, 93], "quote_char": [83, 84, 93], "skip_row": [83, 84, 93], "ignore_error": [83, 84, 93], "n_thread": [83, 84], "8192": 83, "csvencod": [83, 84, 93], "low_memori": [83, 84, 90, 93, 96, 97], "storage_opt": [83, 86, 90, 95, 97], "skip_rows_after_head": [83, 84, 93], "row_count_nam": [83, 84, 86, 90, 93, 95, 96, 97], "row_count_offset": [83, 84, 86, 90, 93, 95, 96, 97], "sample_s": [83, 84], "eol_char": [83, 84, 93], "By": [83, 84, 85, 143, 174, 227, 491, 552, 595, 793, 837, 844, 854], "we": [83, 84, 85, 93, 130, 143, 174, 227, 257, 491, 509, 552, 556, 595, 604, 623, 854], "handler": [83, 84, 85], "g": [83, 84, 85, 86, 90, 95, 97, 190, 227, 331, 407, 410, 484, 516, 776, 779, 837, 854], "via": [83, 84, 85, 93, 95, 97, 196, 227, 584, 595], "builtin": [83, 84, 85], "open": [83, 84, 85, 86, 90, 95, 97], "stringio": [83, 84], "fsspec": [83, 84, 86, 90, 95, 97, 98], "remot": [83, 84, 86, 90], "dataset": [83, 84, 93, 94, 359, 516, 525, 735, 854], "autogener": [83, 84, 93], "column_x": [83, 84, 93], "enumer": [83, 84, 93], "everi": [83, 84, 93, 131, 178, 181, 191, 227, 252, 253, 256, 259, 260, 269, 272, 285, 286, 287, 288, 289, 290, 315, 320, 333, 339, 454, 477, 478, 516, 539, 546, 578, 595, 618, 619, 622, 625, 626, 635, 638, 653, 654, 655, 656, 657, 688, 693, 707, 829, 854], "renam": [83, 84, 227, 236, 368, 375, 449, 516, 595, 824, 835, 854], "shorter": [83, 84], "remain": [83, 84, 93, 119, 130, 227, 240, 440, 441, 516, 545, 556, 595, 702, 814, 815, 854], "comment": [83, 84, 93], "instanc": [83, 84, 93, 103, 104, 121, 126, 227, 276, 373, 395, 396, 397, 398, 399, 401, 402, 403, 477, 486, 516, 556, 586, 595, 603, 641, 854], "special": [83, 84, 93, 604, 854], "handl": [83, 84, 93, 256, 291, 424, 447, 516, 622, 659, 798, 821, 854], "escap": [83, 84, 93], "dure": [83, 84, 93, 121, 227, 603, 854], "provid": [83, 84, 92, 93, 103, 104, 196, 227, 424, 425, 427, 429, 584, 589, 595, 798, 799, 801, 803, 861], "equal": [83, 84, 93, 99, 100, 106, 127, 131, 143, 227, 394, 395, 396, 397, 398, 399, 401, 402, 403, 430, 431, 436, 447, 468, 516, 546, 552, 595, 763, 764, 765, 766, 767, 768, 770, 771, 772, 776, 804, 805, 810, 821, 854], "some": [83, 84, 93, 117, 227, 536, 595, 726, 854], "check": [83, 84, 93, 99, 100, 127, 140, 227, 237, 238, 255, 346, 350, 422, 426, 442, 516, 556, 595, 601, 602, 621, 719, 720, 722, 725, 726, 732, 734, 776, 796, 800, 816, 854], "might": [83, 84, 93, 372, 460, 516], "issu": [83, 84, 85, 93, 288, 289, 451, 516, 655, 656, 826, 854], "automat": [83, 84, 92, 93, 103, 104, 227, 854], "alwai": [83, 110, 200, 227, 240, 372, 516, 556, 589, 595], "physic": [83, 84, 143, 227, 277, 457, 516, 528, 551, 552, 595, 643, 839, 854], "cpu": [83, 84], "your": [83, 84, 99, 100, 227, 531, 548, 555, 556, 595], "system": [83, 84], "done": [83, 84, 93, 143, 227, 239, 276, 431, 436, 516, 552, 574, 588, 595, 641, 805, 810, 854], "buffer": [83, 84, 119, 227, 702, 854], "onc": [83, 84, 85, 166, 227, 405, 516, 528, 595, 774, 854], "modifi": [83, 84, 93, 136, 193, 227, 296, 324, 665, 697, 760, 819, 820, 854], "multi": [83, 84], "cannot": [83, 84, 110, 166, 200, 227, 240, 405, 440, 516, 572, 589, 595, 774, 814, 854], "lossi": [83, 84, 93], "replac": [83, 84, 93, 122, 123, 162, 187, 195, 227, 424, 435, 540, 583, 595, 777, 778, 798, 809, 854], "decod": [83, 84], "im": [83, 84], "usag": [83, 84, 93, 103, 104, 172, 227, 784, 854], "expens": [83, 84, 90, 93, 96, 97, 130, 187, 227, 545, 595, 603, 854], "nativ": [83, 86, 90, 110, 200, 227, 240, 516, 589], "parser": 83, "even": 83, "possibl": [83, 110, 200, 227, 240, 366, 372, 441, 461, 516, 589, 815, 854], "differ": [83, 121, 131, 132, 187, 227, 256, 291, 296, 297, 312, 313, 322, 379, 380, 444, 460, 485, 493, 496, 516, 546, 547, 595, 603, 622, 659, 665, 666, 685, 686, 695, 748, 749, 776, 818, 854], "regard": [83, 503], "sens": [83, 86, 90, 95, 97, 131, 132, 191, 227, 546, 547, 595], "particular": [83, 86, 90, 95, 97, 119, 227, 702, 854], "storag": [83, 86, 90, 95, 97], "connect": [83, 86, 90, 92, 94, 95, 97, 526], "port": [83, 86, 90, 92, 95, 97], "usernam": [83, 86, 90, 92, 95, 97], "password": [83, 86, 90, 92, 95, 97], "skip": [83, 84, 85, 93, 190, 227, 604, 854], "insert": [83, 84, 86, 90, 93, 95, 96, 97, 137, 161, 187, 189, 227, 406, 421, 447, 516, 580, 595, 775, 795, 821, 854], "count": [83, 84, 86, 90, 93, 95, 96, 97, 114, 131, 132, 143, 152, 153, 156, 187, 191, 197, 200, 209, 227, 285, 312, 361, 378, 381, 395, 396, 397, 398, 399, 401, 402, 403, 423, 460, 462, 497, 516, 546, 547, 552, 586, 589, 595, 658, 685, 746, 751, 797, 842, 843, 854], "offset": [83, 84, 86, 90, 93, 95, 96, 97, 131, 132, 173, 191, 197, 227, 269, 312, 315, 320, 416, 438, 516, 546, 547, 573, 586, 595, 635, 685, 688, 693, 790, 812, 854], "row_count": [83, 84, 86, 90, 93, 95, 96, 97], "sampl": [83, 84, 200, 227, 415, 516, 589, 789, 854], "estim": [83, 84, 119, 227, 329, 330, 359, 516, 702, 704, 705, 735, 854], "alloc": [83, 84, 119, 159, 227, 702, 854], "need": [83, 84, 85, 99, 100, 131, 132, 172, 183, 227, 410, 430, 516, 546, 547, 588, 595, 783, 804, 837, 854], "end": [83, 84, 90, 93, 131, 227, 269, 315, 331, 346, 422, 426, 438, 442, 472, 484, 516, 546, 548, 555, 563, 595, 635, 688, 800, 812, 816], "scan_csv": [83, 84, 588], "glob": [83, 84, 93, 95, 97], "pattern": [83, 84, 93, 95, 97, 422, 423, 427, 428, 434, 435, 777, 778, 796, 797, 801, 802, 808, 809, 854], "store": [83, 90, 121, 227, 603, 854], "continu": [83, 90, 415, 516, 789, 854], "benchmark": [83, 90], "50000": 84, "batchedcsvread": [84, 525], "batch": [84, 96], "upon": 84, "creation": 84, "gather": 84, "work": [84, 85, 130, 132, 161, 188, 227, 257, 278, 279, 280, 281, 340, 433, 449, 459, 516, 545, 547, 579, 595, 623, 644, 647, 648, 649, 713, 807, 841, 854], "next_batch": 84, "call": [84, 103, 104, 144, 226, 227, 230, 526, 594, 595, 604, 854], "sheet_id": 85, "sheet_nam": 85, "xlsx2csv_option": 85, "read_csv_opt": 85, "excel": [85, 525], "xlsx": 85, "sheet": 85, "xlsx2csv": [85, 98], "read_csv": [85, 93], "skip_empty_lin": 85, "my": [85, 94], "datasheet": 85, "excel_fil": 85, "while": [85, 103, 104, 149, 187, 227, 560, 595], "As": [85, 501], "correct": [85, 329, 330, 359, 400, 415, 516, 556, 595, 704, 705, 735, 769, 789, 854], "look": 85, "document": [85, 92, 429, 444, 803, 818], "see": [85, 92, 99, 100, 103, 104, 142, 227, 279, 280, 281, 318, 336, 345, 359, 367, 415, 500, 516, 647, 648, 649, 691, 735, 789, 854, 861], "fix": [85, 102, 103, 324, 395, 396, 397, 398, 399, 401, 402, 403, 516, 697], "For": [85, 121, 132, 142, 143, 174, 200, 227, 276, 373, 390, 415, 477, 486, 487, 516, 547, 552, 589, 595, 603, 759, 789, 837, 854], "whole": [85, 417, 418, 427, 516, 801], "twice": 85, "actual": [85, 103, 104, 784, 854], "With": 85, "1000": [85, 119, 227, 304, 447, 676], "spreadsheet": [85, 156, 227], "xl": 85, "xlsm": 85, "xlsb": 85, "odf": 85, "od": 85, "odt": 85, "from_panda": [85, 92], "memory_map": [86, 90, 95], "v2": [86, 95], "valid": [86, 90, 104, 119, 227, 290, 417, 422, 423, 427, 428, 429, 516, 657, 702, 714, 796, 797, 801, 802, 803, 808, 809, 854], "greatli": [86, 95], "repeat": [86, 95, 389, 391, 516], "o": [86, 95, 290, 339, 458, 516, 657, 840, 854], "page": [86, 95, 227, 516, 525, 595, 854], "give": [86, 90, 95, 96, 97, 149, 227, 299, 359, 391, 516, 525, 560, 595, 668, 735, 854], "read_ndjson": 88, "parallelstrategi": [90, 97], "auto": [90, 97, 187, 227], "directori": 90, "partit": [90, 92, 94, 154, 227], "awar": [90, 321, 694], "stabl": 90, "increas": [90, 290, 516, 657, 854], "row_group": [90, 97], "direct": [90, 92, 97, 190, 227], "keyword": [90, 155, 164, 227, 562, 595, 854], "read_tabl": 90, "connection_uri": 92, "partition_on": 92, "partition_rang": 92, "tupl": [92, 110, 164, 165, 169, 227, 346, 392, 516, 563, 572, 595, 761, 780, 854], "partition_num": 92, "protocol": 92, "postgr": [92, 382, 516], "mysql": 92, "sqlite": 92, "redshift": 92, "through": [92, 854], "clickhous": 92, "databas": 92, "altern": 92, "solut": 92, "load": [92, 525, 548, 555, 595], "engin": [92, 110, 200, 227, 240, 516, 589], "raw": 92, "connectorx": [92, 98], "uri": 92, "postgresql": 92, "server": 92, "gener": [92, 101, 102, 103, 104, 166, 187, 227, 273, 405, 411, 516, 639, 774, 785, 854], "backend": 92, "transfer": 92, "detail": [92, 99, 100, 861], "here": [92, 102, 103, 104, 429, 803], "partition_col": 92, "explicitli": [92, 102, 103], "polarsdatatyp": 93, "with_column_nam": 93, "callabl": [93, 110, 126, 155, 200, 227, 240, 273, 367, 368, 394, 467, 477, 478, 486, 492, 500, 516, 556, 562, 589, 595, 604, 639, 763, 854], "push": [93, 95, 96, 97], "down": [93, 95, 96, 97, 340, 516, 713, 854], "therebi": [93, 95, 96, 97], "potenti": [93, 95, 96, 97], "overhead": [93, 95, 96, 97], "updat": 93, "just": [93, 149, 227, 560, 595], "thu": [93, 121, 227, 503, 603, 854], "befor": [93, 121, 143, 189, 227, 288, 289, 290, 383, 394, 395, 396, 397, 398, 399, 401, 402, 403, 447, 451, 516, 549, 552, 580, 595, 603, 655, 656, 657, 752, 763, 764, 765, 766, 767, 768, 770, 771, 772, 821, 826, 854], "realloc": [93, 95, 96, 121, 227, 603, 854], "my_long_fil": 93, "doesn": [93, 327, 516, 701, 845, 854], "thing": [93, 465, 485], "filter": [93, 94, 117, 140, 200, 227, 426, 442, 464, 468, 516, 536, 539, 549, 589, 595, 777, 854], "less": [93, 143, 227, 431, 436, 441, 447, 552, 595, 805, 810, 815, 821], "limit": [93, 123, 227, 275, 279, 280, 281, 336, 341, 516, 541, 548, 595, 647, 648, 649, 710, 854], "breezah": 93, "languag": [93, 131, 132, 143, 191, 227, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 685, 688, 693], "terribl": 93, "mydf": 93, "write_csv": [93, 227], "lambda": [93, 110, 117, 126, 200, 227, 240, 273, 328, 329, 330, 367, 368, 394, 479, 506, 516, 536, 556, 589, 595, 604, 639, 703, 704, 705, 854], "cloud": 94, "dset": 94, "s3": [94, 854], "folder": 94, "out": [94, 98, 132, 227, 259, 348, 351, 516, 547, 595, 625], "1970": 94, "stdout": 98, "14": [98, 110, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 227, 345, 516, 665, 688], "platform": 98, "linux": 98, "microsoft": 98, "standard": [98, 175, 227, 302, 329, 401, 415, 420, 429, 504, 516, 575, 595, 671, 704, 789, 793, 803, 854], "wsl2": 98, "x86_64": 98, "glibc2": 98, "31": [98, 297, 298, 309, 322, 444, 480, 481, 665, 666, 667, 818], "main": 98, "jul": [98, 444, 818], "56": [98, 455, 516], "gcc": 98, "20210110": 98, "23": [98, 131, 132, 227, 230, 300, 315, 481, 546, 547, 595, 669], "check_dtyp": [99, 100], "check_exact": [99, 100], "check_column_nam": 99, "rtol": [99, 100], "1e": [99, 100], "atol": [99, 100], "nans_compare_equ": [99, 100], "assertionerror": [99, 100], "compar": [99, 100, 127, 188, 227, 579, 595, 776, 854], "exactli": [99, 100, 103, 104, 440, 441, 784, 814, 815, 854], "toler": [99, 100, 143, 227, 552, 595], "rel": [99, 100, 210, 312, 328, 329, 330, 516, 685, 703, 704, 705, 854], "inexact": [99, 100], "absolut": [99, 100, 234, 516, 599, 854], "assert": [99, 100, 102, 103, 104, 132, 227, 525, 547, 595, 714, 854], "check_nam": 100, "s1": [100, 126, 227, 846, 854], "s2": [100, 126, 227, 603, 645, 660, 726, 745, 776, 846, 854], "searchstrategi": [101, 103, 104], "null_prob": [101, 103, 104], "percentag": [101, 103, 104, 383, 516, 752, 854], "chanc": [101, 103, 104], "hypothesi": [101, 102, 103, 104, 861], "sampled_from": 101, "unique_small_int": 101, "ccy": 101, "gbp": 101, "eur": [101, 114, 227], "jpy": 101, "min_col": [102, 103], "max_col": [102, 103], "_parametr": 102, "suitabl": 102, "standalon": [102, 103], "itself": [102, 554, 595], "explicit": [102, 468, 500], "omit": [102, 103, 104, 152, 227], "random": [102, 103, 104, 133, 166, 227, 342, 388, 405, 411, 516, 715, 757, 774, 785, 854], "mincol": 102, "exact": [102, 103, 104, 172, 227, 444, 818], "control": 102, "especi": 102, "punctuat": 102, "def": [102, 103, 104, 155, 187, 227, 562, 595], "test_special_char_colname_init": 102, "z": [102, 103, 119, 139, 141, 142, 149, 227, 254, 277, 342, 391, 516, 551, 560, 573, 595, 643, 710, 854], "test_unique_xyz": 102, "assert_someth": 102, "min_siz": [103, 104], "max_siz": [103, 104], "include_col": 103, "allow_infin": [103, 104], "allowed_dtyp": [103, 104], "excluded_dtyp": [103, 104], "describ": [103, 227, 588, 854], "desir": 103, "param": [103, 104, 164, 227], "ensur": [103, 104, 106, 164, 227, 462, 516, 556, 595, 837, 843, 854], "n_chunk": [103, 104, 227, 854], "randomis": 103, "individu": [103, 132, 227, 240, 428, 516, 547, 595, 645, 802, 854], "append": [103, 121, 142, 143, 227, 389, 516, 551, 552, 595, 854], "onto": 103, "exist": [103, 595], "independ": [103, 104], "either": [103, 132, 144, 147, 164, 176, 227, 547, 554, 595], "basi": 103, "pct": 103, "take": [103, 126, 178, 227, 312, 321, 454, 483, 485, 516, 578, 595, 685, 694, 829, 846, 854], "preced": 103, "disallow": [103, 104], "exclud": [103, 104, 346, 472, 503, 516], "deploi": [103, 104], "decor": [103, 104], "characterist": [103, 104], "develop": [103, 104], "directli": [103, 104, 328, 329, 330, 516, 703, 704, 705, 854], "concret": [103, 104], "test_repr": [103, 104], "isinst": [103, 104, 227], "repr": [103, 104], "known": [103, 589], "colnam": [103, 118, 227, 368, 516, 537, 595], "df_strategi": 103, "15836": 103, "1755e": 103, "38": 103, "575050513": 103, "constructor": 104, "op": [104, 391, 516], "max_data_s": 104, "distinct": [104, 154, 227, 274, 388, 480, 481, 482, 516, 640, 757, 854], "54666": 104, "35": 104, "6414": 104, "63290": 104, "pool": 105, "f": [110, 114, 117, 145, 179, 187, 190, 200, 227, 240, 273, 367, 368, 410, 444, 467, 473, 477, 478, 486, 492, 500, 516, 536, 556, 584, 589, 595, 639, 818], "return_dtyp": [110, 227, 240, 367, 467, 492, 516, 604, 854], "inference_s": [110, 227], "256": [110, 227, 752, 854], "custom": [110, 200, 227, 240, 273, 367, 394, 467, 492, 516, 556, 589, 595, 604, 639, 763, 854], "user": [110, 200, 227, 240, 407, 467, 516, 589, 604, 779, 854], "udf": [110, 200, 227, 240, 467, 516, 589, 604, 854], "logic": [110, 200, 227, 240, 457, 516, 544, 551, 565, 587, 589, 595, 839, 854], "almost": [110, 200, 227, 240, 516, 589], "_significantly_": [110, 200, 227, 240, 516, 589], "intens": [110, 200, 227, 240, 516, 589], "becaus": [110, 119, 131, 144, 190, 200, 227, 240, 257, 516, 546, 589, 595, 604, 623, 702, 854], "forc": [110, 143, 200, 227, 240, 516, 551, 552, 589, 595], "materi": [110, 200, 227, 240, 516, 563, 589, 595], "parallelis": [110, 200, 227, 240, 516, 589], "optimis": [110, 200, 227, 240, 516, 589, 777, 778, 854], "wherev": [110, 200, 227, 240, 516, 589], "strongli": [110, 200, 227, 240, 516, 589], "prefer": [110, 121, 200, 227, 240, 394, 516, 589, 595, 603, 763, 854], "achiev": [110, 200, 227, 240, 516, 589], "best": [110, 200, 227, 240, 516, 589], "tri": [110, 227], "track": [110, 227], "arbitrarili": [110, 227], "drop": [110, 116, 117, 188, 227, 256, 291, 293, 294, 516, 536, 579, 595, 622, 659, 661, 854], "rearrang": [110, 227], "want": [110, 121, 152, 227, 279, 280, 281, 337, 367, 395, 396, 397, 398, 399, 401, 402, 403, 477, 486, 516, 531, 548, 555, 595, 603, 647, 648, 649, 837, 854], "preserv": [110, 227], "syntax": [110, 152, 174, 227, 572, 595, 854], "15": [110, 131, 132, 137, 227, 290, 315, 320, 516, 546, 547, 595, 657, 665, 688, 693, 854], "24": [110, 119, 132, 227, 288, 290, 301, 516, 547, 595, 657, 670, 854], "better": [110, 200, 227, 240, 462, 516, 589, 777, 778, 854], "scalar": [110, 227, 406, 467, 516, 775, 854], "ident": [111, 112, 227, 529, 530, 595, 646, 650, 854], "cheap": [111, 112, 227, 529, 530, 595, 603, 646, 650, 854], "deepcopi": [111, 112, 227, 529, 530, 595, 646, 650, 854], "13": [111, 112, 122, 123, 129, 132, 137, 151, 196, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 227, 230, 394, 396, 473, 516, 529, 530, 540, 541, 547, 554, 584, 595, 604, 688, 693, 695, 854], "clear": [112, 227, 530, 595, 650, 854], "properti": [113, 118, 135, 167, 169, 194, 227, 525, 532, 537, 568, 582, 595, 700, 712, 717, 747, 780, 832, 854], "appl": [113, 136, 142, 160, 162, 180, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 227, 385, 393, 426, 442, 450, 516, 551, 595, 800, 816], "banana": [113, 180, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 227, 385, 393, 450, 516], "summari": [114, 227, 658, 854], "usd": [114, 227], "2020": [114, 132, 227, 298, 301, 304, 306, 308, 311, 317, 325, 547, 595, 665, 667, 670, 676, 678, 681, 684, 690, 698], "2021": [114, 131, 191, 227, 444, 491, 546, 595, 671, 720, 818, 854], "null_count": [114, 117, 227, 290, 516, 657, 658, 854], "266667": [114, 227], "std": [114, 227, 394, 516, 595, 658, 770, 854], "101514": [114, 227], "707107": [114, 227, 329, 516, 704, 854], "median": [114, 156, 227, 397, 516, 595, 766, 854], "snippet": [117, 227, 536, 595], "fold": [117, 227, 373, 471, 477, 478, 500, 506, 536, 595], "acc": [117, 227, 477, 478, 486, 500, 536, 595], "is_nul": [117, 227, 516, 536, 595, 854], "height": [117, 227], "int64": [118, 126, 131, 132, 155, 167, 179, 227, 288, 289, 298, 301, 304, 306, 308, 311, 317, 331, 390, 451, 457, 468, 484, 516, 537, 546, 547, 562, 568, 595, 655, 656, 667, 670, 676, 678, 681, 684, 690, 700, 759, 776, 826, 837, 838, 839, 854], "sizeunit": [119, 227, 702, 854], "total": [119, 227, 702, 854], "heap": [119, 227, 702, 854], "its": [119, 189, 227, 315, 320, 580, 595, 688, 693, 702, 854], "bitmap": [119, 227, 702, 854], "therefor": [119, 227, 702, 854], "structarrai": [119, 227, 702, 854], "constant": [119, 132, 227, 547, 595, 702, 854], "unchang": [119, 227, 240, 457, 516, 556, 589, 595, 702, 839, 854], "howev": [119, 227, 702, 854], "visibl": [119, 227, 702, 854], "capac": [119, 172, 227, 702, 784, 854], "ffi": [119, 227, 702, 854], "kb": [119, 227, 702, 854], "mb": [119, 227, 702, 854], "gb": [119, 227, 702, 854], "tb": [119, 227, 702, 854], "scale": [119, 227, 702, 854], "1_000_000": [119, 227, 702, 854], "25888898": [119, 227], "689577102661133": [119, 227], "long": [120, 149, 190, 227, 538, 560, 595], "largelist": [120, 227], "letter": [120, 203, 213, 227, 331, 484, 516, 538, 590, 591, 595], "locat": [121, 162, 185, 189, 227, 580, 595, 603, 778, 828, 854], "faster": [121, 190, 227, 394, 433, 460, 516, 603, 604, 763, 807, 854], "onlin": [121, 227, 603, 854], "rerun": [121, 227, 603, 854], "them": [121, 131, 132, 143, 191, 227, 261, 379, 380, 473, 516, 546, 547, 552, 595, 603, 627, 748, 749, 854], "latter": [121, 227, 603, 854], "20": [121, 136, 137, 155, 157, 161, 162, 227, 247, 248, 249, 251, 291, 315, 320, 342, 345, 491, 516, 562, 595, 693], "40": [121, 155, 227, 315, 320, 342, 516, 562, 595, 671, 693], "60": [121, 227, 316, 317, 444, 686, 689, 690, 818], "fill_valu": [122, 171, 190, 227, 335, 409, 516, 540, 571, 595, 709, 782, 854], "Not": [122, 227, 352, 354, 516, 540, 595], "To": [122, 227, 293, 294, 336, 506, 516, 540, 595], "fillnullstrategi": [123, 227, 336, 516, 541, 595, 710, 854], "matches_supertyp": [123, 227, 541, 595], "forward": [123, 143, 227, 336, 341, 516, 541, 552, 595, 710, 854], "consecut": [123, 227, 275, 336, 341, 421, 516, 541, 595, 710, 795, 854], "supertyp": [123, 227, 239, 516, 541, 595], "fill_nan": [123, 227, 516, 595, 854], "reduct": [126, 227], "effect": [126, 227, 586, 595], "supercast": [126, 227], "similar": [126, 143, 227, 382, 516, 552, 595], "parent": [126, 227], "rule": [126, 227, 318, 691], "arithmet": [126, 227], "int8": [126, 227, 288, 289, 451, 516, 655, 656, 762, 826, 854], "zip_with": [126, 227, 854], "foo11": [126, 227], "bar22": [126, 227], "null_equ": [127, 227, 776, 854], "retriev": [128, 227, 252, 253, 448, 618, 619, 822], "maintain_ord": [130, 154, 156, 188, 191, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 227, 235, 240, 453, 459, 516, 531, 539, 545, 563, 579, 595, 841, 854], "consist": [130, 227, 545, 595], "agg": [130, 131, 132, 227, 235, 240, 337, 417, 453, 464, 516, 531, 539, 545, 546, 547, 563, 595], "loop": [130, 227], "sub_df": [130, 227], "index_column": [131, 132, 227, 546, 547, 595], "truncat": [131, 227, 546, 563, 595], "include_boundari": [131, 227, 546, 595], "dynamicgroupbi": [131, 227], "normal": [131, 227, 327, 359, 415, 516, 546, 595, 701, 735, 789, 854], "groupbi": [131, 132, 152, 227, 230, 235, 240, 257, 290, 337, 382, 417, 418, 453, 464, 467, 516, 531, 539, 546, 547, 563, 595, 623, 657, 854], "member": [131, 227, 546, 595, 726, 854], "seen": [131, 227, 275, 341, 516, 546, 595], "roll": [131, 132, 227, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 473, 516, 546, 547, 595, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 854], "slot": [131, 227, 256, 290, 291, 516, 546, 595, 622, 657, 659, 854], "1n": [131, 132, 143, 191, 227, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 685, 688, 693], "nanosecond": [131, 132, 143, 191, 227, 312, 315, 316, 320, 395, 396, 397, 398, 399, 401, 402, 403, 482, 516, 546, 547, 552, 595, 685, 688, 689, 693], "1u": [131, 132, 143, 191, 227, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 685, 688, 693], "microsecond": [131, 132, 143, 191, 227, 312, 315, 316, 320, 395, 396, 397, 398, 399, 401, 402, 403, 481, 482, 516, 546, 547, 552, 563, 595, 685, 688, 693], "1m": [131, 132, 143, 191, 227, 304, 306, 311, 312, 315, 317, 320, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 676, 678, 684, 685, 688, 690, 693], "millisecond": [131, 132, 143, 191, 227, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 482, 516, 546, 547, 552, 595, 685, 688, 693], "1h": [131, 132, 143, 191, 227, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 669, 685, 688, 693], "1w": [131, 132, 143, 191, 227, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 685, 688, 693], "week": [131, 132, 143, 191, 227, 312, 315, 320, 323, 395, 396, 397, 398, 399, 401, 402, 403, 482, 516, 546, 547, 552, 595, 685, 688, 693, 696], "month": [131, 132, 143, 191, 227, 297, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 480, 481, 516, 546, 547, 552, 595, 666, 685, 688, 693], "1y": [131, 132, 143, 191, 227, 312, 315, 320, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 685, 688, 693, 699], "year": [131, 132, 143, 191, 227, 302, 312, 313, 315, 320, 322, 395, 396, 397, 398, 399, 401, 402, 403, 480, 481, 516, 546, 547, 552, 595, 671, 685, 686, 688, 693, 695], "1i": [131, 132, 143, 191, 227, 312, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 547, 552, 595, 685], "Or": [131, 132, 143, 191, 227, 382, 509, 516, 546, 547, 552, 595], "10i": [131, 132, 227, 546, 547, 595], "often": [131, 132, 227, 391, 516, 546, 547, 595], "ascend": [131, 132, 227, 469, 546, 547, 595], "dynam": [131, 227, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 595], "matter": [131, 132, 227, 546, 547, 595], "neg": [131, 170, 171, 173, 227, 268, 269, 408, 409, 416, 438, 516, 546, 570, 571, 573, 586, 595, 634, 635, 781, 782, 790, 812, 854], "_lower_bound": [131, 227, 546, 595], "_upper_bound": [131, 227, 546, 595], "impact": [131, 227, 546, 595], "harder": [131, 227, 546, 595], "date_rang": [131, 191, 227, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 546, 595, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699], "30m": [131, 227, 315, 320, 546, 595, 688, 693], "\u03bc": [131, 132, 143, 191, 227, 295, 297, 298, 299, 300, 301, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 546, 547, 595, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699], "time_min": [131, 227, 546, 595], "time_max": [131, 227, 546, 595], "boundari": [131, 227, 279, 280, 281, 516, 546, 595, 647, 648, 649, 854], "ad": [131, 187, 195, 227, 239, 477, 478, 516, 546, 583, 595], "time_count": [131, 227, 546, 595], "_lower_boundari": [131, 227, 546, 595], "_upper_boundari": [131, 227, 546, 595], "lower_bound": [131, 227, 516, 546, 595], "upper_bound": [131, 227, 516, 546, 595], "time_agg_list": [131, 227, 546, 595], "belong": [131, 227, 546, 595], "idx": [131, 227, 273, 546, 595, 639, 778, 854], "arang": [131, 190, 200, 227, 546, 589, 595], "2i": [131, 227, 546, 595], "3i": [131, 227, 546, 595], "a_agg_list": [131, 227, 546, 595], "rollinggroupbi": [132, 227], "dynamic_groupbi": [132, 227, 547, 595], "groupby_dynam": [132, 227, 547, 595], "45": [132, 227, 315, 320, 423, 428, 547, 595, 688, 693, 797, 802], "48": [132, 227, 547, 595], "42": [132, 133, 227, 547, 595, 715, 854], "18": [132, 227, 315, 320, 324, 345, 358, 516, 547, 563, 595, 697], "19": [132, 143, 227, 315, 547, 595, 688, 693], "43": [132, 227, 547, 595], "with_column": [132, 155, 227, 240, 257, 276, 277, 279, 280, 281, 342, 345, 346, 349, 352, 354, 355, 356, 358, 382, 383, 426, 430, 433, 434, 435, 438, 440, 441, 442, 444, 447, 449, 457, 468, 471, 473, 474, 479, 483, 505, 506, 509, 516, 547, 562, 595, 623, 643, 818], "strptime": [132, 227, 318, 547, 595, 691], "2d": [132, 183, 227, 547, 595, 666], "sum_a": [132, 227, 547, 595], "min_a": [132, 227, 547, 595], "max_a": [132, 227, 547, 595], "to_list": [132, 227, 273, 547, 595, 639, 854], "seed": [133, 166, 227, 342, 405, 411, 516, 715, 774, 785, 854], "seed_1": [133, 227, 342, 516, 715, 854], "seed_2": [133, 227, 342, 516, 715, 854], "seed_3": [133, 227, 342, 516, 715, 854], "hash": [133, 227, 516, 854], "u64": [133, 227, 342, 390, 516, 563, 595, 715, 854], "4238614331852490969": [133, 227], "17976148875586754089": [133, 227], "4702262519505526977": [133, 227], "18144177983981041107": [133, 227], "in_plac": [136, 172, 193, 227, 758, 760, 784, 791, 854], "grown": [136, 227], "baz": [137, 138, 156, 189, 210, 227, 439, 441, 550, 580, 595, 815], "intermedi": [138, 227, 550, 595, 718, 854], "linear": [138, 158, 211, 227, 254, 345, 371, 387, 399, 473, 474, 499, 516, 550, 564, 595, 620, 718, 756, 768, 854], "mask": [139, 141, 227, 255, 347, 349, 357, 516, 621, 711, 721, 724, 733, 753, 754, 777, 796, 846, 854], "left_on": [142, 143, 227, 551, 552, 595], "right_on": [142, 143, 227, 551, 552, 595], "joinstrategi": [142, 227, 551, 595], "suffix": [142, 143, 198, 227, 352, 354, 355, 356, 393, 426, 516, 551, 552, 595, 800], "_right": [142, 143, 227, 551, 552, 595], "outer": [142, 227, 551, 595], "semi": [142, 227, 551, 595], "anti": [142, 227, 551, 595, 777, 778, 854], "cross": [142, 227, 551, 595], "join_asof": [142, 227, 551, 595], "stringcach": [142, 227, 525], "other_df": [142, 227, 551, 595], "by_left": [143, 227, 552, 595], "by_right": [143, 227, 552, 595], "asofjoinstrategi": [143, 227, 552, 595], "allow_parallel": [143, 227, 551, 552, 595], "force_parallel": [143, 227, 551, 552, 595], "asof": [143, 227, 552, 595], "nearest": [143, 158, 211, 227, 278, 340, 387, 399, 499, 516, 552, 564, 595, 644, 713, 756, 768, 854], "rather": [143, 227, 447, 552, 595, 821], "asof_join": [143, 227], "search": [143, 227, 552, 595], "last": [143, 156, 174, 177, 188, 213, 227, 249, 251, 259, 272, 290, 297, 313, 322, 441, 452, 507, 516, 552, 574, 577, 579, 591, 595, 613, 616, 625, 638, 657, 666, 686, 695, 815, 827, 854], "greater": [143, 227, 415, 441, 516, 552, 595, 789, 815, 854], "numer": [143, 147, 227, 279, 280, 281, 391, 410, 516, 525, 552, 595, 647, 648, 649, 732, 776, 783, 854], "distanc": [143, 227, 552, 595], "plan": [143, 144, 227, 528, 533, 534, 544, 551, 552, 565, 572, 587, 595], "gdp": [143, 227], "2016": [143, 227], "2017": [143, 227], "2018": [143, 227], "2019": [143, 227], "record": [143, 227], "jan": [143, 227], "1st": [143, 227], "4164": [143, 227], "4411": [143, 227], "4566": [143, 227], "4696": [143, 227], "popul": [143, 227], "12th": [143, 227], "82": [143, 227], "66": [143, 227, 768, 854], "83": [143, 227], "52": [143, 196, 227, 404, 516, 584, 595], "request": [144, 227], "small": [144, 227, 315, 320, 417, 418, 516, 539, 595], "describe_plan": [144, 227, 595], "unoptim": [144, 227, 534, 595], "describe_optimized_plan": [144, 227, 595], "show_graph": [144, 227, 595], "un": [144, 227], "graphviz": [144, 227, 572, 595], "advis": [144, 227], "thei": [144, 227, 331, 394, 516, 595, 763, 854], "head": [145, 227, 239, 362, 516, 555, 595, 737, 854], "axi": [146, 147, 149, 150, 176, 227, 560, 595], "null_strategi": [147, 176, 227], "nullstrategi": [147, 176, 227], "propag": [147, 176, 227, 379, 380, 516, 748, 749, 854], "panicexcept": [147, 227, 449, 525], "666667": [147, 192, 227, 328, 516, 581, 595], "id_var": [149, 227, 560, 595], "value_var": [149, 227, 560, 595], "variable_nam": [149, 227, 560, 595], "value_nam": [149, 227, 560, 595], "unpivot": [149, 227, 560, 595], "wide": [149, 190, 227, 560, 595], "leav": [149, 227, 560, 595], "identifi": [149, 227, 560, 595], "massag": [149, 227, 560, 595], "measur": [149, 227, 560, 595], "One": [152, 156, 227, 854], "what": [152, 227, 837, 845, 854], "struct": [152, 186, 189, 227, 273, 440, 441, 462, 477, 478, 479, 516, 580, 595, 639, 814, 815], "pack": [152, 227], "expr_unique_subset": [152, 227], "df_nuniqu": [152, 227], "equival": [152, 227, 433, 807, 819, 820], "df_agg_nuniqu": [152, 227], "simpl": [152, 227], "as_dict": [154, 227], "split": [154, 198, 227, 339, 440, 441, 516, 814, 815], "predict": [154, 156, 159, 191, 227], "k": [154, 227, 277, 359, 458, 516, 643, 735, 840, 854], "l": [154, 227, 339, 516], "func": [155, 227, 562, 595, 604, 854], "cast_str_to_int": [155, 227, 562, 595], "col_nam": [155, 227, 562, 595], "aggregate_fn": [156, 227], "pivotagg": [156, 227], "sort_column": [156, 227], "well": [156, 227], "predefin": [156, 227], "transpos": [156, 210, 227], "discoveri": [156, 227], "interpol": [158, 211, 227, 336, 371, 387, 399, 499, 516, 564, 595, 756, 768, 854], "interpolationmethod": [158, 211, 227, 387, 399, 499, 516, 564, 595, 756, 768, 854], "midpoint": [158, 211, 227, 387, 399, 499, 516, 564, 595, 756, 768, 854], "subsequ": [159, 227], "pair": [160, 227, 566, 595], "old": [160, 227, 566, 595], "new_col": [161, 227], "val": [163, 227, 277, 457, 516, 643], "by_pred": [164, 227], "accord": [164, 227, 671], "mutual": [164, 227], "exclus": [164, 227], "addition": [164, 227], "clariti": [164, 227], "suppli": [164, 227], "anyth": [164, 227], "toomanyrowsreturn": [164, 227, 525], "norowsreturn": [164, 227, 525], "inherit": [164, 227], "rowsexcept": [164, 227, 525], "frac": [166, 227, 328, 329, 330, 405, 415, 458, 516, 703, 704, 705, 774, 789, 840, 854], "with_replac": [166, 227, 405, 516, 774, 854], "shuffl": [166, 200, 227, 405, 516, 589, 774, 854], "whenthen": [168, 227, 569, 595], "whenthenthen": [168, 227, 569, 595], "shift_and_fil": [170, 227, 516, 595, 854], "shift": [171, 227, 256, 291, 383, 409, 473, 516, 571, 595, 622, 659, 752, 782, 854], "shrink": [172, 227, 410, 516, 783, 784, 854], "fit": [172, 190, 227, 410, 516, 783, 784, 854], "hold": [172, 227, 472], "nulls_last": [174, 227, 249, 251, 417, 516, 574, 595, 613, 616, 854], "ddof": [175, 192, 227, 420, 463, 498, 503, 504, 508, 516, 575, 581, 595, 793, 844, 854], "deviat": [175, 227, 329, 401, 420, 504, 516, 575, 595, 704, 793, 854], "degre": [175, 192, 227, 420, 463, 498, 503, 516, 793, 844, 854], "freedom": [175, 192, 227, 420, 463, 498, 503, 516, 793, 844, 854], "816497": [175, 227], "21": [176, 227], "16a": [176, 227], "27b": [176, 227], "38c": [176, 227], "nth": [178, 227, 441, 454, 516, 578, 595, 815, 829, 854], "mostli": [179, 227, 337, 516], "categoricaltyp": [179, 227], "large_str": [179, 227], "as_seri": [180, 227], "fruit": [180, 227, 385, 393, 426, 442, 450, 516, 800, 816], "car": [180, 227, 385, 393, 450, 516], "beetl": [180, 227, 385, 393, 450, 516], "audi": [180, 227, 385, 393, 450, 516], "28": [180, 227, 324, 697], "300": [180, 227, 764, 765, 767, 854], "hot": [182, 227], "foo_1": [182, 227], "foo_2": [182, 227], "bar_3": [182, 227], "bar_4": [182, 227], "ham_a": [182, 227], "ham_b": [182, 227], "re": [183, 227, 490], "attempt": [183, 227, 837, 854], "ll": [183, 227, 837, 854], "numpy_arrai": [183, 227], "date_as_object": [184, 227], "sent": [184, 227, 837, 854], "datetime64": [184, 227], "pandas_df": [184, 227], "three": [186, 227, 406, 505, 516], "four": [186, 227, 505], "five": [186, 227], "num": [186, 227, 346, 349, 447, 516], "include_head": [187, 227], "header_nam": [187, 227], "column_nam": [187, 227], "iter": [187, 227, 290, 516, 657, 854], "veri": [187, 227, 530, 595, 650, 854], "perhap": [187, 227], "column_2": [187, 227], "name_gener": [187, 227, 273, 639], "base_nam": [187, 227], "my_column_": [187, 227], "my_column_0": [187, 227], "my_column_1": [187, 227], "my_column_2": [187, 227], "uniquekeepstrategi": [188, 227, 579, 595], "conjunct": [188, 227], "fail": [188, 227, 444, 579, 595, 604, 818, 854], "decompos": [189, 227, 580, 595], "t_a": [189, 227, 580, 595], "t_b": [189, 227, 580, 595], "t_c": [189, 227, 580, 595], "t_d": [189, 227, 580, 595], "womp": [189, 227, 580, 595], "t_": [189, 227, 580, 595], "t_struct": [189, 227, 580, 595], "step": [190, 227, 468], "unstackdirect": [190, 227], "form": [190, 227, 383, 516, 752, 854], "much": [190, 227, 290, 516, 657, 854], "pivot": [190, 227], "phase": [190, 227], "subject": [190, 227], "ascii_uppercas": [190, 227], "col1": [190, 227], "col2": [190, 227], "h": [190, 227, 339, 410, 516], "col1_0": [190, 227], "col1_1": [190, 227], "col1_2": [190, 227], "col2_0": [190, 227], "col2_1": [190, 227], "col2_2": [190, 227], "time_column": [191, 227], "frequenc": [191, 227], "forward_fil": [191, 227, 516], "06": [191, 227, 314, 326, 688, 696], "varianc": [192, 227, 330, 359, 403, 463, 508, 516, 581, 595, 705, 735, 772, 844, 854], "grow": [193, 227], "b_squar": [195, 227, 583, 595], "36": [195, 227, 583, 595], "named_expr": [196, 227, 584, 595], "is_not": [196, 227, 516, 584, 595], "opt": [196, 227, 584, 595], "with_columns_kwarg": [196, 227, 584, 595], "row_nr": [197, 227, 586, 595, 778, 854], "complet": [198, 837, 854], "idiomat": 198, "_sum": 198, "tail": [198, 227, 239, 415, 516, 595, 789, 854], "_tail_sum": 198, "bar_sum": 198, "bar_tail_sum": 198, "sub": [200, 426, 442, 800, 816], "id": [200, 434, 435, 460, 462, 516, 589, 842, 854], "squar": [200, 359, 419, 516, 589, 735, 792, 854], "triangl": [200, 589], "group_df": [200, 589], "nr": [203, 213, 590, 591], "maxim": [205, 217, 247, 516, 611, 854], "833333": 206, "minim": [208, 220, 248, 253, 410, 516, 612, 619, 743, 783, 854], "pivot_column": 210, "values_column": 210, "pivotop": 210, "larg": [210, 417, 418, 516], "27": [212, 314, 326, 384, 516], "namespac": [226, 230, 515, 525, 594], "overview": [227, 516, 525, 595, 854], "public": [227, 516, 525, 595, 854], "polar": [227, 515, 516, 525, 595, 854, 860, 861], "columnstyp": 227, "variou": [227, 516, 595, 854], "lead": [227, 407, 432, 437, 443, 447, 453, 462, 493, 496, 503, 516, 556, 589, 595, 779, 806, 817, 821, 854], "behavior": [227, 240, 467, 493, 496, 516], "subclass": 227, "mydatafram": 227, "notic": [227, 854], "initi": [227, 477, 486], "f32": [227, 257, 388, 410, 483, 516, 623, 757, 854], "df4": 227, "drop_in_plac": 227, "drop_nul": [227, 293, 516, 595, 854], "estimated_s": [227, 854], "explod": [227, 339, 516, 595, 854], "extend": [227, 334, 516, 603, 708, 854], "find_idx_by_nam": 227, "frame_equ": [227, 315, 320], "get_column": [227, 506], "groupby_rol": [227, 395, 396, 397, 398, 399, 401, 402, 403, 516, 546, 595], "hash_row": 227, "hstack": 227, "insert_at_idx": 227, "is_dupl": [227, 516, 854], "is_empti": [227, 854], "is_uniqu": [227, 516, 854], "melt": [227, 595], "n_uniqu": [227, 516, 588, 854], "partition_bi": 227, "pipe": [227, 595], "quantil": [227, 399, 516, 595, 768, 854], "replace_at_idx": 227, "shrink_to_fit": [227, 854], "take_everi": [227, 516, 595, 854], "to_arrow": [227, 854], "to_dict": 227, "to_dummi": [227, 854], "to_numpi": [227, 367, 516, 854], "to_panda": [227, 854], "to_struct": [227, 448, 449], "unnest": [227, 440, 441, 595, 814, 815], "unstack": 227, "upsampl": 227, "var": [227, 516, 595, 854], "with_row_count": [227, 595, 778, 854], "write_avro": 227, "write_ipc": 227, "write_json": [227, 565, 595], "write_parquet": 227, "sinc": [230, 299, 668], "favor": 230, "futur": 230, "94": [235, 516], "confus": [237, 352, 354, 516], "tt": [237, 516], "tf": [237, 238, 516], "ff": [237, 238, 516], "upcast": [239, 516], "assum": [240, 516, 556, 589, 595], "a_times_2": [240, 516], "invers": [241, 242, 243, 244, 245, 246, 516, 605, 606, 607, 608, 609, 610, 854], "cosin": [241, 242, 282, 283, 367, 516, 605, 606, 651, 652, 854], "570796": [241, 243, 516, 605, 607, 854], "hyperbol": [242, 244, 246, 283, 414, 456, 516, 606, 608, 610, 652, 788, 831, 854], "sine": [243, 244, 367, 413, 414, 516, 607, 608, 787, 788, 854], "881374": [244, 516, 608, 854], "tangent": [245, 246, 455, 456, 516, 609, 610, 830, 831, 854], "785398": [245, 516, 609, 854], "would": [249, 251, 259, 372, 388, 469, 516, 613, 616, 625, 757, 837, 854], "arg_sort": [251, 516, 616, 854], "sublist": [252, 253, 255, 256, 258, 259, 260, 261, 262, 269, 272, 618, 619, 621, 622, 624, 625, 626, 627, 628, 635, 638, 726, 854], "membership": [255, 621], "null_behavior": [256, 291, 516, 622, 659, 854], "nullbehavior": [256, 291, 516, 622, 659, 854], "th": [256, 291, 415, 516, 622, 659, 789, 854], "against": [257, 623, 860], "blindli": [257, 623], "worth": [257, 623], "enough": [257, 415, 516, 623, 789, 854], "concat_list": [257, 483, 623], "rank": [257, 483, 503, 516, 623, 854], "taken": [269, 438, 453, 516, 635, 812], "n_field_strategi": [273, 639], "tostructstrategi": [273, 639], "first_non_nul": [273, 639], "max_width": [273, 639], "field_0": [273, 639], "field_1": [273, 639], "field_n": [273, 639], "col_name_": [273, 639], "col_name_0": [273, 639], "col_name_1": [273, 639], "col_name_2": [273, 639], "next": [275, 388, 516, 757, 854], "strict": [276, 424, 444, 516, 641, 776, 798, 818, 854], "throw": [276, 429, 516, 641, 803, 854], "due": [276, 516, 641, 854], "overflow": [276, 288, 289, 451, 516, 641, 655, 656, 826, 854], "categoricalord": [277, 643], "lexic": [277, 643], "round": [278, 340, 455, 516, 644, 713, 854], "min_val": [279, 281, 516, 647, 649, 854], "max_val": [279, 280, 516, 647, 648, 854], "foo_clip": [279, 280, 281, 516], "clip": [280, 281, 516, 648, 649, 854], "543081": [283, 516, 652, 854], "cumul": [285, 286, 287, 288, 289, 477, 478, 479, 516, 653, 654, 655, 656, 854], "a_revers": [285, 286, 287, 288, 289, 368, 393, 450, 516], "int16": [288, 289, 451, 516, 655, 656, 826, 854], "uint16": [288, 289, 451, 516, 655, 656, 826, 854], "prevent": [288, 289, 358, 451, 516, 655, 656, 826, 854], "min_period": [290, 328, 329, 330, 394, 395, 396, 397, 398, 399, 401, 402, 403, 516, 657, 703, 704, 705, 763, 764, 765, 766, 767, 768, 770, 771, 772, 854], "slide": [290, 516, 657, 854], "anoth": [290, 295, 321, 418, 516, 604, 657, 664, 694, 776, 854], "realli": [290, 516, 657, 854], "complex": [290, 458, 516, 657, 840, 854], "visit": [290, 516, 657, 854], "44": [292, 516], "drop_nan": [294, 516, 854], "tu": [295, 299, 319, 324, 664, 665, 668, 692, 697], "lose": [295, 664], "2001": [295, 297, 299, 300, 307, 309, 312, 313, 314, 315, 316, 319, 320, 322, 323, 324, 326, 444, 664, 666, 668, 669, 672, 673, 674, 675, 677, 679, 680, 682, 683, 685, 686, 687, 688, 689, 691, 692, 693, 695, 696, 697, 699, 818], "tu_m": [295, 664], "tu_n": [295, 664], "tz": [296, 321, 325, 665, 694, 698], "zone": [296, 321, 325, 665, 694, 698], "with_time_zon": [296, 665], "timestamp": [296, 665], "extract": [297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 316, 317, 322, 323, 326, 428, 429, 666, 667, 669, 670, 671, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 689, 690, 695, 696, 699, 802, 803], "weekdai": [297, 313], "day_of_month": [297, 313, 323], "ordinal_dai": [297, 323], "day_of_year": [297, 313, 323], "diff": [298, 301, 304, 306, 308, 311, 317, 516, 667, 670, 676, 678, 681, 684, 690, 854], "days_diff": 298, "epochtimeunit": [299, 668], "unix": [299, 668], "epoch_n": [299, 668], "epoch_": [299, 668], "978307200000000": [299, 319, 668, 692], "978307200": [299, 668], "978393600000000": [299, 319, 668, 692], "978393600": [299, 668], "978480000000000": [299, 319, 668, 692], "978480000": [299, 668], "hours_diff": 301, "iso": [302, 322, 671, 695], "correspond": [302, 388, 516, 671, 757, 854], "microseconds_diff": 304, "1001": [304, 306, 311], "001": [304, 306, 311, 482, 676, 678, 684], "002": [304, 306, 311, 482, 676, 678, 684], "003": [304, 306, 311], "997": [304, 306, 311], "998": [304, 306, 311], "999": [304, 306, 311], "milliseconds_diff": 306, "59": [307, 316, 481, 680, 689], "minutes_diff": 308, "1440": [308, 681], "nanoseconds_diff": 311, "1000000": [311, 447, 684], "leap": [312, 685], "account": [312, 328, 329, 330, 516, 685, 703, 704, 705, 854], "minu": [312, 685], "dictat": [312, 685], "2000": [312, 685], "2005": [312, 685], "date_plus_1i": [312, 685], "1y2mo": [312, 685], "date_min": 312, "1998": [312, 685], "2002": [312, 314, 326, 685, 699], "1999": [312, 685], "2003": [312, 685], "2004": [312, 685], "2006": [312, 685], "ordin": [313, 388, 516, 686, 757, 854], "366": [313, 686], "180": [314, 326], "divid": [315, 320, 328, 329, 330, 359, 516, 688, 693, 703, 704, 705, 735, 854], "bucket": [315, 320, 688, 693], "half": [315, 328, 329, 330, 516, 688, 703, 704, 705, 854], "seconod": [315, 688], "eg": [315, 320, 444], "225": [315, 320], "to_fram": [315, 320, 444, 448, 449, 777, 778, 814, 815, 818, 854], "10m": [315, 320, 688, 693], "milli": [316, 689], "micro": [316, 689], "compon": [316, 444, 480, 481, 482, 689], "456789": 316, "654321": 316, "111110": 316, "765431": 316, "sec": 316, "11111": 316, "seconds_diff": 317, "fmt": [318, 344, 444, 487, 516, 549, 595, 691, 818], "timestamp_n": [319, 692], "timestamp_m": 319, "978307200000": 319, "978393600000": 319, "978480000000": 319, "naiv": [321, 694], "53": [322, 695], "mondai": [323, 696], "sundai": [323, 696], "incorrect": [324, 407, 516, 589, 697, 779, 854], "tu_u": [324, 697], "32971": [324, 697], "32974": [324, 697], "32976": [324, 697], "europ": [325, 665, 698], "london": [325, 665, 698], "gmt": [325, 665, 698], "bst": [325, 665, 698], "718281828459045": [327, 364, 516, 701, 738, 854], "formula": [327, 516, 701, 854], "pk": [327, 516, 701, 854], "459148": [327, 516], "754888": [327, 516], "com": [328, 329, 330, 427, 516, 703, 704, 705, 801, 854], "span": [328, 329, 330, 516, 703, 704, 705, 854], "half_lif": [328, 329, 330, 516, 703, 704, 705, 854], "adjust": [328, 329, 330, 415, 516, 703, 704, 705, 789, 854], "exponenti": [328, 329, 330, 332, 516, 703, 704, 705, 706, 854], "weight": [328, 329, 330, 394, 395, 396, 397, 398, 399, 401, 402, 403, 415, 516, 703, 704, 705, 763, 764, 765, 766, 767, 768, 770, 771, 772, 789, 854], "averag": [328, 388, 516, 703, 757, 854], "decai": [328, 329, 330, 516, 703, 704, 705, 854], "term": [328, 329, 330, 430, 433, 516, 703, 704, 705, 804, 807, 854], "mass": [328, 329, 330, 516, 703, 704, 705, 854], "gamma": [328, 329, 330, 516, 703, 704, 705, 854], "foral": [328, 329, 330, 516, 703, 704, 705, 854], "geq": [328, 329, 330, 516, 703, 704, 705, 854], "theta": [328, 329, 330, 516, 703, 704, 705, 854], "life": [328, 329, 330, 516, 703, 704, 705, 854], "exp": [328, 329, 330, 516, 703, 704, 705, 854], "ln": [328, 329, 330, 516, 703, 704, 705, 854], "smooth": [328, 329, 330, 516, 703, 704, 705, 854], "factor": [328, 329, 330, 457, 516, 703, 704, 705, 839, 854], "leq": [328, 329, 330, 516, 703, 704, 705, 854], "begin": [328, 329, 330, 427, 516, 703, 704, 705, 801, 854], "imbal": [328, 329, 330, 516, 703, 704, 705, 854], "ew": [328, 329, 330, 516, 703, 704, 705, 854], "w_i": [328, 329, 330, 516, 703, 704, 705, 854], "recurs": [328, 329, 330, 516, 703, 704, 705, 854], "y_0": [328, 329, 330, 516, 703, 704, 705, 854], "x_0": [328, 329, 330, 516, 703, 704, 705, 854], "y_t": [328, 329, 330, 516, 703, 704, 705, 854], "y_": [328, 329, 330, 516, 703, 704, 705, 854], "x_t": [328, 329, 330, 516, 703, 704, 705, 854], "observ": [328, 329, 330, 516, 703, 704, 705, 854], "428571": [328, 516], "bia": [329, 330, 359, 400, 415, 516, 704, 705, 735, 769, 789, 854], "unbias": [329, 330, 516, 704, 705, 854], "963624": [329, 516, 704, 854], "928571": [330, 516, 705, 854], "wildcard": [331, 465, 472, 477, 478, 484, 486, 500, 516], "regex": [331, 422, 423, 426, 427, 428, 434, 435, 442, 472, 484, 516, 796, 797, 800, 801, 802, 808, 809, 816], "aa": [331, 484, 516], "ba": [331, 484, 516], "cc": [331, 484, 516], "718282": [332, 516], "389056": [332, 516], "54": [332, 516], "59815": [332, 516], "expand": [333, 339, 391, 516, 707, 854], "group_col": [337, 464, 516], "g1": [337, 382, 464, 516], "g2": [337, 382, 464, 516], "lt": [337, 464, 516], "gte": [337, 464, 516], "hello": [339, 465, 516, 627], "world": [339, 516, 627], "r": [339, 423, 427, 428, 434, 516, 797, 801, 802, 808], "word": [339, 516], "latest": [341, 373, 516], "4629889412789719550": [342, 516], "6959506404929392568": [342, 516], "16386608652769605760": [342, 516], "11638928888656214026": [342, 516], "11040941213715918520": [342, 516], "cumsum": [344, 516, 549, 595, 854], "regrid": [345, 516], "grid": [345, 516], "df_original_grid": [345, 516], "grid_point": [345, 516], "df_new_grid": [345, 516], "include_bound": [346, 516], "primit": [346, 350, 516, 837, 854], "finit": [348, 503, 516, 723, 854], "optional_memb": [350, 516, 726, 854], "infinit": [351, 516, 727, 854], "_isnan": [352, 516], "b_isnan": [352, 516], "negat": [353, 516], "_is_not_nan": [354, 516], "b_is_not_nan": [354, 516], "_not_nul": [355, 516], "a_not_nul": [355, 516], "b_not_nul": [355, 516], "_isnul": [356, 516], "a_isnul": [356, 516], "b_isnul": [356, 516], "root": [358, 368, 374, 385, 419, 450, 515, 516, 792, 854], "undo": [358, 375, 516], "duplicateerror": [358, 516, 525], "occurr": [358, 516], "333333": [358, 403, 516, 752, 772, 854], "fisher": [359, 415, 516, 735, 789, 854], "pearson": [359, 415, 498, 516, 735, 789, 854], "fourth": [359, 516, 735, 854], "central": [359, 415, 516, 735, 789, 854], "definit": [359, 516, 735, 854], "subtract": [359, 516, 735, 854], "distribut": [359, 415, 516, 735, 789, 854], "elimin": [359, 516, 735, 854], "come": [359, 516, 526, 594, 735, 854], "bias": [359, 415, 516, 735, 789, 854], "scipi": [359, 415, 516, 735, 789, 854], "stat": [359, 415, 516, 735, 789, 854], "153061": [359, 516], "logarithm": [364, 365, 516, 738, 739, 854], "584963": [364, 516], "30103": [365, 516], "60206": [365, 516], "lowest": [366, 516], "9223372036854775808": [366, 516], "agg_list": [367, 516], "elementwis": [367, 394, 395, 396, 397, 398, 399, 401, 402, 403, 465, 466, 516, 763, 764, 765, 766, 767, 768, 770, 771, 772, 854], "third": [367, 516], "parti": [367, 516], "book": [367, 516], "argmax": [367, 516], "_revers": [368, 393, 450, 516], "b_revers": [368, 393, 450, 516], "computeerror": [372, 525], "keep_nam": [375, 516], "poison": [379, 380, 516, 748, 749, 854], "nanmax": [379, 380, 516, 748, 749, 854], "wherea": [379, 380, 516, 548, 555, 595, 748, 749, 854], "subgroup": [382, 516], "max_by_group": [382, 516], "recent": [383, 516, 752, 854], "previou": [383, 516, 752, 854], "percent": [383, 516, 752, 854], "090909": [383, 516], "expon": [384, 516], "power": [384, 516], "reverse_": [385, 516], "reverse_a": [385, 516], "reverse_fruit": [385, 516], "reverse_b": [385, 516], "reverse_car": [385, 516], "rankmethod": [388, 516, 757, 854], "ti": [388, 516, 757, 854], "appropri": [388, 516, 757, 854], "competit": [388, 516, 757, 854], "highest": [388, 461, 503, 516, 757, 854], "immedi": [388, 505, 516, 757, 854], "64bit": [390, 516, 759, 854], "safe": [390, 516, 759, 837, 854], "coerc": [391, 516], "dim": [392, 516, 761, 854], "flat": [392, 516, 761, 854], "fruits_revers": [393, 450, 516], "cars_revers": [393, 450, 516], "window_s": [394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 516, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 854], "rolling_min": [394, 516, 763, 854], "rolling_max": [394, 516, 763, 854], "rolling_mean": [394, 516, 763, 854], "rolling_sum": [394, 516, 763, 854], "multipli": [394, 395, 396, 397, 398, 399, 401, 402, 403, 516, 763, 764, 765, 766, 767, 768, 770, 771, 772, 854], "358899": [394, 516], "041452": [394, 516], "567764": [394, 516], "travers": [395, 396, 398, 401, 402, 403, 516, 764, 765, 767, 770, 771, 772, 854], "vector": [395, 396, 398, 401, 402, 403, 516, 764, 765, 767, 770, 771, 772, 854], "5h": [395, 396, 397, 398, 399, 401, 402, 403, 516], "33": [399, 404, 472, 516, 768, 854], "skew": [400, 516, 769, 854], "527525": [401, 516, 770, 854], "digit": [404, 447, 516, 773, 797, 821, 854], "17": [404, 516, 651, 688, 854], "maintain": [406, 459, 516, 775, 841, 854], "six": [406, 516], "downstream": [407, 516, 779, 854], "code": [407, 516, 554, 595, 779, 854], "care": [407, 516, 779, 854], "extrema": [410, 516, 783, 854], "112": [410, 516], "129": [410, 516], "i8": [410, 516, 762, 854], "i16": [410, 516], "8589934592": [410, 516], "1073741824": [410, 516], "content": [411, 462, 516, 785, 854], "modul": [411, 515, 516], "175201": [414, 516, 788, 854], "unimod": [415, 516, 789, 854], "skewtest": [415, 516, 789, 854], "speak": [415, 516, 789, 854], "coeffici": [415, 516, 789, 854], "g_1": [415, 516, 789, 854], "m_3": [415, 516, 789, 854], "m_2": [415, 516, 789, 854], "m_i": [415, 516, 789, 854], "sum_": [415, 516, 789, 854], "texttt": [415, 516, 789, 854], "k_3": [415, 516, 789, 854], "k_2": [415, 516, 789, 854], "sqrt": [415, 516, 789, 854], "343622": [415, 516], "larger": [417, 503, 516], "414214": [419, 516, 792, 854], "substr": [422, 426, 434, 435, 439, 440, 441, 442, 796, 800, 808, 809, 813, 814, 815, 816], "treat": [422, 434, 435, 796, 808, 809], "starts_with": [422, 426, 800], "ends_with": [422, 442, 816], "crab": [422, 796], "dog": [422, 445, 446, 474, 796], "rab": [422, 796], "success": [423, 428, 797, 802], "overlap": [423, 428, 797, 802], "captur": [423, 427, 428, 797, 801, 802], "123": [423, 428, 435, 797, 802, 809, 835, 854], "bla": [423, 428, 797, 802], "asd": [423, 428, 797, 802], "678": [423, 428, 797, 802], "910t": [423, 428, 797, 802], "count_digit": 423, "transferencod": [424, 425, 798, 799], "hex": [424, 425, 798, 799], "base64": [424, 425, 798, 799], "thrown": [424, 798], "unabl": [424, 798], "unhandl": [424, 798], "666f6f": [424, 425, 798, 799], "626172": [424, 425, 798, 799], "mango": [426, 442, 800, 816], "go": [426, 800], "has_suffix": 426, "group_index": [427, 801], "vote": [427, 801], "ballon_dor": [427, 801], "candid": [427, 801], "messi": [427, 801], "ref": [427, 801], "candidat": [427, 801], "jorginho": [427, 801], "ronaldo": [427, 801], "w": [427, 801], "extracted_nr": 428, "910": [428, 802], "json_path": [429, 803], "jsonpath": [429, 803], "regardless": [429, 803], "json_val": [429, 803], "n_char": [430, 804], "caf\u00e9": [430, 433, 804, 807], "345": [430, 433, 804, 807], "\u6771\u4eac": [430, 433, 804, 807], "nchar": [430, 433], "fillchar": [431, 436, 805, 810], "justifi": [431, 436, 805, 810], "pad": [431, 436, 447, 805, 810, 821], "cow": [431, 436, 805, 810], "monkei": [431, 436, 805, 810], "hippopotamu": [431, 436, 805, 810], "whitespac": [432, 437, 443, 806, 811, 817], "trail": [432, 437, 443, 811, 817], "know": [433, 807, 837, 845, 854], "text": [433, 434, 435, 807], "replace_al": [434, 808], "123abc": [434, 808], "abc456": [434, 808], "abcabc": [435, 809], "123a123": [435, 809], "bc": [435, 809], "trim": [437, 443, 806, 811, 817], "subslic": [438, 812], "pear": [438, 812], "papaya": [438, 812], "dragonfruit": [438, 812], "s_slice": 438, "ear": [438, 812], "aya": [438, 812], "uit": [438, 812], "ya": [438, 812], "onf": [438, 812], "inclus": [439, 440, 813, 814], "a_1": [440, 814, 834, 854], "d_4": [440, 814], "rename_field": [440, 441, 814, 815], "first_part": [440, 441, 814, 815], "second_part": [440, 441, 814, 815], "remaind": [441, 815], "prefix": [442, 447, 516, 816, 821], "app": [442, 816], "has_prefix": 442, "strftime": [444, 818], "convers": [444, 525, 818, 836, 837, 854], "anywher": [444, 818], "3f": 444, "sun": [444, 818], "34": [444, 818], "lowercas": [445, 819], "variant": [445, 446], "uppercas": [446, 820], "10000": 447, "100000": 447, "0010": 447, "0001": 447, "00000": 447, "00001": 447, "my_struct": [448, 449, 505], "NOT": [449, 545, 595], "anymor": 449, "761594": [456, 516, 831, 854], "replic": [457, 516, 839, 854], "vals_phys": [457, 516], "largest": [458, 516, 840, 854], "smallest": [458, 516, 840, 854], "bottom_k": [458, 516], "appear": [460, 516, 842, 854], "value_count": [460, 516, 854], "9223372036854775807": [461, 516], "multithread": [462, 516], "columnwis": [465, 466], "AND": 465, "bitwis": [465, 466], "OR": 466, "returns_scalar": 467, "Be": 468, "argsort": [469, 516, 854], "hamburg": 472, "concat": [473, 474, 645, 745, 854], "lag": 473, "mimic": 473, "a_lag_": 473, "a_rol": 473, "plai": 474, "swim": 474, "walk": 474, "full_sent": 474, "covari": 476, "intoexpr": [477, 486], "include_init": 477, "accumul": [477, 478, 486, 500], "fn": [477, 478, 486, 500], "new_valu": [477, 478, 486, 500], "simpli": [477, 486], "cumreduc": 477, "across": [479, 506], "syntact": [479, 484, 485, 488, 499, 502, 506, 792, 854], "sugar": [479, 484, 485, 488, 499, 502, 506, 792, 854], "cumfold": 479, "999999": 481, "add_week": 482, "add_dai": 482, "add_second": 482, "add_millisecond": 482, "add_hour": 482, "add_millisec": 482, "ond": 482, "eval": 483, "arr": [483, 510, 837, 847, 854], "mathemat": 483, "a_b_doubl": 483, "fstring": 487, "placehold": 487, "hello_": 487, "_world": 487, "foo_": 487, "_bar_": 487, "foo_a_bar_1": 487, "foo_b_bar_2": 487, "foo_c_bar_3": 487, "agg_group": [488, 516], "export": 490, "allow_object": 491, "valueexcept": 491, "correl": [498, 503], "mode": [501, 516, 854], "propagate_nan": 503, "spearman": 503, "sever": 505, "a_and_b": 505, "isn": 509, "thens": 509, "chain": 509, "These": 515, "sometim": 515, "ab": [516, 854], "arcco": [516, 854], "arccosh": [516, 854], "arcsin": [516, 854], "arcsinh": [516, 854], "arctan": [516, 854], "arctanh": [516, 854], "arg_max": [516, 854], "arg_min": [516, 854], "arg_uniqu": [516, 854], "backward_fil": 516, "ceil": [516, 854], "clip_max": [516, 854], "clip_min": [516, 854], "co": [516, 854], "cosh": [516, 854], "cumcount": 516, "cummax": [516, 854], "cummin": [516, 854], "cumprod": [516, 854], "cumulative_ev": [516, 854], "entropi": [516, 854], "ewm_mean": [516, 854], "ewm_std": [516, 854], "ewm_var": [516, 854], "extend_const": [516, 854], "flatten": 516, "floor": [516, 854], "inspect": [516, 595], "is_between": 516, "is_finit": [516, 854], "is_first": [516, 854], "is_in": [516, 854], "is_infinit": [516, 854], "is_nan": [516, 854], "is_not_nan": [516, 854], "is_not_nul": [516, 854], "kurtosi": [516, 854], "log10": [516, 854], "map_alia": 516, "nan_max": [516, 854], "nan_min": [516, 854], "pct_chang": [516, 854], "pow": 516, "reinterpret": [516, 854], "repeat_bi": 516, "reshap": [516, 854], "rolling_appli": [516, 854], "rolling_median": [516, 854], "rolling_quantil": [516, 854], "rolling_skew": [516, 854], "rolling_std": [516, 854], "rolling_var": [516, 854], "search_sort": [516, 854], "set_sort": [516, 854], "shrink_dtyp": [516, 854], "sin": [516, 854], "sinh": [516, 854], "sort_bi": 516, "tan": [516, 854], "tanh": [516, 854], "to_phys": [516, 854], "top_k": [516, 854], "unique_count": [516, 854], "expos": 525, "miscellan": 525, "unset": 525, "arrowerror": 525, "invalidoperationerror": 525, "nodataerror": 525, "notfounderror": 525, "schemaerror": 525, "shapeerror": 525, "build_info": 525, "show_vers": 525, "sqlcontext": [525, 860], "ldf": [528, 530, 535, 536, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 566, 567, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 595], "hit": [528, 595], "node": [528, 549, 556, 563, 595], "huge": [531, 595], "saver": [531, 595], "pleas": [531, 539, 595], "500": [539, 595, 675, 677, 683, 689, 764, 765, 767, 854], "purpos": [539, 595], "help": [539, 595], "influenc": [539, 556, 595], "read_json": [544, 587, 595], "lazygroupbi": [545, 546, 547, 595], "typeerror": [545, 595], "subscript": [545, 595], "validate_output_schema": [556, 595], "past": [556, 595], "paramount": [556, 595], "hard": [556, 595], "bug": [556, 589, 595], "caller": [556, 589, 595], "invari": [556, 595], "upheld": [556, 595], "prune": [556, 595], "show_plot": [563, 595], "truncate_nod": [563, 595], "figsiz": [563, 572, 595], "gantt": [563, 595], "chart": [563, 595], "matplotlib": [563, 572, 595], "plot": [563, 572, 595], "groupby_partit": [563, 595], "470": [563, 595], "475": [563, 595], "1964": [563, 595], "from_json": [565, 595], "output_path": [572, 595], "raw_output": [572, 595], "figur": [572, 595], "290994": [575, 595], "118034": [575, 595], "433013": [575, 595], "1875": [581, 595], "extern": [585, 595], "access": [585, 595], "df_a": [585, 595], "df_other": [585, 595], "afoo": [585, 595], "cfoo": [585, 595], "unique_nam": 588, "againat": 595, "instanti": 595, "wai": 595, "profil": 595, "with_context": 595, "sr": [600, 854], "new_aliased_sr": [600, 854], "append_chunk": [603, 854], "super": [603, 854], "skip_nul": [604, 854], "141593": [605, 854], "292432": [606, 854], "549306": [610, 854], "listnamespac": 617, "catnamespac": 642, "12345": [644, 713, 773, 854], "56789": [644, 713, 773, 854], "901234": [644, 713, 773, 854], "math": [651, 787, 830, 854], "pi": [651, 787, 830, 854], "1232e": [651, 854], "quick": [658, 854], "mix": [658, 854], "series_num": [658, 854], "581139": [658, 854], "series_str": [658, 854], "datetimenamespac": 663, "epoch": 665, "1583020800": 665, "1585699200": 665, "1588291200": 665, "america": 665, "new_york": 665, "nyc": 665, "29": 665, "est": 665, "edt": 665, "1583002800": 665, "1585681200": 665, "1588273200": 665, "500m": [675, 677, 683, 689], "500000": 675, "2m": 680, "500000000": 683, "date_minus_1y_2mon": 685, "165": [688, 693], "series_equ": [688, 693, 854], "timestamp_u": 692, "978307200000000000": 692, "978393600000000000": 692, "978480000000000000": 692, "005": [701, 854], "06293300616044681": [701, 854], "65": [701, 854], "8568409950394724": [701, 854], "4000000": [702, 854], "814697265625": [702, 854], "bitmask": [714, 854], "swiftli": [714, 854], "2374023516666777365": [715, 854], "10386026231460783898": [715, 854], "17796317186427479491": [715, 854], "datelik": [720, 854], "166667": [752, 854], "142857": [752, 854], "125": [752, 854], "128": [752, 854], "512": [752, 854], "peak": [753, 754, 854], "nanstd": [763, 854], "858612": [763, 854], "200": [764, 765, 767, 854], "400": [764, 765, 767, 854], "150": [765, 854], "250": [765, 854], "350": [765, 854], "450": [765, 854], "381802": [769, 854], "dev": [770, 854], "57": [773, 854], "frequent": [777, 778, 854], "mutat": [778, 854], "2246e": [787, 830, 854], "divisor": [793, 844, 854], "stringnamespac": 794, "6331e16": [830, 854], "int64arrai": [833, 854], "a_2": [834, 854], "a_3": [834, 854], "456": [835, 854], "zero_copy_onli": [837, 854], "writabl": [837, 854], "view": [837, 854], "presenc": [837, 854], "immut": [837, 854], "made": [837, 854], "ignore_nul": [845, 854], "seriesview": [845, 854], "nan_to_nul": 854, "dtype_if_empti": 854, "arraylik": 854, "position": 854, "posit": 854, "scenario": 854, "arg_tru": 854, "chunk_length": 854, "has_valid": 854, "inner_dtyp": 854, "is_boolean": 854, "is_datelik": 854, "is_float": 854, "is_numer": 854, "is_utf8": 854, "new_from_index": 854, "peak_max": 854, "peak_min": 854, "set_at_idx": 854, "readthedoc": 861}, "objects": {"polars": [[1, 0, 1, "", "Binary"], [2, 0, 1, "", "Boolean"], [3, 0, 1, "", "Categorical"], [28, 0, 1, "", "DataType"], [29, 0, 1, "", "Date"], [30, 0, 1, "", "Datetime"], [31, 0, 1, "", "Duration"], [32, 0, 1, "", "Float32"], [33, 0, 1, "", "Float64"], [34, 0, 1, "", "Int16"], [35, 0, 1, "", "Int32"], [36, 0, 1, "", "Int64"], [37, 0, 1, "", "Int8"], [38, 0, 1, "", "List"], [39, 0, 1, "", "Null"], [40, 0, 1, "", "Object"], [860, 0, 1, "", "SQLContext"], [44, 0, 1, "", "StringCache"], [45, 0, 1, "", "Struct"], [46, 0, 1, "", "Time"], [47, 0, 1, "", "UInt16"], [48, 0, 1, "", "UInt32"], [49, 0, 1, "", "UInt64"], [50, 0, 1, "", "UInt8"], [51, 0, 1, "", "Unknown"], [52, 0, 1, "", "Utf8"], [53, 4, 1, "", "align_frames"], [465, 4, 1, "", "all"], [466, 4, 1, "", "any"], [467, 4, 1, "", "apply"], [468, 4, 1, "", "arange"], [54, 4, 1, "", "arg_where"], [469, 4, 1, "", "argsort_by"], [470, 4, 1, "", "avg"], [55, 4, 1, "", "build_info"], [471, 4, 1, "", "coalesce"], [472, 4, 1, "", "col"], [56, 4, 1, "", "collect_all"], [57, 4, 1, "", "concat"], [473, 4, 1, "", "concat_list"], [474, 4, 1, "", "concat_str"], [475, 4, 1, "", "count"], [476, 4, 1, "", "cov"], [477, 4, 1, "", "cumfold"], [478, 4, 1, "", "cumreduce"], [479, 4, 1, "", "cumsum"], [58, 4, 1, "", "cut"], [480, 4, 1, "", "date"], [59, 4, 1, "", "date_range"], [481, 4, 1, "", "datetime"], [482, 4, 1, "", "duration"], [483, 4, 1, "", "element"], [484, 4, 1, "", "exclude"], [485, 4, 1, "", "first"], [486, 4, 1, "", "fold"], [487, 4, 1, "", "format"], [72, 4, 1, "", "from_arrow"], [73, 4, 1, "", "from_dict"], [74, 4, 1, "", "from_dicts"], [75, 4, 1, "", "from_numpy"], [76, 4, 1, "", "from_pandas"], [77, 4, 1, "", "from_records"], [78, 4, 1, "", "get_dummies"], [79, 4, 1, "", "get_idx_type"], [488, 4, 1, "", "groups"], [489, 4, 1, "", "head"], [490, 4, 1, "", "list"], [491, 4, 1, "", "lit"], [492, 4, 1, "", "map"], [493, 4, 1, "", "max"], [494, 4, 1, "", "mean"], [495, 4, 1, "", "median"], [496, 4, 1, "", "min"], [497, 4, 1, "", "n_unique"], [81, 4, 1, "", "ones"], [498, 4, 1, "", "pearson_corr"], [499, 4, 1, "", "quantile"], [82, 4, 1, "", "read_avro"], [83, 4, 1, "", "read_csv"], [84, 4, 1, "", "read_csv_batched"], [85, 4, 1, "", "read_excel"], [86, 4, 1, "", "read_ipc"], [87, 4, 1, "", "read_ipc_schema"], [88, 4, 1, "", "read_json"], [89, 4, 1, "", "read_ndjson"], [90, 4, 1, "", "read_parquet"], [91, 4, 1, "", "read_parquet_schema"], [92, 4, 1, "", "read_sql"], [500, 4, 1, "", "reduce"], [501, 4, 1, "", "repeat"], [93, 4, 1, "", "scan_csv"], [94, 4, 1, "", "scan_ds"], [95, 4, 1, "", "scan_ipc"], [96, 4, 1, "", "scan_ndjson"], [97, 4, 1, "", "scan_parquet"], [502, 4, 1, "", "select"], [98, 4, 1, "", "show_versions"], [503, 4, 1, "", "spearman_rank_corr"], [504, 4, 1, "", "std"], [505, 4, 1, "", "struct"], [506, 4, 1, "", "sum"], [507, 4, 1, "", "tail"], [105, 4, 1, "", "threadpool_size"], [106, 4, 1, "", "toggle_string_cache"], [508, 4, 1, "", "var"], [509, 4, 1, "", "when"], [107, 4, 1, "", "zeros"]], "polars.Binary": [[1, 1, 1, "", "__init__"]], "polars.Boolean": [[2, 1, 1, "", "__init__"]], "polars.Categorical": [[3, 1, 1, "", "__init__"]], "polars.Config": [[4, 1, 1, "", "load"], [5, 1, 1, "", "restore_defaults"], [6, 1, 1, "", "save"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_fmt_str_lengths"], [9, 1, 1, "", "set_tbl_cell_alignment"], [10, 1, 1, "", "set_tbl_cols"], [11, 1, 1, "", "set_tbl_column_data_type_inline"], [12, 1, 1, "", "set_tbl_dataframe_shape_below"], [13, 1, 1, "", "set_tbl_formatting"], [14, 1, 1, "", "set_tbl_hide_column_data_types"], [15, 1, 1, "", "set_tbl_hide_column_names"], [16, 1, 1, "", "set_tbl_hide_dataframe_shape"], [17, 1, 1, "", "set_tbl_hide_dtype_separator"], [18, 1, 1, "", "set_tbl_rows"], [19, 1, 1, "", "set_tbl_width_chars"], [20, 1, 1, "", "set_verbose"], [21, 1, 1, "", "state"]], "polars.DataFrame": [[110, 1, 1, "", "apply"], [111, 1, 1, "", "cleared"], [112, 1, 1, "", "clone"], [113, 2, 1, "", "columns"], [114, 1, 1, "", "describe"], [115, 1, 1, "", "drop"], [116, 1, 1, "", "drop_in_place"], [117, 1, 1, "", "drop_nulls"], [118, 2, 1, "", "dtypes"], [119, 1, 1, "", "estimated_size"], [120, 1, 1, "", "explode"], [121, 1, 1, "", "extend"], [122, 1, 1, "", "fill_nan"], [123, 1, 1, "", "fill_null"], [124, 1, 1, "", "filter"], [125, 1, 1, "", "find_idx_by_name"], [126, 1, 1, "", "fold"], [127, 1, 1, "", "frame_equal"], [128, 1, 1, "", "get_column"], [129, 1, 1, "", "get_columns"], [130, 1, 1, "", "groupby"], [131, 1, 1, "", "groupby_dynamic"], [132, 1, 1, "", "groupby_rolling"], [133, 1, 1, "", "hash_rows"], [134, 1, 1, "", "head"], [135, 2, 1, "", "height"], [136, 1, 1, "", "hstack"], [137, 1, 1, "", "insert_at_idx"], [138, 1, 1, "", "interpolate"], [139, 1, 1, "", "is_duplicated"], [140, 1, 1, "", "is_empty"], [141, 1, 1, "", "is_unique"], [142, 1, 1, "", "join"], [143, 1, 1, "", "join_asof"], [144, 1, 1, "", "lazy"], [145, 1, 1, "", "limit"], [146, 1, 1, "", "max"], [147, 1, 1, "", "mean"], [148, 1, 1, "", "median"], [149, 1, 1, "", "melt"], [150, 1, 1, "", "min"], [151, 1, 1, "", "n_chunks"], [152, 1, 1, "", "n_unique"], [153, 1, 1, "", "null_count"], [154, 1, 1, "", "partition_by"], [155, 1, 1, "", "pipe"], [156, 1, 1, "", "pivot"], [157, 1, 1, "", "product"], [158, 1, 1, "", "quantile"], [159, 1, 1, "", "rechunk"], [160, 1, 1, "", "rename"], [161, 1, 1, "", "replace"], [162, 1, 1, "", "replace_at_idx"], [163, 1, 1, "", "reverse"], [164, 1, 1, "", "row"], [165, 1, 1, "", "rows"], [166, 1, 1, "", "sample"], [167, 2, 1, "", "schema"], [168, 1, 1, "", "select"], [169, 2, 1, "", "shape"], [170, 1, 1, "", "shift"], [171, 1, 1, "", "shift_and_fill"], [172, 1, 1, "", "shrink_to_fit"], [173, 1, 1, "", "slice"], [174, 1, 1, "", "sort"], [175, 1, 1, "", "std"], [176, 1, 1, "", "sum"], [177, 1, 1, "", "tail"], [178, 1, 1, "", "take_every"], [179, 1, 1, "", "to_arrow"], [180, 1, 1, "", "to_dict"], [181, 1, 1, "", "to_dicts"], [182, 1, 1, "", "to_dummies"], [183, 1, 1, "", "to_numpy"], [184, 1, 1, "", "to_pandas"], [185, 1, 1, "", "to_series"], [186, 1, 1, "", "to_struct"], [187, 1, 1, "", "transpose"], [188, 1, 1, "", "unique"], [189, 1, 1, "", "unnest"], [190, 1, 1, "", "unstack"], [191, 1, 1, "", "upsample"], [192, 1, 1, "", "var"], [193, 1, 1, "", "vstack"], [194, 2, 1, "", "width"], [195, 1, 1, "", "with_column"], [196, 1, 1, "", "with_columns"], [197, 1, 1, "", "with_row_count"], [22, 1, 1, "", "write_avro"], [23, 1, 1, "", "write_csv"], [24, 1, 1, "", "write_ipc"], [25, 1, 1, "", "write_json"], [26, 1, 1, "", "write_ndjson"], [27, 1, 1, "", "write_parquet"]], "polars.DataType": [[28, 1, 1, "", "__init__"]], "polars.Date": [[29, 1, 1, "", "__init__"]], "polars.Datetime": [[30, 1, 1, "", "__init__"]], "polars.Duration": [[31, 1, 1, "", "__init__"]], "polars.Expr": [[234, 1, 1, "", "abs"], [235, 1, 1, "", "agg_groups"], [236, 1, 1, "", "alias"], [237, 1, 1, "", "all"], [238, 1, 1, "", "any"], [239, 1, 1, "", "append"], [240, 1, 1, "", "apply"], [241, 1, 1, "", "arccos"], [242, 1, 1, "", "arccosh"], [243, 1, 1, "", "arcsin"], [244, 1, 1, "", "arcsinh"], [245, 1, 1, "", "arctan"], [246, 1, 1, "", "arctanh"], [247, 1, 1, "", "arg_max"], [248, 1, 1, "", "arg_min"], [249, 1, 1, "", "arg_sort"], [250, 1, 1, "", "arg_unique"], [251, 1, 1, "", "argsort"], [275, 1, 1, "", "backward_fill"], [276, 1, 1, "", "cast"], [278, 1, 1, "", "ceil"], [279, 1, 1, "", "clip"], [280, 1, 1, "", "clip_max"], [281, 1, 1, "", "clip_min"], [282, 1, 1, "", "cos"], [283, 1, 1, "", "cosh"], [284, 1, 1, "", "count"], [285, 1, 1, "", "cumcount"], [286, 1, 1, "", "cummax"], [287, 1, 1, "", "cummin"], [288, 1, 1, "", "cumprod"], [289, 1, 1, "", "cumsum"], [290, 1, 1, "", "cumulative_eval"], [291, 1, 1, "", "diff"], [292, 1, 1, "", "dot"], [293, 1, 1, "", "drop_nans"], [294, 1, 1, "", "drop_nulls"], [327, 1, 1, "", "entropy"], [328, 1, 1, "", "ewm_mean"], [329, 1, 1, "", "ewm_std"], [330, 1, 1, "", "ewm_var"], [331, 1, 1, "", "exclude"], [332, 1, 1, "", "exp"], [333, 1, 1, "", "explode"], [334, 1, 1, "", "extend_constant"], [335, 1, 1, "", "fill_nan"], [336, 1, 1, "", "fill_null"], [337, 1, 1, "", "filter"], [338, 1, 1, "", "first"], [339, 1, 1, "", "flatten"], [340, 1, 1, "", "floor"], [341, 1, 1, "", "forward_fill"], [342, 1, 1, "", "hash"], [343, 1, 1, "", "head"], [344, 1, 1, "", "inspect"], [345, 1, 1, "", "interpolate"], [346, 1, 1, "", "is_between"], [347, 1, 1, "", "is_duplicated"], [348, 1, 1, "", "is_finite"], [349, 1, 1, "", "is_first"], [350, 1, 1, "", "is_in"], [351, 1, 1, "", "is_infinite"], [352, 1, 1, "", "is_nan"], [353, 1, 1, "", "is_not"], [354, 1, 1, "", "is_not_nan"], [355, 1, 1, "", "is_not_null"], [356, 1, 1, "", "is_null"], [357, 1, 1, "", "is_unique"], [358, 1, 1, "", "keep_name"], [359, 1, 1, "", "kurtosis"], [360, 1, 1, "", "last"], [361, 1, 1, "", "len"], [362, 1, 1, "", "limit"], [363, 1, 1, "", "list"], [364, 1, 1, "", "log"], [365, 1, 1, "", "log10"], [366, 1, 1, "", "lower_bound"], [367, 1, 1, "", "map"], [368, 1, 1, "", "map_alias"], [369, 1, 1, "", "max"], [370, 1, 1, "", "mean"], [371, 1, 1, "", "median"], [376, 1, 1, "", "min"], [377, 1, 1, "", "mode"], [378, 1, 1, "", "n_unique"], [379, 1, 1, "", "nan_max"], [380, 1, 1, "", "nan_min"], [381, 1, 1, "", "null_count"], [382, 1, 1, "", "over"], [383, 1, 1, "", "pct_change"], [384, 1, 1, "", "pow"], [385, 1, 1, "", "prefix"], [386, 1, 1, "", "product"], [387, 1, 1, "", "quantile"], [388, 1, 1, "", "rank"], [389, 1, 1, "", "rechunk"], [390, 1, 1, "", "reinterpret"], [391, 1, 1, "", "repeat_by"], [392, 1, 1, "", "reshape"], [393, 1, 1, "", "reverse"], [394, 1, 1, "", "rolling_apply"], [395, 1, 1, "", "rolling_max"], [396, 1, 1, "", "rolling_mean"], [397, 1, 1, "", "rolling_median"], [398, 1, 1, "", "rolling_min"], [399, 1, 1, "", "rolling_quantile"], [400, 1, 1, "", "rolling_skew"], [401, 1, 1, "", "rolling_std"], [402, 1, 1, "", "rolling_sum"], [403, 1, 1, "", "rolling_var"], [404, 1, 1, "", "round"], [405, 1, 1, "", "sample"], [406, 1, 1, "", "search_sorted"], [407, 1, 1, "", "set_sorted"], [408, 1, 1, "", "shift"], [409, 1, 1, "", "shift_and_fill"], [410, 1, 1, "", "shrink_dtype"], [411, 1, 1, "", "shuffle"], [412, 1, 1, "", "sign"], [413, 1, 1, "", "sin"], [414, 1, 1, "", "sinh"], [415, 1, 1, "", "skew"], [416, 1, 1, "", "slice"], [417, 1, 1, "", "sort"], [418, 1, 1, "", "sort_by"], [419, 1, 1, "", "sqrt"], [420, 1, 1, "", "std"], [450, 1, 1, "", "suffix"], [451, 1, 1, "", "sum"], [452, 1, 1, "", "tail"], [453, 1, 1, "", "take"], [454, 1, 1, "", "take_every"], [455, 1, 1, "", "tan"], [456, 1, 1, "", "tanh"], [457, 1, 1, "", "to_physical"], [458, 1, 1, "", "top_k"], [459, 1, 1, "", "unique"], [460, 1, 1, "", "unique_counts"], [461, 1, 1, "", "upper_bound"], [462, 1, 1, "", "value_counts"], [463, 1, 1, "", "var"], [464, 1, 1, "", "where"]], "polars.Expr.arr": [[252, 1, 1, "", "arg_max"], [253, 1, 1, "", "arg_min"], [254, 1, 1, "", "concat"], [255, 1, 1, "", "contains"], [256, 1, 1, "", "diff"], [257, 1, 1, "", "eval"], [258, 1, 1, "", "first"], [259, 1, 1, "", "get"], [260, 1, 1, "", "head"], [261, 1, 1, "", "join"], [262, 1, 1, "", "last"], [263, 1, 1, "", "lengths"], [264, 1, 1, "", "max"], [265, 1, 1, "", "mean"], [266, 1, 1, "", "min"], [267, 1, 1, "", "reverse"], [268, 1, 1, "", "shift"], [269, 1, 1, "", "slice"], [270, 1, 1, "", "sort"], [271, 1, 1, "", "sum"], [272, 1, 1, "", "tail"], [273, 1, 1, "", "to_struct"], [274, 1, 1, "", "unique"]], "polars.Expr.cat": [[277, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[295, 1, 1, "", "cast_time_unit"], [296, 1, 1, "", "cast_time_zone"], [297, 1, 1, "", "day"], [298, 1, 1, "", "days"], [299, 1, 1, "", "epoch"], [300, 1, 1, "", "hour"], [301, 1, 1, "", "hours"], [302, 1, 1, "", "iso_year"], [303, 1, 1, "", "microsecond"], [304, 1, 1, "", "microseconds"], [305, 1, 1, "", "millisecond"], [306, 1, 1, "", "milliseconds"], [307, 1, 1, "", "minute"], [308, 1, 1, "", "minutes"], [309, 1, 1, "", "month"], [310, 1, 1, "", "nanosecond"], [311, 1, 1, "", "nanoseconds"], [312, 1, 1, "", "offset_by"], [313, 1, 1, "", "ordinal_day"], [314, 1, 1, "", "quarter"], [315, 1, 1, "", "round"], [316, 1, 1, "", "second"], [317, 1, 1, "", "seconds"], [318, 1, 1, "", "strftime"], [319, 1, 1, "", "timestamp"], [320, 1, 1, "", "truncate"], [321, 1, 1, "", "tz_localize"], [322, 1, 1, "", "week"], [323, 1, 1, "", "weekday"], [324, 1, 1, "", "with_time_unit"], [325, 1, 1, "", "with_time_zone"], [326, 1, 1, "", "year"]], "polars.Expr.meta": [[372, 1, 1, "", "output_name"], [373, 1, 1, "", "pop"], [374, 1, 1, "", "root_names"], [375, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[421, 1, 1, "", "concat"], [422, 1, 1, "", "contains"], [423, 1, 1, "", "count_match"], [424, 1, 1, "", "decode"], [425, 1, 1, "", "encode"], [426, 1, 1, "", "ends_with"], [427, 1, 1, "", "extract"], [428, 1, 1, "", "extract_all"], [429, 1, 1, "", "json_path_match"], [430, 1, 1, "", "lengths"], [431, 1, 1, "", "ljust"], [432, 1, 1, "", "lstrip"], [433, 1, 1, "", "n_chars"], [434, 1, 1, "", "replace"], [435, 1, 1, "", "replace_all"], [436, 1, 1, "", "rjust"], [437, 1, 1, "", "rstrip"], [438, 1, 1, "", "slice"], [439, 1, 1, "", "split"], [440, 1, 1, "", "split_exact"], [441, 1, 1, "", "splitn"], [442, 1, 1, "", "starts_with"], [443, 1, 1, "", "strip"], [444, 1, 1, "", "strptime"], [445, 1, 1, "", "to_lowercase"], [446, 1, 1, "", "to_uppercase"], [447, 1, 1, "", "zfill"]], "polars.Expr.struct": [[448, 1, 1, "", "field"], [449, 1, 1, "", "rename_fields"]], "polars.Float32": [[32, 1, 1, "", "__init__"]], "polars.Float64": [[33, 1, 1, "", "__init__"]], "polars.Int16": [[34, 1, 1, "", "__init__"]], "polars.Int32": [[35, 1, 1, "", "__init__"]], "polars.Int64": [[36, 1, 1, "", "__init__"]], "polars.Int8": [[37, 1, 1, "", "__init__"]], "polars.LazyFrame": [[528, 1, 1, "", "cache"], [529, 1, 1, "", "cleared"], [530, 1, 1, "", "clone"], [531, 1, 1, "", "collect"], [532, 2, 1, "", "columns"], [533, 1, 1, "", "describe_optimized_plan"], [534, 1, 1, "", "describe_plan"], [535, 1, 1, "", "drop"], [536, 1, 1, "", "drop_nulls"], [537, 2, 1, "", "dtypes"], [538, 1, 1, "", "explode"], [539, 1, 1, "", "fetch"], [540, 1, 1, "", "fill_nan"], [541, 1, 1, "", "fill_null"], [542, 1, 1, "", "filter"], [543, 1, 1, "", "first"], [544, 1, 1, "", "from_json"], [545, 1, 1, "", "groupby"], [546, 1, 1, "", "groupby_dynamic"], [547, 1, 1, "", "groupby_rolling"], [548, 1, 1, "", "head"], [549, 1, 1, "", "inspect"], [550, 1, 1, "", "interpolate"], [551, 1, 1, "", "join"], [552, 1, 1, "", "join_asof"], [553, 1, 1, "", "last"], [554, 1, 1, "", "lazy"], [555, 1, 1, "", "limit"], [556, 1, 1, "", "map"], [557, 1, 1, "", "max"], [558, 1, 1, "", "mean"], [559, 1, 1, "", "median"], [560, 1, 1, "", "melt"], [561, 1, 1, "", "min"], [562, 1, 1, "", "pipe"], [563, 1, 1, "", "profile"], [564, 1, 1, "", "quantile"], [565, 1, 1, "", "read_json"], [566, 1, 1, "", "rename"], [567, 1, 1, "", "reverse"], [568, 2, 1, "", "schema"], [569, 1, 1, "", "select"], [570, 1, 1, "", "shift"], [571, 1, 1, "", "shift_and_fill"], [572, 1, 1, "", "show_graph"], [573, 1, 1, "", "slice"], [574, 1, 1, "", "sort"], [575, 1, 1, "", "std"], [576, 1, 1, "", "sum"], [577, 1, 1, "", "tail"], [578, 1, 1, "", "take_every"], [579, 1, 1, "", "unique"], [580, 1, 1, "", "unnest"], [581, 1, 1, "", "var"], [582, 2, 1, "", "width"], [583, 1, 1, "", "with_column"], [584, 1, 1, "", "with_columns"], [585, 1, 1, "", "with_context"], [586, 1, 1, "", "with_row_count"], [587, 1, 1, "", "write_json"]], "polars.List": [[38, 1, 1, "", "__init__"]], "polars.Null": [[39, 1, 1, "", "__init__"]], "polars.Object": [[40, 1, 1, "", "__init__"]], "polars.SQLContext": [[41, 1, 1, "", "execute"], [42, 1, 1, "", "query"], [43, 1, 1, "", "register"]], "polars.Series": [[599, 1, 1, "", "abs"], [600, 1, 1, "", "alias"], [601, 1, 1, "", "all"], [602, 1, 1, "", "any"], [603, 1, 1, "", "append"], [604, 1, 1, "", "apply"], [605, 1, 1, "", "arccos"], [606, 1, 1, "", "arccosh"], [607, 1, 1, "", "arcsin"], [608, 1, 1, "", "arcsinh"], [609, 1, 1, "", "arctan"], [610, 1, 1, "", "arctanh"], [611, 1, 1, "", "arg_max"], [612, 1, 1, "", "arg_min"], [613, 1, 1, "", "arg_sort"], [614, 1, 1, "", "arg_true"], [615, 1, 1, "", "arg_unique"], [616, 1, 1, "", "argsort"], [617, 3, 1, "", "arr"], [641, 1, 1, "", "cast"], [642, 3, 1, "", "cat"], [644, 1, 1, "", "ceil"], [645, 1, 1, "", "chunk_lengths"], [646, 1, 1, "", "cleared"], [647, 1, 1, "", "clip"], [648, 1, 1, "", "clip_max"], [649, 1, 1, "", "clip_min"], [650, 1, 1, "", "clone"], [651, 1, 1, "", "cos"], [652, 1, 1, "", "cosh"], [653, 1, 1, "", "cummax"], [654, 1, 1, "", "cummin"], [655, 1, 1, "", "cumprod"], [656, 1, 1, "", "cumsum"], [657, 1, 1, "", "cumulative_eval"], [658, 1, 1, "", "describe"], [659, 1, 1, "", "diff"], [660, 1, 1, "", "dot"], [661, 1, 1, "", "drop_nans"], [662, 1, 1, "", "drop_nulls"], [663, 3, 1, "", "dt"], [700, 2, 1, "", "dtype"], [701, 1, 1, "", "entropy"], [702, 1, 1, "", "estimated_size"], [703, 1, 1, "", "ewm_mean"], [704, 1, 1, "", "ewm_std"], [705, 1, 1, "", "ewm_var"], [706, 1, 1, "", "exp"], [707, 1, 1, "", "explode"], [708, 1, 1, "", "extend_constant"], [709, 1, 1, "", "fill_nan"], [710, 1, 1, "", "fill_null"], [711, 1, 1, "", "filter"], [712, 2, 1, "", "flags"], [713, 1, 1, "", "floor"], [714, 1, 1, "", "has_validity"], [715, 1, 1, "", "hash"], [716, 1, 1, "", "head"], [717, 2, 1, "", "inner_dtype"], [718, 1, 1, "", "interpolate"], [719, 1, 1, "", "is_boolean"], [720, 1, 1, "", "is_datelike"], [721, 1, 1, "", "is_duplicated"], [722, 1, 1, "", "is_empty"], [723, 1, 1, "", "is_finite"], [724, 1, 1, "", "is_first"], [725, 1, 1, "", "is_float"], [726, 1, 1, "", "is_in"], [727, 1, 1, "", "is_infinite"], [728, 1, 1, "", "is_nan"], [729, 1, 1, "", "is_not_nan"], [730, 1, 1, "", "is_not_null"], [731, 1, 1, "", "is_null"], [732, 1, 1, "", "is_numeric"], [733, 1, 1, "", "is_unique"], [734, 1, 1, "", "is_utf8"], [735, 1, 1, "", "kurtosis"], [736, 1, 1, "", "len"], [737, 1, 1, "", "limit"], [738, 1, 1, "", "log"], [739, 1, 1, "", "log10"], [740, 1, 1, "", "max"], [741, 1, 1, "", "mean"], [742, 1, 1, "", "median"], [743, 1, 1, "", "min"], [744, 1, 1, "", "mode"], [745, 1, 1, "", "n_chunks"], [746, 1, 1, "", "n_unique"], [747, 2, 1, "", "name"], [748, 1, 1, "", "nan_max"], [749, 1, 1, "", "nan_min"], [750, 1, 1, "", "new_from_index"], [751, 1, 1, "", "null_count"], [752, 1, 1, "", "pct_change"], [753, 1, 1, "", "peak_max"], [754, 1, 1, "", "peak_min"], [755, 1, 1, "", "product"], [756, 1, 1, "", "quantile"], [757, 1, 1, "", "rank"], [758, 1, 1, "", "rechunk"], [759, 1, 1, "", "reinterpret"], [760, 1, 1, "", "rename"], [761, 1, 1, "", "reshape"], [762, 1, 1, "", "reverse"], [763, 1, 1, "", "rolling_apply"], [764, 1, 1, "", "rolling_max"], [765, 1, 1, "", "rolling_mean"], [766, 1, 1, "", "rolling_median"], [767, 1, 1, "", "rolling_min"], [768, 1, 1, "", "rolling_quantile"], [769, 1, 1, "", "rolling_skew"], [770, 1, 1, "", "rolling_std"], [771, 1, 1, "", "rolling_sum"], [772, 1, 1, "", "rolling_var"], [773, 1, 1, "", "round"], [774, 1, 1, "", "sample"], [775, 1, 1, "", "search_sorted"], [776, 1, 1, "", "series_equal"], [777, 1, 1, "", "set"], [778, 1, 1, "", "set_at_idx"], [779, 1, 1, "", "set_sorted"], [780, 2, 1, "", "shape"], [781, 1, 1, "", "shift"], [782, 1, 1, "", "shift_and_fill"], [783, 1, 1, "", "shrink_dtype"], [784, 1, 1, "", "shrink_to_fit"], [785, 1, 1, "", "shuffle"], [786, 1, 1, "", "sign"], [787, 1, 1, "", "sin"], [788, 1, 1, "", "sinh"], [789, 1, 1, "", "skew"], [790, 1, 1, "", "slice"], [791, 1, 1, "", "sort"], [792, 1, 1, "", "sqrt"], [793, 1, 1, "", "std"], [794, 3, 1, "", "str"], [826, 1, 1, "", "sum"], [827, 1, 1, "", "tail"], [828, 1, 1, "", "take"], [829, 1, 1, "", "take_every"], [830, 1, 1, "", "tan"], [831, 1, 1, "", "tanh"], [832, 2, 1, "", "time_unit"], [833, 1, 1, "", "to_arrow"], [834, 1, 1, "", "to_dummies"], [835, 1, 1, "", "to_frame"], [836, 1, 1, "", "to_list"], [837, 1, 1, "", "to_numpy"], [838, 1, 1, "", "to_pandas"], [839, 1, 1, "", "to_physical"], [840, 1, 1, "", "top_k"], [841, 1, 1, "", "unique"], [842, 1, 1, "", "unique_counts"], [843, 1, 1, "", "value_counts"], [844, 1, 1, "", "var"], [845, 1, 1, "", "view"], [846, 1, 1, "", "zip_with"]], "polars.Series.arr": [[618, 1, 1, "", "arg_max"], [619, 1, 1, "", "arg_min"], [620, 1, 1, "", "concat"], [621, 1, 1, "", "contains"], [622, 1, 1, "", "diff"], [623, 1, 1, "", "eval"], [624, 1, 1, "", "first"], [625, 1, 1, "", "get"], [626, 1, 1, "", "head"], [627, 1, 1, "", "join"], [628, 1, 1, "", "last"], [629, 1, 1, "", "lengths"], [630, 1, 1, "", "max"], [631, 1, 1, "", "mean"], [632, 1, 1, "", "min"], [633, 1, 1, "", "reverse"], [634, 1, 1, "", "shift"], [635, 1, 1, "", "slice"], [636, 1, 1, "", "sort"], [637, 1, 1, "", "sum"], [638, 1, 1, "", "tail"], [639, 1, 1, "", "to_struct"], [640, 1, 1, "", "unique"]], "polars.Series.cat": [[643, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[664, 1, 1, "", "cast_time_unit"], [665, 1, 1, "", "cast_time_zone"], [666, 1, 1, "", "day"], [667, 1, 1, "", "days"], [668, 1, 1, "", "epoch"], [669, 1, 1, "", "hour"], [670, 1, 1, "", "hours"], [671, 1, 1, "", "iso_year"], [672, 1, 1, "", "max"], [673, 1, 1, "", "mean"], [674, 1, 1, "", "median"], [675, 1, 1, "", "microsecond"], [676, 1, 1, "", "microseconds"], [677, 1, 1, "", "millisecond"], [678, 1, 1, "", "milliseconds"], [679, 1, 1, "", "min"], [680, 1, 1, "", "minute"], [681, 1, 1, "", "minutes"], [682, 1, 1, "", "month"], [683, 1, 1, "", "nanosecond"], [684, 1, 1, "", "nanoseconds"], [685, 1, 1, "", "offset_by"], [686, 1, 1, "", "ordinal_day"], [687, 1, 1, "", "quarter"], [688, 1, 1, "", "round"], [689, 1, 1, "", "second"], [690, 1, 1, "", "seconds"], [691, 1, 1, "", "strftime"], [692, 1, 1, "", "timestamp"], [693, 1, 1, "", "truncate"], [694, 1, 1, "", "tz_localize"], [695, 1, 1, "", "week"], [696, 1, 1, "", "weekday"], [697, 1, 1, "", "with_time_unit"], [698, 1, 1, "", "with_time_zone"], [699, 1, 1, "", "year"]], "polars.Series.str": [[795, 1, 1, "", "concat"], [796, 1, 1, "", "contains"], [797, 1, 1, "", "count_match"], [798, 1, 1, "", "decode"], [799, 1, 1, "", "encode"], [800, 1, 1, "", "ends_with"], [801, 1, 1, "", "extract"], [802, 1, 1, "", "extract_all"], [803, 1, 1, "", "json_path_match"], [804, 1, 1, "", "lengths"], [805, 1, 1, "", "ljust"], [806, 1, 1, "", "lstrip"], [807, 1, 1, "", "n_chars"], [808, 1, 1, "", "replace"], [809, 1, 1, "", "replace_all"], [810, 1, 1, "", "rjust"], [811, 1, 1, "", "rstrip"], [812, 1, 1, "", "slice"], [813, 1, 1, "", "split"], [814, 1, 1, "", "split_exact"], [815, 1, 1, "", "splitn"], [816, 1, 1, "", "starts_with"], [817, 1, 1, "", "strip"], [818, 1, 1, "", "strptime"], [819, 1, 1, "", "to_lowercase"], [820, 1, 1, "", "to_uppercase"], [821, 1, 1, "", "zfill"]], "polars.Series.struct": [[822, 1, 1, "", "field"], [823, 3, 1, "", "fields"], [824, 1, 1, "", "rename_fields"], [825, 1, 1, "", "to_frame"]], "polars.StringCache": [[44, 1, 1, "", "__init__"]], "polars.Struct": [[45, 1, 1, "", "__init__"]], "polars.Time": [[46, 1, 1, "", "__init__"]], "polars.UInt16": [[47, 1, 1, "", "__init__"]], "polars.UInt32": [[48, 1, 1, "", "__init__"]], "polars.UInt64": [[49, 1, 1, "", "__init__"]], "polars.UInt8": [[50, 1, 1, "", "__init__"]], "polars.Unknown": [[51, 1, 1, "", "__init__"]], "polars.Utf8": [[52, 1, 1, "", "__init__"]], "polars.exceptions": [[60, 5, 1, "", "ArrowError"], [61, 5, 1, "", "ComputeError"], [62, 5, 1, "", "DuplicateError"], [63, 5, 1, "", "InvalidOperationError"], [64, 5, 1, "", "NoDataError"], [65, 5, 1, "", "NoRowsReturned"], [66, 5, 1, "", "NotFoundError"], [67, 5, 1, "", "PanicException"], [68, 5, 1, "", "RowsException"], [69, 5, 1, "", "SchemaError"], [70, 5, 1, "", "ShapeError"], [71, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[80, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[198, 1, 1, "", "agg"], [199, 1, 1, "", "agg_list"], [200, 1, 1, "", "apply"], [201, 1, 1, "", "count"], [202, 1, 1, "", "first"], [203, 1, 1, "", "head"], [204, 1, 1, "", "last"], [205, 1, 1, "", "max"], [206, 1, 1, "", "mean"], [207, 1, 1, "", "median"], [208, 1, 1, "", "min"], [209, 1, 1, "", "n_unique"], [210, 1, 1, "", "pivot"], [211, 1, 1, "", "quantile"], [212, 1, 1, "", "sum"], [213, 1, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[214, 1, 1, "", "count"], [215, 1, 1, "", "first"], [216, 1, 1, "", "last"], [217, 1, 1, "", "max"], [218, 1, 1, "", "mean"], [219, 1, 1, "", "median"], [220, 1, 1, "", "min"], [221, 1, 1, "", "sum"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[588, 1, 1, "", "agg"], [589, 1, 1, "", "apply"], [590, 1, 1, "", "head"], [591, 1, 1, "", "tail"]], "polars.testing": [[99, 4, 1, "", "assert_frame_equal"], [100, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[101, 0, 1, "", "column"], [102, 4, 1, "", "columns"], [103, 4, 1, "", "dataframes"], [104, 4, 1, "", "series"]], "polars.testing.parametric.column": [[101, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"polar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846], "binari": 1, "boolean": [2, 511, 849], "categor": 3, "config": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 108], "load": [4, 108], "restore_default": 5, "save": [6, 108], "set_ascii_t": 7, "set_fmt_str_length": 8, "set_tbl_cell_align": 9, "set_tbl_col": 10, "set_tbl_column_data_type_inlin": 11, "set_tbl_dataframe_shape_below": 12, "set_tbl_format": 13, "set_tbl_hide_column_data_typ": 14, "set_tbl_hide_column_nam": 15, "set_tbl_hide_dataframe_shap": 16, "set_tbl_hide_dtype_separ": 17, "set_tbl_row": 18, "set_tbl_width_char": 19, "set_verbos": 20, "state": [21, 108], "datafram": [22, 23, 24, 25, 26, 27, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 227], "write_avro": 22, "write_csv": 23, "write_ipc": 24, "write_json": [25, 587], "write_ndjson": 26, "write_parquet": 27, "datatyp": 28, "date": [29, 231, 480], "datetim": [30, 481], "durat": [31, 482], "float32": 32, "float64": 33, "int16": 34, "int32": 35, "int64": 36, "int8": 37, "list": [38, 363, 490], "null": 39, "object": 40, "sqlcontext": [41, 42, 43], "execut": 41, "queri": 42, "regist": 43, "stringcach": [44, 524], "struct": [45, 448, 449, 505, 521, 822, 823, 824, 825, 858], "time": [46, 231], "uint16": 47, "uint32": 48, "uint64": 49, "uint8": 50, "unknown": 51, "utf8": 52, "align_fram": 53, "arg_wher": 54, "build_info": 55, "collect_al": 56, "concat": [57, 254, 421, 620, 795], "cut": 58, "date_rang": 59, "except": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 232], "arrowerror": 60, "computeerror": 61, "duplicateerror": 62, "invalidoperationerror": 63, "nodataerror": 64, "norowsreturn": 65, "notfounderror": 66, "panicexcept": 67, "rowsexcept": 68, "schemaerror": 69, "shapeerror": 70, "toomanyrowsreturn": 71, "from_arrow": 72, "from_dict": [73, 74], "from_numpi": 75, "from_panda": 76, "from_record": 77, "get_dummi": 78, "get_idx_typ": 79, "intern": [80, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 588, 589, 590, 591], "batch": 80, "batchedcsvread": [80, 526], "next_batch": 80, "ones": 81, "read_avro": 82, "read_csv": 83, "read_csv_batch": 84, "read_excel": 85, "read_ipc": 86, "read_ipc_schema": 87, "read_json": [88, 565], "read_ndjson": 89, "read_parquet": 90, "read_parquet_schema": 91, "read_sql": 92, "scan_csv": 93, "scan_d": 94, "scan_ipc": 95, "scan_ndjson": 96, "scan_parquet": 97, "show_vers": 98, "test": [99, 100, 101, 102, 103, 104, 861], "assert_frame_equ": 99, "assert_series_equ": 100, "parametr": [101, 102, 103, 104], "column": [101, 102, 113, 513, 532], "seri": [104, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 854], "threadpool_s": 105, "toggle_string_cach": 106, "zero": 107, "option": 108, "set": [108, 777], "unset": 108, "current": 108, "aggreg": [109, 233, 527, 598], "appli": [110, 200, 240, 467, 589, 604], "clear": [111, 529, 646], "clone": [112, 530, 650], "describ": [114, 658], "drop": [115, 535], "drop_in_plac": 116, "drop_nul": [117, 294, 536, 662], "dtype": [118, 537, 700], "estimated_s": [119, 702], "explod": [120, 333, 538, 707], "extend": 121, "fill_nan": [122, 335, 540, 709], "fill_nul": [123, 336, 541, 710], "filter": [124, 337, 542, 711], "find_idx_by_nam": 125, "fold": [126, 486], "frame_equ": 127, "get_column": [128, 129], "groupbi": [130, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 226, 545, 588, 589, 590, 591, 594], "groupby_dynam": [131, 546], "groupby_rol": [132, 547], "hash_row": 133, "head": [134, 203, 260, 343, 489, 548, 590, 626, 716], "height": 135, "hstack": 136, "insert_at_idx": 137, "interpol": [138, 345, 550, 718], "is_dupl": [139, 347, 721], "is_empti": [140, 722], "is_uniqu": [141, 357, 733], "join": [142, 261, 551, 627], "join_asof": [143, 552], "lazi": [144, 524, 554], "limit": [145, 362, 555, 737], "max": [146, 205, 217, 264, 369, 493, 557, 630, 672, 740], "mean": [147, 206, 218, 265, 370, 494, 558, 631, 673, 741], "median": [148, 207, 219, 371, 495, 559, 674, 742], "melt": [149, 560], "min": [150, 208, 220, 266, 376, 496, 561, 632, 679, 743], "n_chunk": [151, 745], "n_uniqu": [152, 209, 378, 497, 746], "null_count": [153, 381, 751], "partition_bi": 154, "pipe": [155, 562], "pivot": [156, 210, 214, 215, 216, 217, 218, 219, 220, 221, 230], "product": [157, 386, 755], "quantil": [158, 211, 387, 499, 564, 756], "rechunk": [159, 389, 758], "renam": [160, 566, 760], "replac": [161, 434, 808], "replace_at_idx": 162, "revers": [163, 267, 393, 567, 633, 762], "row": [164, 165], "sampl": [166, 405, 774], "schema": [167, 568], "select": [168, 229, 502, 519, 569, 597, 856], "shape": [169, 780], "shift": [170, 268, 408, 570, 634, 781], "shift_and_fil": [171, 409, 571, 782], "shrink_to_fit": [172, 784], "slice": [173, 269, 416, 438, 573, 635, 790, 812], "sort": [174, 270, 417, 574, 636, 791], "std": [175, 420, 504, 575, 793], "sum": [176, 212, 221, 271, 451, 506, 576, 637, 826], "tail": [177, 213, 272, 452, 507, 577, 591, 638, 827], "take_everi": [178, 454, 578, 829], "to_arrow": [179, 833], "to_dict": [180, 181], "to_dummi": [182, 834], "to_numpi": [183, 837], "to_panda": [184, 838], "to_seri": 185, "to_struct": [186, 273, 639], "transpos": 187, "uniqu": [188, 274, 459, 579, 640, 841], "unnest": [189, 580], "unstack": 190, "upsampl": 191, "var": [192, 463, 508, 581, 844], "vstack": 193, "width": [194, 582], "with_column": [195, 196, 583, 584], "with_row_count": [197, 586], "agg": [198, 588], "agg_list": 199, "count": [201, 214, 284, 475], "first": [202, 215, 258, 338, 485, 543, 624], "last": [204, 216, 262, 360, 553, 628], "pivotop": [214, 215, 216, 217, 218, 219, 220, 221], "attribut": [222, 592, 848], "comput": [223, 514, 851], "descript": [224, 593, 852], "export": [225, 853], "miscellan": [228, 518, 524, 596, 855], "manipul": [229, 519, 597, 856], "data": 231, "type": 231, "numer": 231, "nest": 231, "other": 231, "function": [231, 515, 524], "expr": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "ab": [234, 599], "agg_group": 235, "alia": [236, 600], "all": [237, 465, 601], "ani": [238, 466, 602], "append": [239, 603], "arcco": [241, 605], "arccosh": [242, 606], "arcsin": [243, 607], "arcsinh": [244, 608], "arctan": [245, 609], "arctanh": [246, 610], "arg_max": [247, 252, 611, 618], "arg_min": [248, 253, 612, 619], "arg_sort": [249, 613], "arg_uniqu": [250, 615], "argsort": [251, 616], "arr": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640], "contain": [255, 422, 621, 796], "diff": [256, 291, 622, 659], "eval": [257, 623], "get": [259, 625], "length": [263, 430, 629, 804], "backward_fil": 275, "cast": [276, 641], "cat": [277, 642, 643], "set_ord": [277, 643], "ceil": [278, 644], "clip": [279, 647], "clip_max": [280, 648], "clip_min": [281, 649], "co": [282, 651], "cosh": [283, 652], "cumcount": 285, "cummax": [286, 653], "cummin": [287, 654], "cumprod": [288, 655], "cumsum": [289, 479, 656], "cumulative_ev": [290, 657], "dot": [292, 660], "drop_nan": [293, 661], "dt": [295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699], "cast_time_unit": [295, 664], "cast_time_zon": [296, 665], "dai": [297, 298, 666, 667], "epoch": [299, 668], "hour": [300, 301, 669, 670], "iso_year": [302, 671], "microsecond": [303, 304, 675, 676], "millisecond": [305, 306, 677, 678], "minut": [307, 308, 680, 681], "month": [309, 682], "nanosecond": [310, 311, 683, 684], "offset_bi": [312, 685], "ordinal_dai": [313, 686], "quarter": [314, 687], "round": [315, 404, 688, 773], "second": [316, 317, 689, 690], "strftime": [318, 691], "timestamp": [319, 692], "truncat": [320, 693], "tz_local": [321, 694], "week": [322, 695], "weekdai": [323, 696], "with_time_unit": [324, 697], "with_time_zon": [325, 698], "year": [326, 699], "entropi": [327, 701], "ewm_mean": [328, 703], "ewm_std": [329, 704], "ewm_var": [330, 705], "exclud": [331, 484], "exp": [332, 706], "extend_const": [334, 708], "flatten": 339, "floor": [340, 713], "forward_fil": 341, "hash": [342, 715], "inspect": [344, 549], "is_between": 346, "is_finit": [348, 723], "is_first": [349, 724], "is_in": [350, 726], "is_infinit": [351, 727], "is_nan": [352, 728], "is_not": 353, "is_not_nan": [354, 729], "is_not_nul": [355, 730], "is_nul": [356, 731], "keep_nam": 358, "kurtosi": [359, 735], "len": [361, 736], "log": [364, 738], "log10": [365, 739], "lower_bound": 366, "map": [367, 492, 556], "map_alia": 368, "meta": [372, 373, 374, 375, 517], "output_nam": 372, "pop": 373, "root_nam": 374, "undo_alias": 375, "mode": [377, 744], "nan_max": [379, 748], "nan_min": [380, 749], "over": 382, "pct_chang": [383, 752], "pow": 384, "prefix": 385, "rank": [388, 757], "reinterpret": [390, 759], "repeat_bi": 391, "reshap": [392, 761], "rolling_appli": [394, 763], "rolling_max": [395, 764], "rolling_mean": [396, 765], "rolling_median": [397, 766], "rolling_min": [398, 767], "rolling_quantil": [399, 768], "rolling_skew": [400, 769], "rolling_std": [401, 770], "rolling_sum": [402, 771], "rolling_var": [403, 772], "search_sort": [406, 775], "set_sort": [407, 779], "shrink_dtyp": [410, 783], "shuffl": [411, 785], "sign": [412, 786], "sin": [413, 787], "sinh": [414, 788], "skew": [415, 789], "sort_bi": 418, "sqrt": [419, 792], "str": [421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821], "count_match": [423, 797], "decod": [424, 798], "encod": [425, 799], "ends_with": [426, 800], "extract": [427, 801], "extract_al": [428, 802], "json_path_match": [429, 803], "ljust": [431, 805], "lstrip": [432, 806], "n_char": [433, 807], "replace_al": [435, 809], "rjust": [436, 810], "rstrip": [437, 811], "split": [439, 813], "split_exact": [440, 814], "splitn": [441, 815], "starts_with": [442, 816], "strip": [443, 817], "strptime": [444, 818], "to_lowercas": [445, 819], "to_uppercas": [446, 820], "zfill": [447, 821], "field": [448, 822, 823], "rename_field": [449, 824], "suffix": 450, "take": [453, 828], "tan": [455, 830], "tanh": [456, 831], "to_phys": [457, 839], "top_k": [458, 840], "unique_count": [460, 842], "upper_bound": 461, "value_count": [462, 843], "where": 464, "arang": 468, "argsort_bi": 469, "avg": 470, "coalesc": 471, "col": 472, "concat_list": 473, "concat_str": 474, "cov": 476, "cumfold": 477, "cumreduc": 478, "element": 483, "format": 487, "group": 488, "lit": 491, "pearson_corr": 498, "reduc": 500, "repeat": 501, "spearman_rank_corr": 503, "when": 509, "arrai": [510, 847], "categori": [512, 850], "name": [513, 747], "express": 516, "string": [520, 857], "tempor": [522, 859], "window": 523, "convers": 524, "eager": 524, "parallel": 524, "api": 525, "refer": 525, "input": 526, "output": 526, "csv": 526, "feather": 526, "ipc": 526, "parquet": 526, "sql": [526, 860], "json": 526, "avro": 526, "excel": 526, "dataset": 526, "lazyfram": [528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 595], "cach": 528, "collect": 531, "describe_optimized_plan": 533, "describe_plan": 534, "fetch": 539, "from_json": 544, "profil": 563, "show_graph": 572, "with_context": 585, "lazygroupbi": [588, 589, 590, 591], "read": 596, "write": 596, "logic": 596, "plan": 596, "arg_tru": 614, "chunk_length": 645, "flag": 712, "has_valid": 714, "inner_dtyp": 717, "is_boolean": 719, "is_datelik": 720, "is_float": 725, "is_numer": 732, "is_utf8": 734, "new_from_index": 750, "peak_max": 753, "peak_min": 754, "series_equ": 776, "set_at_idx": 778, "to_fram": [825, 835], "time_unit": 832, "to_list": 836, "view": 845, "zip_with": 846, "method": 860, "assert": 861, "properti": 861, "base": 861, "strategi": 861, "helper": 861, "util": 862}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.DataFrame.drop_nulls": [[117, "polars-dataframe-drop-nulls"]], "polars.exceptions.NotFoundError": [[66, "polars-exceptions-notfounderror"]], "polars.DataFrame.get_columns": [[129, "polars-dataframe-get-columns"]], "polars.from_numpy": [[75, "polars-from-numpy"]], "polars.show_versions": [[98, "polars-show-versions"]], "polars.DataFrame.fill_null": [[123, "polars-dataframe-fill-null"]], "polars.DataFrame.cleared": [[111, "polars-dataframe-cleared"]], "polars.DataFrame.frame_equal": [[127, "polars-dataframe-frame-equal"]], "polars.DataFrame.fold": [[126, "polars-dataframe-fold"]], "polars.from_dicts": [[74, "polars-from-dicts"]], "polars.scan_ds": [[94, "polars-scan-ds"]], "polars.get_idx_type": [[79, "polars-get-idx-type"]], "polars.DataFrame.apply": [[110, "polars-dataframe-apply"]], "polars.exceptions.ShapeError": [[70, "polars-exceptions-shapeerror"]], "polars.exceptions.TooManyRowsReturned": [[71, "polars-exceptions-toomanyrowsreturned"]], "polars.get_dummies": [[78, "polars-get-dummies"]], "polars.read_ipc_schema": [[87, "polars-read-ipc-schema"]], "polars.read_json": [[88, "polars-read-json"]], "polars.read_sql": [[92, "polars-read-sql"]], "polars.DataFrame.fill_nan": [[122, "polars-dataframe-fill-nan"]], "polars.exceptions.NoRowsReturned": [[65, "polars-exceptions-norowsreturned"]], "polars.scan_ipc": [[95, "polars-scan-ipc"]], "polars.read_excel": [[85, "polars-read-excel"]], "polars.scan_csv": [[93, "polars-scan-csv"]], "polars.DataFrame.estimated_size": [[119, "polars-dataframe-estimated-size"]], "polars.testing.parametric.dataframes": [[103, "polars-testing-parametric-dataframes"]], "polars.DataFrame.filter": [[124, "polars-dataframe-filter"]], "polars.read_ipc": [[86, "polars-read-ipc"]], "polars.testing.assert_frame_equal": [[99, "polars-testing-assert-frame-equal"]], "polars.read_parquet": [[90, "polars-read-parquet"]], "polars.DataFrame.columns": [[113, "polars-dataframe-columns"]], "polars.testing.parametric.column": [[101, "polars-testing-parametric-column"]], "polars.read_csv": [[83, "polars-read-csv"]], "polars.from_pandas": [[76, "polars-from-pandas"]], "polars.testing.assert_series_equal": [[100, "polars-testing-assert-series-equal"]], "polars.DataFrame.find_idx_by_name": [[125, "polars-dataframe-find-idx-by-name"]], "polars.exceptions.SchemaError": [[69, "polars-exceptions-schemaerror"]], "polars.testing.parametric.series": [[104, "polars-testing-parametric-series"]], "polars.ones": [[81, "polars-ones"]], "polars.DataFrame.explode": [[120, "polars-dataframe-explode"]], "polars.from_records": [[77, "polars-from-records"]], "polars.DataFrame.clone": [[112, "polars-dataframe-clone"]], "polars.scan_parquet": [[97, "polars-scan-parquet"]], "polars.read_avro": [[82, "polars-read-avro"]], "polars.from_arrow": [[72, "polars-from-arrow"]], "polars.DataFrame.drop_in_place": [[116, "polars-dataframe-drop-in-place"]], "polars.exceptions.RowsException": [[68, "polars-exceptions-rowsexception"]], "polars.zeros": [[107, "polars-zeros"]], "polars.threadpool_size": [[105, "polars-threadpool-size"]], "polars.DataFrame.extend": [[121, "polars-dataframe-extend"]], "polars.read_csv_batched": [[84, "polars-read-csv-batched"]], "polars.testing.parametric.columns": [[102, "polars-testing-parametric-columns"]], "polars.toggle_string_cache": [[106, "polars-toggle-string-cache"]], "Config": [[108, "config"]], "Config options (set/unset)": [[108, "config-options-set-unset"]], "Config load, save, and current state": [[108, "config-load-save-and-current-state"]], "polars.DataFrame.drop": [[115, "polars-dataframe-drop"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[80, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.DataFrame.get_column": [[128, "polars-dataframe-get-column"]], "polars.exceptions.PanicException": [[67, "polars-exceptions-panicexception"]], "polars.scan_ndjson": [[96, "polars-scan-ndjson"]], "polars.DataFrame.describe": [[114, "polars-dataframe-describe"]], "polars.from_dict": [[73, "polars-from-dict"]], "Aggregation": [[109, "aggregation"], [598, "aggregation"], [527, "aggregation"], [233, "aggregation"]], "polars.read_parquet_schema": [[91, "polars-read-parquet-schema"]], "polars.DataFrame.dtypes": [[118, "polars-dataframe-dtypes"]], "polars.read_ndjson": [[89, "polars-read-ndjson"]], "polars.Datetime": [[30, "polars-datetime"]], "polars.UInt64": [[49, "polars-uint64"]], "polars.DataFrame.write_ipc": [[24, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_json": [[25, "polars-dataframe-write-json"]], "polars.Config.set_ascii_tables": [[7, "polars-config-set-ascii-tables"]], "polars.Struct": [[45, "polars-struct"]], "polars.arg_where": [[54, "polars-arg-where"]], "polars.Config.load": [[4, "polars-config-load"]], "polars.Float32": [[32, "polars-float32"]], "polars.Config.set_tbl_width_chars": [[19, "polars-config-set-tbl-width-chars"]], "polars.Config.restore_defaults": [[5, "polars-config-restore-defaults"]], "polars.DataFrame.write_ndjson": [[26, "polars-dataframe-write-ndjson"]], "polars.Int32": [[35, "polars-int32"]], "polars.DataFrame.write_avro": [[22, "polars-dataframe-write-avro"]], "polars.exceptions.ArrowError": [[60, "polars-exceptions-arrowerror"]], "polars.Config.set_tbl_hide_column_data_types": [[14, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_dataframe_shape_below": [[12, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Time": [[46, "polars-time"]], "polars.Config.set_tbl_column_data_type_inline": [[11, "polars-config-set-tbl-column-data-type-inline"]], "polars.Object": [[40, "polars-object"]], "polars.exceptions.ComputeError": [[61, "polars-exceptions-computeerror"]], "polars.exceptions.DuplicateError": [[62, "polars-exceptions-duplicateerror"]], "polars.Config.state": [[21, "polars-config-state"]], "polars.Unknown": [[51, "polars-unknown"]], "polars.DataFrame.write_csv": [[23, "polars-dataframe-write-csv"]], "polars.cut": [[58, "polars-cut"]], "polars.Config.set_fmt_str_lengths": [[8, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_verbose": [[20, "polars-config-set-verbose"]], "polars.StringCache": [[44, "polars-stringcache"]], "polars.collect_all": [[56, "polars-collect-all"]], "polars.exceptions.NoDataError": [[64, "polars-exceptions-nodataerror"]], "polars.Utf8": [[52, "polars-utf8"]], "polars.SQLContext.query": [[42, "polars-sqlcontext-query"]], "polars.Config.set_tbl_rows": [[18, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_cols": [[10, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_hide_column_names": [[15, "polars-config-set-tbl-hide-column-names"]], "polars.Boolean": [[2, "polars-boolean"]], "polars.DataType": [[28, "polars-datatype"]], "polars.Int16": [[34, "polars-int16"]], "polars.Null": [[39, "polars-null"]], "polars.exceptions.InvalidOperationError": [[63, "polars-exceptions-invalidoperationerror"]], "polars.UInt32": [[48, "polars-uint32"]], "polars.Config.set_tbl_hide_dtype_separator": [[17, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Int8": [[37, "polars-int8"]], "polars.Float64": [[33, "polars-float64"]], "polars.Config.set_tbl_formatting": [[13, "polars-config-set-tbl-formatting"]], "polars.Config.save": [[6, "polars-config-save"]], "polars.Categorical": [[3, "polars-categorical"]], "polars.Config.set_tbl_cell_alignment": [[9, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_hide_dataframe_shape": [[16, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.date_range": [[59, "polars-date-range"]], "polars.Binary": [[1, "polars-binary"]], "polars.Date": [[29, "polars-date"]], "polars.Duration": [[31, "polars-duration"]], "polars.List": [[38, "polars-list"]], "polars.SQLContext.execute": [[41, "polars-sqlcontext-execute"]], "polars.DataFrame.write_parquet": [[27, "polars-dataframe-write-parquet"]], "polars.UInt8": [[50, "polars-uint8"]], "polars.Int64": [[36, "polars-int64"]], "polars.align_frames": [[53, "polars-align-frames"]], "polars.concat": [[57, "polars-concat"]], "polars.build_info": [[55, "polars-build-info"]], "polars.SQLContext.register": [[43, "polars-sqlcontext-register"]], "polars.UInt16": [[47, "polars-uint16"]], "polars.Series.to_pandas": [[838, "polars-series-to-pandas"]], "polars.Series.shrink_dtype": [[783, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[784, "polars-series-shrink-to-fit"]], "polars.Series.to_arrow": [[833, "polars-series-to-arrow"]], "polars.Series.struct.fields": [[823, "polars-series-struct-fields"]], "polars.Series.to_numpy": [[837, "polars-series-to-numpy"]], "polars.Series.str.lengths": [[804, "polars-series-str-lengths"]], "polars.Series.str.lstrip": [[806, "polars-series-str-lstrip"]], "polars.Series.str.count_match": [[797, "polars-series-str-count-match"]], "polars.Series.str.encode": [[799, "polars-series-str-encode"]], "polars.Series.str.split": [[813, "polars-series-str-split"]], "polars.Series.to_dummies": [[834, "polars-series-to-dummies"]], "polars.Series.sqrt": [[792, "polars-series-sqrt"]], "polars.Series.shift": [[781, "polars-series-shift"]], "polars.Series.unique": [[841, "polars-series-unique"]], "polars.Series.sign": [[786, "polars-series-sign"]], "polars.Series.struct.to_frame": [[825, "polars-series-struct-to-frame"]], "polars.Series.str.replace_all": [[809, "polars-series-str-replace-all"]], "polars.Series.str.extract": [[801, "polars-series-str-extract"]], "polars.Series.str.slice": [[812, "polars-series-str-slice"]], "polars.Series.str.to_uppercase": [[820, "polars-series-str-to-uppercase"]], "polars.Series.str.splitn": [[815, "polars-series-str-splitn"]], "polars.Series.sum": [[826, "polars-series-sum"]], "polars.Series.struct.rename_fields": [[824, "polars-series-struct-rename-fields"]], "polars.Series.str.strptime": [[818, "polars-series-str-strptime"]], "polars.Series.unique_counts": [[842, "polars-series-unique-counts"]], "polars.Series.to_physical": [[839, "polars-series-to-physical"]], "polars.Series.shift_and_fill": [[782, "polars-series-shift-and-fill"]], "polars.Series.var": [[844, "polars-series-var"]], "polars.Series.str.zfill": [[821, "polars-series-str-zfill"]], "polars.Series.tanh": [[831, "polars-series-tanh"]], "polars.Series.str.extract_all": [[802, "polars-series-str-extract-all"]], "polars.Series.shuffle": [[785, "polars-series-shuffle"]], "polars.Series.tail": [[827, "polars-series-tail"]], "polars.Series.str.n_chars": [[807, "polars-series-str-n-chars"]], "polars.Series.sin": [[787, "polars-series-sin"]], "polars.Series.to_list": [[836, "polars-series-to-list"]], "polars.Series.shape": [[780, "polars-series-shape"]], "polars.Series.str.rstrip": [[811, "polars-series-str-rstrip"]], "polars.Series.tan": [[830, "polars-series-tan"]], "polars.Series.top_k": [[840, "polars-series-top-k"]], "polars.Series.take_every": [[829, "polars-series-take-every"]], "polars.Series.str.contains": [[796, "polars-series-str-contains"]], "polars.Series.struct.field": [[822, "polars-series-struct-field"]], "polars.Series.sort": [[791, "polars-series-sort"]], "polars.Series.slice": [[790, "polars-series-slice"]], "polars.Series.str.json_path_match": [[803, "polars-series-str-json-path-match"]], "polars.Series.str.replace": [[808, "polars-series-str-replace"]], "polars.Series.take": [[828, "polars-series-take"]], "polars.Series.str.concat": [[795, "polars-series-str-concat"]], "polars.Series.to_frame": [[835, "polars-series-to-frame"]], "polars.Series.str.starts_with": [[816, "polars-series-str-starts-with"]], "polars.Series.str.strip": [[817, "polars-series-str-strip"]], "polars.Series.str": [[794, "polars-series-str"]], "polars.Series.str.decode": [[798, "polars-series-str-decode"]], "polars.Series.str.rjust": [[810, "polars-series-str-rjust"]], "polars.Series.time_unit": [[832, "polars-series-time-unit"]], "polars.Series.value_counts": [[843, "polars-series-value-counts"]], "polars.Series.std": [[793, "polars-series-std"]], "polars.Series.str.ends_with": [[800, "polars-series-str-ends-with"]], "polars.Series.str.split_exact": [[814, "polars-series-str-split-exact"]], "polars.Series.str.to_lowercase": [[819, "polars-series-str-to-lowercase"]], "polars.Series.skew": [[789, "polars-series-skew"]], "polars.Series.sinh": [[788, "polars-series-sinh"]], "polars.Series.str.ljust": [[805, "polars-series-str-ljust"]], "polars.Series.rolling_sum": [[771, "polars-series-rolling-sum"]], "polars.Series.min": [[743, "polars-series-min"]], "polars.Series.name": [[747, "polars-series-name"]], "polars.Series.rolling_std": [[770, "polars-series-rolling-std"]], "polars.Series.is_empty": [[722, "polars-series-is-empty"]], "polars.Series.reverse": [[762, "polars-series-reverse"]], "polars.Series.reinterpret": [[759, "polars-series-reinterpret"]], "polars.Series.hash": [[715, "polars-series-hash"]], "polars.Series.nan_min": [[749, "polars-series-nan-min"]], "polars.Series.interpolate": [[718, "polars-series-interpolate"]], "polars.Series.round": [[773, "polars-series-round"]], "polars.Series.is_not_nan": [[729, "polars-series-is-not-nan"]], "polars.Series.set_at_idx": [[778, "polars-series-set-at-idx"]], "polars.Series.rechunk": [[758, "polars-series-rechunk"]], "polars.Series.set_sorted": [[779, "polars-series-set-sorted"]], "polars.Series.is_duplicated": [[721, "polars-series-is-duplicated"]], "polars.Series.is_boolean": [[719, "polars-series-is-boolean"]], "polars.Series.limit": [[737, "polars-series-limit"]], "polars.Series.log10": [[739, "polars-series-log10"]], "polars.Series.max": [[740, "polars-series-max"]], "polars.Series.is_not_null": [[730, "polars-series-is-not-null"]], "polars.Series.nan_max": [[748, "polars-series-nan-max"]], "polars.Series.is_null": [[731, "polars-series-is-null"]], "polars.Series.n_chunks": [[745, "polars-series-n-chunks"]], "polars.Series.product": [[755, "polars-series-product"]], "polars.Series.len": [[736, "polars-series-len"]], "polars.Series.new_from_index": [[750, "polars-series-new-from-index"]], "polars.Series.reshape": [[761, "polars-series-reshape"]], "polars.Series.n_unique": [[746, "polars-series-n-unique"]], "polars.Series.null_count": [[751, "polars-series-null-count"]], "polars.Series.mode": [[744, "polars-series-mode"]], "polars.Series.rolling_min": [[767, "polars-series-rolling-min"]], "polars.Series.kurtosis": [[735, "polars-series-kurtosis"]], "polars.Series.is_utf8": [[734, "polars-series-is-utf8"]], "polars.Series.is_infinite": [[727, "polars-series-is-infinite"]], "polars.Series.series_equal": [[776, "polars-series-series-equal"]], "polars.Series.is_float": [[725, "polars-series-is-float"]], "polars.Series.median": [[742, "polars-series-median"]], "polars.Series.peak_max": [[753, "polars-series-peak-max"]], "polars.Series.is_in": [[726, "polars-series-is-in"]], "polars.Series.rank": [[757, "polars-series-rank"]], "polars.Series.rename": [[760, "polars-series-rename"]], "polars.Series.sample": [[774, "polars-series-sample"]], "polars.Series.set": [[777, "polars-series-set"]], "polars.Series.mean": [[741, "polars-series-mean"]], "polars.Series.quantile": [[756, "polars-series-quantile"]], "polars.Series.rolling_skew": [[769, "polars-series-rolling-skew"]], "polars.Series.rolling_apply": [[763, "polars-series-rolling-apply"]], "polars.Series.rolling_mean": [[765, "polars-series-rolling-mean"]], "polars.Series.head": [[716, "polars-series-head"]], "polars.Series.log": [[738, "polars-series-log"]], "polars.Series.is_nan": [[728, "polars-series-is-nan"]], "polars.Series.peak_min": [[754, "polars-series-peak-min"]], "polars.Series.is_datelike": [[720, "polars-series-is-datelike"]], "polars.Series.rolling_max": [[764, "polars-series-rolling-max"]], "polars.Series.rolling_quantile": [[768, "polars-series-rolling-quantile"]], "polars.Series.inner_dtype": [[717, "polars-series-inner-dtype"]], "polars.Series.is_numeric": [[732, "polars-series-is-numeric"]], "polars.Series.pct_change": [[752, "polars-series-pct-change"]], "polars.Series.is_finite": [[723, "polars-series-is-finite"]], "polars.Series.is_unique": [[733, "polars-series-is-unique"]], "polars.Series.rolling_var": [[772, "polars-series-rolling-var"]], "polars.Series.rolling_median": [[766, "polars-series-rolling-median"]], "polars.Series.is_first": [[724, "polars-series-is-first"]], "polars.Series.search_sorted": [[775, "polars-series-search-sorted"]], "polars.Series.dt.hours": [[670, "polars-series-dt-hours"]], "polars.Series.dt.quarter": [[687, "polars-series-dt-quarter"]], "polars.Series.entropy": [[701, "polars-series-entropy"]], "polars.Series.dt.round": [[688, "polars-series-dt-round"]], "polars.Series.cumprod": [[655, "polars-series-cumprod"]], "polars.Series.cummin": [[654, "polars-series-cummin"]], "polars.Series.dt.day": [[666, "polars-series-dt-day"]], "polars.Series.dt.nanosecond": [[683, "polars-series-dt-nanosecond"]], "polars.Series.dt.median": [[674, "polars-series-dt-median"]], "polars.Series.dt.timestamp": [[692, "polars-series-dt-timestamp"]], "polars.Series.drop_nans": [[661, "polars-series-drop-nans"]], "polars.Series.dt": [[663, "polars-series-dt"]], "polars.Series.dt.millisecond": [[677, "polars-series-dt-millisecond"]], "polars.Series.fill_nan": [[709, "polars-series-fill-nan"]], "polars.Series.cumulative_eval": [[657, "polars-series-cumulative-eval"]], "polars.Series.dot": [[660, "polars-series-dot"]], "polars.Series.dt.week": [[695, "polars-series-dt-week"]], "polars.Series.has_validity": [[714, "polars-series-has-validity"]], "polars.Series.dt.ordinal_day": [[686, "polars-series-dt-ordinal-day"]], "polars.Series.dt.nanoseconds": [[684, "polars-series-dt-nanoseconds"]], "polars.Series.ewm_mean": [[703, "polars-series-ewm-mean"]], "polars.Series.dt.minute": [[680, "polars-series-dt-minute"]], "polars.Series.dt.microsecond": [[675, "polars-series-dt-microsecond"]], "polars.Series.dt.tz_localize": [[694, "polars-series-dt-tz-localize"]], "polars.Series.cos": [[651, "polars-series-cos"]], "polars.Series.cummax": [[653, "polars-series-cummax"]], "polars.Series.dt.min": [[679, "polars-series-dt-min"]], "polars.Series.dt.month": [[682, "polars-series-dt-month"]], "polars.Series.estimated_size": [[702, "polars-series-estimated-size"]], "polars.Series.dt.minutes": [[681, "polars-series-dt-minutes"]], "polars.Series.dt.second": [[689, "polars-series-dt-second"]], "polars.Series.floor": [[713, "polars-series-floor"]], "polars.Series.dt.mean": [[673, "polars-series-dt-mean"]], "polars.Series.dt.offset_by": [[685, "polars-series-dt-offset-by"]], "polars.Series.cosh": [[652, "polars-series-cosh"]], "polars.Series.dt.milliseconds": [[678, "polars-series-dt-milliseconds"]], "polars.Series.flags": [[712, "polars-series-flags"]], "polars.Series.exp": [[706, "polars-series-exp"]], "polars.Series.drop_nulls": [[662, "polars-series-drop-nulls"]], "polars.Series.dt.with_time_zone": [[698, "polars-series-dt-with-time-zone"]], "polars.Series.diff": [[659, "polars-series-diff"]], "polars.Series.dt.days": [[667, "polars-series-dt-days"]], "polars.Series.dt.hour": [[669, "polars-series-dt-hour"]], "polars.Series.clone": [[650, "polars-series-clone"]], "polars.Series.dt.epoch": [[668, "polars-series-dt-epoch"]], "polars.Series.dt.with_time_unit": [[697, "polars-series-dt-with-time-unit"]], "polars.Series.dt.strftime": [[691, "polars-series-dt-strftime"]], "polars.Series.dt.seconds": [[690, "polars-series-dt-seconds"]], "polars.Series.dt.truncate": [[693, "polars-series-dt-truncate"]], "polars.Series.dt.cast_time_unit": [[664, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.year": [[699, "polars-series-dt-year"]], "polars.Series.dt.cast_time_zone": [[665, "polars-series-dt-cast-time-zone"]], "polars.Series.cumsum": [[656, "polars-series-cumsum"]], "polars.Series.ewm_std": [[704, "polars-series-ewm-std"]], "polars.Series.dt.microseconds": [[676, "polars-series-dt-microseconds"]], "polars.Series.extend_constant": [[708, "polars-series-extend-constant"]], "polars.Series.dt.weekday": [[696, "polars-series-dt-weekday"]], "polars.Series.dt.max": [[672, "polars-series-dt-max"]], "polars.Series.dtype": [[700, "polars-series-dtype"]], "polars.Series.filter": [[711, "polars-series-filter"]], "polars.Series.dt.iso_year": [[671, "polars-series-dt-iso-year"]], "polars.Series.ewm_var": [[705, "polars-series-ewm-var"]], "polars.Series.fill_null": [[710, "polars-series-fill-null"]], "polars.Series.explode": [[707, "polars-series-explode"]], "polars.Series.describe": [[658, "polars-series-describe"]], "polars.Series.zip_with": [[846, "polars-series-zip-with"]], "Temporal": [[859, "temporal"], [522, "temporal"]], "Categories": [[850, "categories"], [512, "categories"]], "Testing": [[861, "testing"]], "Asserts": [[861, "asserts"]], "Property-based testing": [[861, "property-based-testing"]], "Strategies": [[861, "strategies"]], "Strategy helpers": [[861, "strategy-helpers"]], "Descriptive": [[852, "descriptive"], [593, "descriptive"], [224, "descriptive"]], "Struct": [[858, "struct"], [521, "struct"]], "Array": [[847, "array"], [510, "array"]], "Series": [[854, "series"]], "Manipulation/selection": [[856, "manipulation-selection"], [597, "manipulation-selection"], [519, "manipulation-selection"], [229, "manipulation-selection"]], "SQL": [[860, "sql"], [526, "sql"]], "Methods": [[860, "methods"]], "Strings": [[857, "strings"], [520, "strings"]], "Boolean": [[849, "boolean"], [511, "boolean"]], "Miscellaneous": [[855, "miscellaneous"], [596, "miscellaneous"], [524, "miscellaneous"], [518, "miscellaneous"], [228, "miscellaneous"]], "Export": [[853, "export"], [225, "export"]], "Utils": [[862, "utils"]], "Attributes": [[848, "attributes"], [592, "attributes"], [222, "attributes"]], "polars.Series.view": [[845, "polars-series-view"]], "Computation": [[851, "computation"], [514, "computation"], [223, "computation"]], "polars.Series.arcsinh": [[608, "polars-series-arcsinh"]], "polars.Series.arr.diff": [[622, "polars-series-arr-diff"]], "polars.Series.arccosh": [[606, "polars-series-arccosh"]], "polars.Series.arctanh": [[610, "polars-series-arctanh"]], "polars.Series.arg_min": [[612, "polars-series-arg-min"]], "polars.Series.cat.set_ordering": [[643, "polars-series-cat-set-ordering"]], "polars.Series.arccos": [[605, "polars-series-arccos"]], "polars.Series.arr.head": [[626, "polars-series-arr-head"]], "Read/write logical plan": [[596, "read-write-logical-plan"]], "polars.Series.arg_unique": [[615, "polars-series-arg-unique"]], "polars.Series.cast": [[641, "polars-series-cast"]], "polars.Series.any": [[602, "polars-series-any"]], "polars.Series.arr.max": [[630, "polars-series-arr-max"]], "polars.Series.abs": [[599, "polars-series-abs"]], "polars.Series.arctan": [[609, "polars-series-arctan"]], "polars.Series.arr.arg_max": [[618, "polars-series-arr-arg-max"]], "GroupBy": [[594, "groupby"], [226, "groupby"]], "polars.Series.arr.reverse": [[633, "polars-series-arr-reverse"]], "polars.Series.all": [[601, "polars-series-all"]], "polars.Series.append": [[603, "polars-series-append"]], "polars.Series.arr.concat": [[620, "polars-series-arr-concat"]], "LazyFrame": [[595, "lazyframe"]], "polars.Series.arr.slice": [[635, "polars-series-arr-slice"]], "polars.Series.chunk_lengths": [[645, "polars-series-chunk-lengths"]], "polars.Series.arr": [[617, "polars-series-arr"]], "polars.Series.clip": [[647, "polars-series-clip"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[591, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.write_json": [[587, "polars-lazyframe-write-json"]], "polars.Series.argsort": [[616, "polars-series-argsort"]], "polars.Series.arr.sum": [[637, "polars-series-arr-sum"]], "polars.Series.cat": [[642, "polars-series-cat"]], "polars.Series.clip_min": [[649, "polars-series-clip-min"]], "polars.Series.arr.min": [[632, "polars-series-arr-min"]], "polars.Series.arr.first": [[624, "polars-series-arr-first"]], "polars.Series.arg_sort": [[613, "polars-series-arg-sort"]], "polars.Series.arr.mean": [[631, "polars-series-arr-mean"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[589, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.arr.get": [[625, "polars-series-arr-get"]], "polars.Series.arg_max": [[611, "polars-series-arg-max"]], "polars.Series.cleared": [[646, "polars-series-cleared"]], "polars.Series.arcsin": [[607, "polars-series-arcsin"]], "polars.Series.arr.sort": [[636, "polars-series-arr-sort"]], "polars.Series.clip_max": [[648, "polars-series-clip-max"]], "polars.Series.arr.eval": [[623, "polars-series-arr-eval"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[588, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arg_true": [[614, "polars-series-arg-true"]], "polars.Series.arr.shift": [[634, "polars-series-arr-shift"]], "polars.Series.arr.tail": [[638, "polars-series-arr-tail"]], "polars.Series.arr.unique": [[640, "polars-series-arr-unique"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[590, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.apply": [[604, "polars-series-apply"]], "polars.LazyFrame.with_context": [[585, "polars-lazyframe-with-context"]], "polars.Series.arr.join": [[627, "polars-series-arr-join"]], "polars.Series.arr.last": [[628, "polars-series-arr-last"]], "polars.Series.ceil": [[644, "polars-series-ceil"]], "polars.LazyFrame.with_row_count": [[586, "polars-lazyframe-with-row-count"]], "polars.Series.arr.arg_min": [[619, "polars-series-arr-arg-min"]], "polars.Series.arr.contains": [[621, "polars-series-arr-contains"]], "polars.Series.arr.lengths": [[629, "polars-series-arr-lengths"]], "polars.Series.arr.to_struct": [[639, "polars-series-arr-to-struct"]], "polars.Series.alias": [[600, "polars-series-alias"]], "polars.LazyFrame.map": [[556, "polars-lazyframe-map"]], "polars.LazyFrame.dtypes": [[537, "polars-lazyframe-dtypes"]], "polars.LazyFrame.read_json": [[565, "polars-lazyframe-read-json"]], "polars.LazyFrame.describe_optimized_plan": [[533, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.drop": [[535, "polars-lazyframe-drop"]], "polars.LazyFrame.filter": [[542, "polars-lazyframe-filter"]], "polars.LazyFrame.sort": [[574, "polars-lazyframe-sort"]], "polars.LazyFrame.width": [[582, "polars-lazyframe-width"]], "polars.LazyFrame.lazy": [[554, "polars-lazyframe-lazy"]], "polars.LazyFrame.fill_null": [[541, "polars-lazyframe-fill-null"]], "polars.LazyFrame.describe_plan": [[534, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.cache": [[528, "polars-lazyframe-cache"]], "polars.LazyFrame.inspect": [[549, "polars-lazyframe-inspect"]], "Functions": [[524, "functions"], [515, "functions"], [231, "functions"]], "Conversion": [[524, "conversion"]], "Eager/Lazy functions": [[524, "eager-lazy-functions"]], "Parallelization": [[524, "parallelization"]], "StringCache": [[524, "stringcache"]], "polars.LazyFrame.unnest": [[580, "polars-lazyframe-unnest"]], "polars.LazyFrame.interpolate": [[550, "polars-lazyframe-interpolate"]], "polars.LazyFrame.quantile": [[564, "polars-lazyframe-quantile"]], "polars.LazyFrame.sum": [[576, "polars-lazyframe-sum"]], "polars.LazyFrame.take_every": [[578, "polars-lazyframe-take-every"]], "polars.LazyFrame.groupby_dynamic": [[546, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.slice": [[573, "polars-lazyframe-slice"]], "polars.LazyFrame.median": [[559, "polars-lazyframe-median"]], "polars.LazyFrame.rename": [[566, "polars-lazyframe-rename"]], "polars.LazyFrame.mean": [[558, "polars-lazyframe-mean"]], "API reference": [[525, "api-reference"]], "polars.LazyFrame.schema": [[568, "polars-lazyframe-schema"]], "polars.LazyFrame.fill_nan": [[540, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.columns": [[532, "polars-lazyframe-columns"]], "polars.LazyFrame.limit": [[555, "polars-lazyframe-limit"]], "polars.LazyFrame.reverse": [[567, "polars-lazyframe-reverse"]], "polars.LazyFrame.with_columns": [[584, "polars-lazyframe-with-columns"]], "polars.LazyFrame.pipe": [[562, "polars-lazyframe-pipe"]], "polars.LazyFrame.drop_nulls": [[536, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.show_graph": [[572, "polars-lazyframe-show-graph"]], "polars.LazyFrame.collect": [[531, "polars-lazyframe-collect"]], "polars.LazyFrame.join_asof": [[552, "polars-lazyframe-join-asof"]], "polars.LazyFrame.min": [[561, "polars-lazyframe-min"]], "polars.LazyFrame.from_json": [[544, "polars-lazyframe-from-json"]], "polars.LazyFrame.join": [[551, "polars-lazyframe-join"]], "polars.LazyFrame.melt": [[560, "polars-lazyframe-melt"]], "polars.LazyFrame.last": [[553, "polars-lazyframe-last"]], "polars.LazyFrame.profile": [[563, "polars-lazyframe-profile"]], "polars.LazyFrame.explode": [[538, "polars-lazyframe-explode"]], "Input/output": [[526, "input-output"]], "CSV": [[526, "csv"]], "Feather/ IPC": [[526, "feather-ipc"]], "Parquet": [[526, "parquet"]], "JSON": [[526, "json"]], "AVRO": [[526, "avro"]], "Excel": [[526, "excel"]], "Datasets": [[526, "datasets"]], "BatchedCsvReader": [[526, "batchedcsvreader"]], "polars.LazyFrame.first": [[543, "polars-lazyframe-first"]], "Window": [[523, "window"]], "polars.LazyFrame.with_column": [[583, "polars-lazyframe-with-column"]], "polars.LazyFrame.shift": [[570, "polars-lazyframe-shift"]], "polars.LazyFrame.select": [[569, "polars-lazyframe-select"]], "polars.LazyFrame.clone": [[530, "polars-lazyframe-clone"]], "polars.LazyFrame.var": [[581, "polars-lazyframe-var"]], "polars.LazyFrame.shift_and_fill": [[571, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.unique": [[579, "polars-lazyframe-unique"]], "polars.LazyFrame.cleared": [[529, "polars-lazyframe-cleared"]], "polars.LazyFrame.max": [[557, "polars-lazyframe-max"]], "polars.LazyFrame.fetch": [[539, "polars-lazyframe-fetch"]], "polars.LazyFrame.std": [[575, "polars-lazyframe-std"]], "polars.LazyFrame.tail": [[577, "polars-lazyframe-tail"]], "polars.LazyFrame.groupby": [[545, "polars-lazyframe-groupby"]], "polars.LazyFrame.head": [[548, "polars-lazyframe-head"]], "polars.LazyFrame.groupby_rolling": [[547, "polars-lazyframe-groupby-rolling"]], "polars.Expr.rolling_var": [[403, "polars-expr-rolling-var"]], "polars.Expr.str.encode": [[425, "polars-expr-str-encode"]], "polars.Expr.str.split": [[439, "polars-expr-str-split"]], "polars.Expr.str.strptime": [[444, "polars-expr-str-strptime"]], "polars.Expr.sum": [[451, "polars-expr-sum"]], "polars.Expr.str.lengths": [[430, "polars-expr-str-lengths"]], "polars.Expr.rolling_min": [[398, "polars-expr-rolling-min"]], "polars.Expr.reshape": [[392, "polars-expr-reshape"]], "polars.Expr.str.splitn": [[441, "polars-expr-str-splitn"]], "polars.Expr.tail": [[452, "polars-expr-tail"]], "polars.Expr.shrink_dtype": [[410, "polars-expr-shrink-dtype"]], "polars.Expr.sample": [[405, "polars-expr-sample"]], "polars.Expr.sqrt": [[419, "polars-expr-sqrt"]], "polars.Expr.sin": [[413, "polars-expr-sin"]], "polars.Expr.slice": [[416, "polars-expr-slice"]], "polars.Expr.str.slice": [[438, "polars-expr-str-slice"]], "polars.Expr.struct.field": [[448, "polars-expr-struct-field"]], "polars.Expr.str.extract": [[427, "polars-expr-str-extract"]], "polars.Expr.round": [[404, "polars-expr-round"]], "polars.Expr.rolling_quantile": [[399, "polars-expr-rolling-quantile"]], "polars.Expr.search_sorted": [[406, "polars-expr-search-sorted"]], "polars.Expr.str.starts_with": [[442, "polars-expr-str-starts-with"]], "polars.Expr.sort": [[417, "polars-expr-sort"]], "polars.Expr.sign": [[412, "polars-expr-sign"]], "polars.Expr.suffix": [[450, "polars-expr-suffix"]], "polars.Expr.sort_by": [[418, "polars-expr-sort-by"]], "polars.Expr.str.rstrip": [[437, "polars-expr-str-rstrip"]], "polars.Expr.repeat_by": [[391, "polars-expr-repeat-by"]], "polars.Expr.rolling_median": [[397, "polars-expr-rolling-median"]], "polars.Expr.reverse": [[393, "polars-expr-reverse"]], "polars.Expr.rolling_apply": [[394, "polars-expr-rolling-apply"]], "polars.Expr.str.n_chars": [[433, "polars-expr-str-n-chars"]], "polars.Expr.skew": [[415, "polars-expr-skew"]], "polars.Expr.str.ends_with": [[426, "polars-expr-str-ends-with"]], "polars.Expr.str.zfill": [[447, "polars-expr-str-zfill"]], "polars.Expr.shuffle": [[411, "polars-expr-shuffle"]], "polars.Expr.str.split_exact": [[440, "polars-expr-str-split-exact"]], "polars.Expr.str.replace_all": [[435, "polars-expr-str-replace-all"]], "polars.Expr.rolling_skew": [[400, "polars-expr-rolling-skew"]], "polars.Expr.take": [[453, "polars-expr-take"]], "polars.Expr.str.extract_all": [[428, "polars-expr-str-extract-all"]], "polars.Expr.str.concat": [[421, "polars-expr-str-concat"]], "polars.Expr.rolling_std": [[401, "polars-expr-rolling-std"]], "polars.Expr.str.count_match": [[423, "polars-expr-str-count-match"]], "polars.Expr.take_every": [[454, "polars-expr-take-every"]], "polars.Expr.str.decode": [[424, "polars-expr-str-decode"]], "polars.Expr.str.contains": [[422, "polars-expr-str-contains"]], "polars.Expr.str.rjust": [[436, "polars-expr-str-rjust"]], "polars.Expr.struct.rename_fields": [[449, "polars-expr-struct-rename-fields"]], "polars.Expr.std": [[420, "polars-expr-std"]], "polars.Expr.str.to_uppercase": [[446, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_max": [[395, "polars-expr-rolling-max"]], "polars.Expr.str.json_path_match": [[429, "polars-expr-str-json-path-match"]], "polars.Expr.str.replace": [[434, "polars-expr-str-replace"]], "polars.Expr.str.strip": [[443, "polars-expr-str-strip"]], "polars.Expr.set_sorted": [[407, "polars-expr-set-sorted"]], "polars.Expr.reinterpret": [[390, "polars-expr-reinterpret"]], "polars.Expr.shift_and_fill": [[409, "polars-expr-shift-and-fill"]], "polars.Expr.sinh": [[414, "polars-expr-sinh"]], "polars.Expr.rolling_sum": [[402, "polars-expr-rolling-sum"]], "polars.Expr.shift": [[408, "polars-expr-shift"]], "polars.Expr.rolling_mean": [[396, "polars-expr-rolling-mean"]], "polars.Expr.str.ljust": [[431, "polars-expr-str-ljust"]], "polars.Expr.str.lstrip": [[432, "polars-expr-str-lstrip"]], "polars.Expr.str.to_lowercase": [[445, "polars-expr-str-to-lowercase"]], "polars.Expr.log10": [[365, "polars-expr-log10"]], "polars.Expr.ewm_std": [[329, "polars-expr-ewm-std"]], "polars.Expr.is_nan": [[352, "polars-expr-is-nan"]], "polars.Expr.keep_name": [[358, "polars-expr-keep-name"]], "polars.Expr.max": [[369, "polars-expr-max"]], "polars.Expr.head": [[343, "polars-expr-head"]], "polars.Expr.len": [[361, "polars-expr-len"]], "polars.Expr.product": [[386, "polars-expr-product"]], "polars.Expr.explode": [[333, "polars-expr-explode"]], "polars.Expr.ewm_mean": [[328, "polars-expr-ewm-mean"]], "polars.Expr.is_not_nan": [[354, "polars-expr-is-not-nan"]], "polars.Expr.meta.pop": [[373, "polars-expr-meta-pop"]], "polars.Expr.is_infinite": [[351, "polars-expr-is-infinite"]], "polars.Expr.pct_change": [[383, "polars-expr-pct-change"]], "polars.Expr.meta.undo_aliases": [[375, "polars-expr-meta-undo-aliases"]], "polars.Expr.pow": [[384, "polars-expr-pow"]], "polars.Expr.list": [[363, "polars-expr-list"]], "polars.Expr.forward_fill": [[341, "polars-expr-forward-fill"]], "polars.Expr.is_not_null": [[355, "polars-expr-is-not-null"]], "polars.Expr.dt.year": [[326, "polars-expr-dt-year"]], "polars.Expr.dt.with_time_zone": [[325, "polars-expr-dt-with-time-zone"]], "polars.Expr.fill_null": [[336, "polars-expr-fill-null"]], "polars.Expr.is_not": [[353, "polars-expr-is-not"]], "polars.Expr.is_null": [[356, "polars-expr-is-null"]], "polars.Expr.exp": [[332, "polars-expr-exp"]], "polars.Expr.hash": [[342, "polars-expr-hash"]], "polars.Expr.entropy": [[327, "polars-expr-entropy"]], "polars.Expr.is_between": [[346, "polars-expr-is-between"]], "polars.Expr.ewm_var": [[330, "polars-expr-ewm-var"]], "polars.Expr.log": [[364, "polars-expr-log"]], "polars.Expr.map": [[367, "polars-expr-map"]], "polars.Expr.is_finite": [[348, "polars-expr-is-finite"]], "polars.Expr.is_unique": [[357, "polars-expr-is-unique"]], "polars.Expr.exclude": [[331, "polars-expr-exclude"]], "polars.Expr.median": [[371, "polars-expr-median"]], "polars.Expr.interpolate": [[345, "polars-expr-interpolate"]], "polars.Expr.over": [[382, "polars-expr-over"]], "polars.Expr.is_duplicated": [[347, "polars-expr-is-duplicated"]], "polars.Expr.is_in": [[350, "polars-expr-is-in"]], "polars.Expr.first": [[338, "polars-expr-first"]], "polars.Expr.meta.output_name": [[372, "polars-expr-meta-output-name"]], "polars.Expr.filter": [[337, "polars-expr-filter"]], "polars.Expr.null_count": [[381, "polars-expr-null-count"]], "polars.Expr.map_alias": [[368, "polars-expr-map-alias"]], "polars.Expr.meta.root_names": [[374, "polars-expr-meta-root-names"]], "polars.Expr.fill_nan": [[335, "polars-expr-fill-nan"]], "polars.Expr.min": [[376, "polars-expr-min"]], "polars.Expr.mode": [[377, "polars-expr-mode"]], "polars.Expr.n_unique": [[378, "polars-expr-n-unique"]], "polars.Expr.extend_constant": [[334, "polars-expr-extend-constant"]], "polars.Expr.lower_bound": [[366, "polars-expr-lower-bound"]], "polars.Expr.kurtosis": [[359, "polars-expr-kurtosis"]], "polars.Expr.rechunk": [[389, "polars-expr-rechunk"]], "polars.Expr.is_first": [[349, "polars-expr-is-first"]], "polars.Expr.rank": [[388, "polars-expr-rank"]], "polars.Expr.inspect": [[344, "polars-expr-inspect"]], "polars.Expr.last": [[360, "polars-expr-last"]], "polars.Expr.floor": [[340, "polars-expr-floor"]], "polars.Expr.quantile": [[387, "polars-expr-quantile"]], "polars.Expr.prefix": [[385, "polars-expr-prefix"]], "polars.Expr.nan_min": [[380, "polars-expr-nan-min"]], "polars.Expr.mean": [[370, "polars-expr-mean"]], "polars.Expr.nan_max": [[379, "polars-expr-nan-max"]], "polars.Expr.limit": [[362, "polars-expr-limit"]], "polars.Expr.flatten": [[339, "polars-expr-flatten"]], "polars.Expr.cast": [[276, "polars-expr-cast"]], "polars.Expr.dt.strftime": [[318, "polars-expr-dt-strftime"]], "polars.Expr.arr.to_struct": [[273, "polars-expr-arr-to-struct"]], "polars.Expr.cumulative_eval": [[290, "polars-expr-cumulative-eval"]], "polars.Expr.drop_nulls": [[294, "polars-expr-drop-nulls"]], "polars.Expr.dot": [[292, "polars-expr-dot"]], "polars.Expr.arr.min": [[266, "polars-expr-arr-min"]], "polars.Expr.drop_nans": [[293, "polars-expr-drop-nans"]], "polars.Expr.cat.set_ordering": [[277, "polars-expr-cat-set-ordering"]], "polars.Expr.cumcount": [[285, "polars-expr-cumcount"]], "polars.Expr.diff": [[291, "polars-expr-diff"]], "polars.Expr.dt.timestamp": [[319, "polars-expr-dt-timestamp"]], "polars.Expr.dt.truncate": [[320, "polars-expr-dt-truncate"]], "polars.Expr.arr.shift": [[268, "polars-expr-arr-shift"]], "polars.Expr.arr.sum": [[271, "polars-expr-arr-sum"]], "polars.Expr.arr.tail": [[272, "polars-expr-arr-tail"]], "polars.Expr.arr.lengths": [[263, "polars-expr-arr-lengths"]], "polars.Expr.clip": [[279, "polars-expr-clip"]], "polars.Expr.clip_min": [[281, "polars-expr-clip-min"]], "polars.Expr.cummax": [[286, "polars-expr-cummax"]], "polars.Expr.dt.days": [[298, "polars-expr-dt-days"]], "polars.Expr.dt.microseconds": [[304, "polars-expr-dt-microseconds"]], "polars.Expr.dt.nanosecond": [[310, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.second": [[316, "polars-expr-dt-second"]], "polars.Expr.arr.mean": [[265, "polars-expr-arr-mean"]], "polars.Expr.count": [[284, "polars-expr-count"]], "polars.Expr.dt.milliseconds": [[306, "polars-expr-dt-milliseconds"]], "polars.Expr.cosh": [[283, "polars-expr-cosh"]], "polars.Expr.dt.weekday": [[323, "polars-expr-dt-weekday"]], "polars.Expr.dt.minutes": [[308, "polars-expr-dt-minutes"]], "polars.Expr.dt.day": [[297, "polars-expr-dt-day"]], "polars.Expr.dt.offset_by": [[312, "polars-expr-dt-offset-by"]], "polars.Expr.clip_max": [[280, "polars-expr-clip-max"]], "polars.Expr.arr.unique": [[274, "polars-expr-arr-unique"]], "polars.Expr.dt.iso_year": [[302, "polars-expr-dt-iso-year"]], "polars.Expr.backward_fill": [[275, "polars-expr-backward-fill"]], "polars.Expr.arr.head": [[260, "polars-expr-arr-head"]], "polars.Expr.dt.minute": [[307, "polars-expr-dt-minute"]], "polars.Expr.dt.millisecond": [[305, "polars-expr-dt-millisecond"]], "polars.Expr.dt.nanoseconds": [[311, "polars-expr-dt-nanoseconds"]], "polars.Expr.arr.slice": [[269, "polars-expr-arr-slice"]], "polars.Expr.cummin": [[287, "polars-expr-cummin"]], "polars.Expr.dt.quarter": [[314, "polars-expr-dt-quarter"]], "polars.Expr.dt.microsecond": [[303, "polars-expr-dt-microsecond"]], "polars.Expr.dt.seconds": [[317, "polars-expr-dt-seconds"]], "polars.Expr.arr.max": [[264, "polars-expr-arr-max"]], "polars.Expr.cumsum": [[289, "polars-expr-cumsum"]], "polars.Expr.dt.week": [[322, "polars-expr-dt-week"]], "polars.Expr.dt.epoch": [[299, "polars-expr-dt-epoch"]], "polars.Expr.dt.with_time_unit": [[324, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.tz_localize": [[321, "polars-expr-dt-tz-localize"]], "polars.Expr.dt.ordinal_day": [[313, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.cast_time_zone": [[296, "polars-expr-dt-cast-time-zone"]], "polars.Expr.dt.hour": [[300, "polars-expr-dt-hour"]], "polars.Expr.cos": [[282, "polars-expr-cos"]], "polars.Expr.ceil": [[278, "polars-expr-ceil"]], "polars.Expr.dt.month": [[309, "polars-expr-dt-month"]], "polars.Expr.arr.join": [[261, "polars-expr-arr-join"]], "polars.Expr.arr.reverse": [[267, "polars-expr-arr-reverse"]], "polars.Expr.dt.hours": [[301, "polars-expr-dt-hours"]], "polars.Expr.arr.sort": [[270, "polars-expr-arr-sort"]], "polars.Expr.cumprod": [[288, "polars-expr-cumprod"]], "polars.Expr.dt.cast_time_unit": [[295, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.round": [[315, "polars-expr-dt-round"]], "polars.Expr.arr.last": [[262, "polars-expr-arr-last"]], "polars.Expr.unique": [[459, "polars-expr-unique"]], "polars.list": [[490, "polars-list"]], "polars.avg": [[470, "polars-avg"]], "polars.concat_list": [[473, "polars-concat-list"]], "Columns / names": [[513, "columns-names"]], "Expressions": [[516, "expressions"]], "polars.fold": [[486, "polars-fold"]], "polars.date": [[480, "polars-date"]], "polars.duration": [[482, "polars-duration"]], "polars.arange": [[468, "polars-arange"]], "polars.cumfold": [[477, "polars-cumfold"]], "polars.Expr.top_k": [[458, "polars-expr-top-k"]], "polars.head": [[489, "polars-head"]], "polars.min": [[496, "polars-min"]], "polars.select": [[502, "polars-select"]], "polars.exclude": [[484, "polars-exclude"]], "polars.median": [[495, "polars-median"]], "polars.sum": [[506, "polars-sum"]], "polars.tail": [[507, "polars-tail"]], "polars.count": [[475, "polars-count"]], "polars.concat_str": [[474, "polars-concat-str"]], "polars.format": [[487, "polars-format"]], "polars.n_unique": [[497, "polars-n-unique"]], "polars.coalesce": [[471, "polars-coalesce"]], "polars.Expr.value_counts": [[462, "polars-expr-value-counts"]], "polars.groups": [[488, "polars-groups"]], "polars.element": [[483, "polars-element"]], "polars.Expr.tanh": [[456, "polars-expr-tanh"]], "polars.spearman_rank_corr": [[503, "polars-spearman-rank-corr"]], "polars.reduce": [[500, "polars-reduce"]], "polars.var": [[508, "polars-var"]], "polars.map": [[492, "polars-map"]], "polars.Expr.var": [[463, "polars-expr-var"]], "Meta": [[517, "meta"]], "polars.datetime": [[481, "polars-datetime"]], "polars.Expr.unique_counts": [[460, "polars-expr-unique-counts"]], "polars.repeat": [[501, "polars-repeat"]], "polars.when": [[509, "polars-when"]], "polars.apply": [[467, "polars-apply"]], "polars.Expr.to_physical": [[457, "polars-expr-to-physical"]], "polars.cumsum": [[479, "polars-cumsum"]], "polars.Expr.where": [[464, "polars-expr-where"]], "polars.all": [[465, "polars-all"]], "polars.std": [[504, "polars-std"]], "polars.lit": [[491, "polars-lit"]], "polars.any": [[466, "polars-any"]], "polars.max": [[493, "polars-max"]], "polars.pearson_corr": [[498, "polars-pearson-corr"]], "polars.Expr.upper_bound": [[461, "polars-expr-upper-bound"]], "polars.cov": [[476, "polars-cov"]], "polars.col": [[472, "polars-col"]], "polars.quantile": [[499, "polars-quantile"]], "polars.Expr.tan": [[455, "polars-expr-tan"]], "polars.cumreduce": [[478, "polars-cumreduce"]], "polars.mean": [[494, "polars-mean"]], "polars.struct": [[505, "polars-struct"]], "polars.first": [[485, "polars-first"]], "polars.argsort_by": [[469, "polars-argsort-by"]], "polars.DataFrame.is_empty": [[140, "polars-dataframe-is-empty"]], "polars.DataFrame.var": [[192, "polars-dataframe-var"]], "polars.DataFrame.width": [[194, "polars-dataframe-width"]], "polars.DataFrame.row": [[164, "polars-dataframe-row"]], "polars.DataFrame.groupby": [[130, "polars-dataframe-groupby"]], "polars.DataFrame.melt": [[149, "polars-dataframe-melt"]], "polars.DataFrame.replace_at_idx": [[162, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.to_pandas": [[184, "polars-dataframe-to-pandas"]], "polars.DataFrame.is_unique": [[141, "polars-dataframe-is-unique"]], "polars.DataFrame.shift": [[170, "polars-dataframe-shift"]], "polars.DataFrame.slice": [[173, "polars-dataframe-slice"]], "polars.DataFrame.quantile": [[158, "polars-dataframe-quantile"]], "polars.DataFrame.hstack": [[136, "polars-dataframe-hstack"]], "polars.DataFrame.shrink_to_fit": [[172, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.unstack": [[190, "polars-dataframe-unstack"]], "polars.DataFrame.pivot": [[156, "polars-dataframe-pivot"]], "polars.DataFrame.null_count": [[153, "polars-dataframe-null-count"]], "polars.DataFrame.rows": [[165, "polars-dataframe-rows"]], "polars.DataFrame.sample": [[166, "polars-dataframe-sample"]], "polars.DataFrame.vstack": [[193, "polars-dataframe-vstack"]], "polars.DataFrame.rechunk": [[159, "polars-dataframe-rechunk"]], "polars.DataFrame.pipe": [[155, "polars-dataframe-pipe"]], "polars.DataFrame.shift_and_fill": [[171, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.min": [[150, "polars-dataframe-min"]], "polars.DataFrame.take_every": [[178, "polars-dataframe-take-every"]], "polars.DataFrame.height": [[135, "polars-dataframe-height"]], "polars.DataFrame.interpolate": [[138, "polars-dataframe-interpolate"]], "polars.DataFrame.join": [[142, "polars-dataframe-join"]], "polars.DataFrame.upsample": [[191, "polars-dataframe-upsample"]], "polars.DataFrame.rename": [[160, "polars-dataframe-rename"]], "polars.DataFrame.is_duplicated": [[139, "polars-dataframe-is-duplicated"]], "polars.DataFrame.median": [[148, "polars-dataframe-median"]], "polars.DataFrame.schema": [[167, "polars-dataframe-schema"]], "polars.DataFrame.max": [[146, "polars-dataframe-max"]], "polars.DataFrame.head": [[134, "polars-dataframe-head"]], "polars.DataFrame.product": [[157, "polars-dataframe-product"]], "polars.DataFrame.replace": [[161, "polars-dataframe-replace"]], "polars.DataFrame.std": [[175, "polars-dataframe-std"]], "polars.DataFrame.mean": [[147, "polars-dataframe-mean"]], "polars.DataFrame.groupby_rolling": [[132, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.unnest": [[189, "polars-dataframe-unnest"]], "polars.DataFrame.shape": [[169, "polars-dataframe-shape"]], "polars.DataFrame.insert_at_idx": [[137, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.transpose": [[187, "polars-dataframe-transpose"]], "polars.DataFrame.groupby_dynamic": [[131, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.select": [[168, "polars-dataframe-select"]], "polars.DataFrame.lazy": [[144, "polars-dataframe-lazy"]], "polars.DataFrame.limit": [[145, "polars-dataframe-limit"]], "polars.DataFrame.n_unique": [[152, "polars-dataframe-n-unique"]], "polars.DataFrame.reverse": [[163, "polars-dataframe-reverse"]], "polars.DataFrame.sort": [[174, "polars-dataframe-sort"]], "polars.DataFrame.unique": [[188, "polars-dataframe-unique"]], "polars.DataFrame.to_arrow": [[179, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[180, "polars-dataframe-to-dict"]], "polars.DataFrame.to_series": [[185, "polars-dataframe-to-series"]], "polars.DataFrame.hash_rows": [[133, "polars-dataframe-hash-rows"]], "polars.DataFrame.partition_by": [[154, "polars-dataframe-partition-by"]], "polars.DataFrame.sum": [[176, "polars-dataframe-sum"]], "polars.DataFrame.to_dicts": [[181, "polars-dataframe-to-dicts"]], "polars.DataFrame.join_asof": [[143, "polars-dataframe-join-asof"]], "polars.DataFrame.to_dummies": [[182, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_numpy": [[183, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_struct": [[186, "polars-dataframe-to-struct"]], "polars.DataFrame.tail": [[177, "polars-dataframe-tail"]], "polars.DataFrame.n_chunks": [[151, "polars-dataframe-n-chunks"]], "polars.Expr.arr.arg_max": [[252, "polars-expr-arr-arg-max"]], "polars.internals.dataframe.pivot.PivotOps.last": [[216, "polars-internals-dataframe-pivot-pivotops-last"]], "polars.internals.dataframe.groupby.GroupBy.head": [[203, "polars-internals-dataframe-groupby-groupby-head"]], "polars.Expr.arg_min": [[248, "polars-expr-arg-min"]], "polars.DataFrame.with_column": [[195, "polars-dataframe-with-column"]], "polars.internals.dataframe.pivot.PivotOps.median": [[219, "polars-internals-dataframe-pivot-pivotops-median"]], "polars.Expr.append": [[239, "polars-expr-append"]], "polars.Expr.arg_sort": [[249, "polars-expr-arg-sort"]], "polars.DataFrame.with_row_count": [[197, "polars-dataframe-with-row-count"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[212, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.Expr.argsort": [[251, "polars-expr-argsort"]], "polars.Expr.apply": [[240, "polars-expr-apply"]], "polars.internals.dataframe.pivot.PivotOps.count": [[214, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.Expr.arctan": [[245, "polars-expr-arctan"]], "polars.internals.dataframe.groupby.GroupBy.count": [[201, "polars-internals-dataframe-groupby-groupby-count"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[206, "polars-internals-dataframe-groupby-groupby-mean"]], "DataFrame": [[227, "dataframe"]], "polars.Expr.alias": [[236, "polars-expr-alias"]], "polars.Expr.arcsin": [[243, "polars-expr-arcsin"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[200, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.internals.dataframe.groupby.GroupBy.min": [[208, "polars-internals-dataframe-groupby-groupby-min"]], "polars.Expr.arr.contains": [[255, "polars-expr-arr-contains"]], "polars.Expr.arctanh": [[246, "polars-expr-arctanh"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[199, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[213, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.Expr.arr.get": [[259, "polars-expr-arr-get"]], "polars.Expr.agg_groups": [[235, "polars-expr-agg-groups"]], "polars.Expr.arr.concat": [[254, "polars-expr-arr-concat"]], "polars.internals.dataframe.groupby.GroupBy.max": [[205, "polars-internals-dataframe-groupby-groupby-max"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[221, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[218, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[209, "polars-internals-dataframe-groupby-groupby-n-unique"]], "Data types": [[231, "data-types"]], "Numeric": [[231, "numeric"]], "Date / Time": [[231, "date-time"]], "Nested": [[231, "nested"]], "Other": [[231, "other"]], "polars.Expr.arccosh": [[242, "polars-expr-arccosh"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[198, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.Expr.arccos": [[241, "polars-expr-arccos"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[211, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.Expr.arr.first": [[258, "polars-expr-arr-first"]], "polars.Expr.abs": [[234, "polars-expr-abs"]], "polars.Expr.arr.diff": [[256, "polars-expr-arr-diff"]], "polars.internals.dataframe.groupby.GroupBy.first": [[202, "polars-internals-dataframe-groupby-groupby-first"]], "Exceptions": [[232, "exceptions"]], "polars.Expr.arg_unique": [[250, "polars-expr-arg-unique"]], "polars.internals.dataframe.groupby.GroupBy.last": [[204, "polars-internals-dataframe-groupby-groupby-last"]], "polars.Expr.arg_max": [[247, "polars-expr-arg-max"]], "polars.Expr.arr.arg_min": [[253, "polars-expr-arr-arg-min"]], "polars.Expr.arcsinh": [[244, "polars-expr-arcsinh"]], "polars.Expr.all": [[237, "polars-expr-all"]], "polars.internals.dataframe.pivot.PivotOps.max": [[217, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[210, "polars-internals-dataframe-groupby-groupby-pivot"]], "polars.internals.dataframe.pivot.PivotOps.min": [[220, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.Expr.arr.eval": [[257, "polars-expr-arr-eval"]], "polars.internals.dataframe.groupby.GroupBy.median": [[207, "polars-internals-dataframe-groupby-groupby-median"]], "polars.internals.dataframe.pivot.PivotOps.first": [[215, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.DataFrame.with_columns": [[196, "polars-dataframe-with-columns"]], "Pivot": [[230, "pivot"]], "polars.Expr.any": [[238, "polars-expr-any"]]}, "indexentries": {"binary (class in polars)": [[1, "polars.Binary"]], "__init__() (polars.binary method)": [[1, "polars.Binary.__init__"]], "boolean (class in polars)": [[2, "polars.Boolean"]], "__init__() (polars.boolean method)": [[2, "polars.Boolean.__init__"]], "categorical (class in polars)": [[3, "polars.Categorical"]], "__init__() (polars.categorical method)": [[3, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[4, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[5, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[6, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[8, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[9, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[10, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[11, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[12, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[13, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[14, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[15, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[18, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[19, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[20, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[21, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[22, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[23, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[24, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[25, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[26, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[27, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[28, "polars.DataType"]], "__init__() (polars.datatype method)": [[28, "polars.DataType.__init__"]], "date (class in polars)": [[29, "polars.Date"]], "__init__() (polars.date method)": [[29, "polars.Date.__init__"]], "datetime (class in polars)": [[30, "polars.Datetime"]], "__init__() (polars.datetime method)": [[30, "polars.Datetime.__init__"]], "duration (class in polars)": [[31, "polars.Duration"]], "__init__() (polars.duration method)": [[31, "polars.Duration.__init__"]], "float32 (class in polars)": [[32, "polars.Float32"]], "__init__() (polars.float32 method)": [[32, "polars.Float32.__init__"]], "float64 (class in polars)": [[33, "polars.Float64"]], "__init__() (polars.float64 method)": [[33, "polars.Float64.__init__"]], "int16 (class in polars)": [[34, "polars.Int16"]], "__init__() (polars.int16 method)": [[34, "polars.Int16.__init__"]], "int32 (class in polars)": [[35, "polars.Int32"]], "__init__() (polars.int32 method)": [[35, "polars.Int32.__init__"]], "int64 (class in polars)": [[36, "polars.Int64"]], "__init__() (polars.int64 method)": [[36, "polars.Int64.__init__"]], "int8 (class in polars)": [[37, "polars.Int8"]], "__init__() (polars.int8 method)": [[37, "polars.Int8.__init__"]], "list (class in polars)": [[38, "polars.List"]], "__init__() (polars.list method)": [[38, "polars.List.__init__"]], "null (class in polars)": [[39, "polars.Null"]], "__init__() (polars.null method)": [[39, "polars.Null.__init__"]], "object (class in polars)": [[40, "polars.Object"]], "__init__() (polars.object method)": [[40, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[41, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[42, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[43, "polars.SQLContext.register"]], "stringcache (class in polars)": [[44, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[44, "polars.StringCache.__init__"]], "struct (class in polars)": [[45, "polars.Struct"]], "__init__() (polars.struct method)": [[45, "polars.Struct.__init__"]], "time (class in polars)": [[46, "polars.Time"]], "__init__() (polars.time method)": [[46, "polars.Time.__init__"]], "uint16 (class in polars)": [[47, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[47, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[48, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[48, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[49, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[49, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[50, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[50, "polars.UInt8.__init__"]], "unknown (class in polars)": [[51, "polars.Unknown"]], "__init__() (polars.unknown method)": [[51, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[52, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[52, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[53, "polars.align_frames"]], "arg_where() (in module polars)": [[54, "polars.arg_where"]], "build_info() (in module polars)": [[55, "polars.build_info"]], "collect_all() (in module polars)": [[56, "polars.collect_all"]], "concat() (in module polars)": [[57, "polars.concat"]], "cut() (in module polars)": [[58, "polars.cut"]], "date_range() (in module polars)": [[59, "polars.date_range"]], "arrowerror": [[60, "polars.exceptions.ArrowError"]], "computeerror": [[61, "polars.exceptions.ComputeError"]], "duplicateerror": [[62, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[63, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[64, "polars.exceptions.NoDataError"]], "norowsreturned": [[65, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[66, "polars.exceptions.NotFoundError"]], "panicexception": [[67, "polars.exceptions.PanicException"]], "rowsexception": [[68, "polars.exceptions.RowsException"]], "schemaerror": [[69, "polars.exceptions.SchemaError"]], "shapeerror": [[70, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[71, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[72, "polars.from_arrow"]], "from_dict() (in module polars)": [[73, "polars.from_dict"]], "from_dicts() (in module polars)": [[74, "polars.from_dicts"]], "from_numpy() (in module polars)": [[75, "polars.from_numpy"]], "from_pandas() (in module polars)": [[76, "polars.from_pandas"]], "from_records() (in module polars)": [[77, "polars.from_records"]], "get_dummies() (in module polars)": [[78, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[79, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[80, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[81, "polars.ones"]], "read_avro() (in module polars)": [[82, "polars.read_avro"]], "read_csv() (in module polars)": [[83, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[84, "polars.read_csv_batched"]], "read_excel() (in module polars)": [[85, "polars.read_excel"]], "read_ipc() (in module polars)": [[86, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[87, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[88, "polars.read_json"]], "read_ndjson() (in module polars)": [[89, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[90, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[91, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[92, "polars.read_sql"]], "scan_csv() (in module polars)": [[93, "polars.scan_csv"]], "scan_ds() (in module polars)": [[94, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[95, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[96, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[97, "polars.scan_parquet"]], "show_versions() (in module polars)": [[98, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[99, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[100, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[101, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[101, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[102, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[103, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[104, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[105, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[106, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[107, "polars.zeros"]], "apply() (polars.dataframe method)": [[110, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[111, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[112, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[113, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[114, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[115, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[116, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[117, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[118, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[119, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[120, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[121, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[122, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[123, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[124, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[125, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[126, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[127, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[128, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[129, "polars.DataFrame.get_columns"]], "groupby() (polars.dataframe method)": [[130, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[131, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[132, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[133, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[134, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[135, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[136, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[137, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[138, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[139, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[140, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[141, "polars.DataFrame.is_unique"]], "join() (polars.dataframe method)": [[142, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[143, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[144, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[145, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[146, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[147, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[148, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[149, "polars.DataFrame.melt"]], "min() (polars.dataframe method)": [[150, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[151, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[152, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[153, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[154, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[155, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[156, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[157, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[158, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[159, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[160, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[161, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[162, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[163, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[164, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[165, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[166, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[167, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[168, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[169, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[170, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[171, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[172, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[173, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[174, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[175, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[176, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[177, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[178, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[179, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[180, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[181, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[182, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[183, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[184, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[185, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[186, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[187, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[188, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[189, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[190, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[191, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[192, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[193, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[194, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[195, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[196, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[197, "polars.DataFrame.with_row_count"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[198, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[199, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[200, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[201, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[202, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[203, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[204, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[205, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[206, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[207, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[208, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[209, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[210, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[211, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[212, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[213, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[214, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[215, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[216, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[217, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[218, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[219, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[220, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[221, "polars.internals.dataframe.pivot.PivotOps.sum"]], "abs() (polars.expr method)": [[234, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[235, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[236, "polars.Expr.alias"]], "all() (polars.expr method)": [[237, "polars.Expr.all"]], "any() (polars.expr method)": [[238, "polars.Expr.any"]], "append() (polars.expr method)": [[239, "polars.Expr.append"]], "apply() (polars.expr method)": [[240, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[241, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[242, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[243, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[244, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[245, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[246, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[247, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[248, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[249, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[250, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[251, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[252, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[253, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[254, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[255, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[256, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[257, "polars.Expr.arr.eval"]], "first() (polars.expr.arr method)": [[258, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[259, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[260, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[261, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[262, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[263, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[264, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[265, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[266, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[267, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[268, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[269, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[270, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[271, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[272, "polars.Expr.arr.tail"]], "to_struct() (polars.expr.arr method)": [[273, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[274, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[275, "polars.Expr.backward_fill"]], "cast() (polars.expr method)": [[276, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[277, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[278, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[279, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[280, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[281, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[282, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[283, "polars.Expr.cosh"]], "count() (polars.expr method)": [[284, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[285, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[286, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[287, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[288, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[289, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[290, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[291, "polars.Expr.diff"]], "dot() (polars.expr method)": [[292, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[293, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[294, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[295, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[296, "polars.Expr.dt.cast_time_zone"]], "day() (polars.expr.dt method)": [[297, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[298, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[299, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[300, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[301, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[302, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[303, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[304, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[305, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[306, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[307, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[308, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[309, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[310, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[311, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[312, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[313, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[314, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[315, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[316, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[317, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[318, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[319, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[320, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[321, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[322, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[323, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[324, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[325, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[326, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[327, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[328, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[329, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[330, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[331, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[332, "polars.Expr.exp"]], "explode() (polars.expr method)": [[333, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[334, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[335, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[336, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[337, "polars.Expr.filter"]], "first() (polars.expr method)": [[338, "polars.Expr.first"]], "flatten() (polars.expr method)": [[339, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[340, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[341, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[342, "polars.Expr.hash"]], "head() (polars.expr method)": [[343, "polars.Expr.head"]], "inspect() (polars.expr method)": [[344, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[345, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[346, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[347, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[348, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[349, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[350, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[351, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[352, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[353, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[354, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[355, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[356, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[357, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[358, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[359, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[360, "polars.Expr.last"]], "len() (polars.expr method)": [[361, "polars.Expr.len"]], "limit() (polars.expr method)": [[362, "polars.Expr.limit"]], "list() (polars.expr method)": [[363, "polars.Expr.list"]], "log() (polars.expr method)": [[364, "polars.Expr.log"]], "log10() (polars.expr method)": [[365, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[366, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[367, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[368, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[369, "polars.Expr.max"]], "mean() (polars.expr method)": [[370, "polars.Expr.mean"]], "median() (polars.expr method)": [[371, "polars.Expr.median"]], "output_name() (polars.expr.meta method)": [[372, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[373, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[374, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[375, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[376, "polars.Expr.min"]], "mode() (polars.expr method)": [[377, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[378, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[379, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[380, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[381, "polars.Expr.null_count"]], "over() (polars.expr method)": [[382, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[383, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[384, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[385, "polars.Expr.prefix"]], "product() (polars.expr method)": [[386, "polars.Expr.product"]], "quantile() (polars.expr method)": [[387, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[388, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[389, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[390, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[391, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[392, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[393, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[394, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[395, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[396, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[397, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[398, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[399, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[400, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[401, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[402, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[403, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[404, "polars.Expr.round"]], "sample() (polars.expr method)": [[405, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[406, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[407, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[408, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[409, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[410, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[411, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[412, "polars.Expr.sign"]], "sin() (polars.expr method)": [[413, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[414, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[415, "polars.Expr.skew"]], "slice() (polars.expr method)": [[416, "polars.Expr.slice"]], "sort() (polars.expr method)": [[417, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[418, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[419, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[420, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[421, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[422, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[423, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[424, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[425, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[426, "polars.Expr.str.ends_with"]], "extract() (polars.expr.str method)": [[427, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[428, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[429, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[430, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[431, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[432, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[433, "polars.Expr.str.n_chars"]], "replace() (polars.expr.str method)": [[434, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[435, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[436, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[437, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[438, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[439, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[440, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[441, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[442, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[443, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[444, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[445, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[446, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[447, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[448, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[449, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[450, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[451, "polars.Expr.sum"]], "tail() (polars.expr method)": [[452, "polars.Expr.tail"]], "take() (polars.expr method)": [[453, "polars.Expr.take"]], "take_every() (polars.expr method)": [[454, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[455, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[456, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[457, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[458, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[459, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[460, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[461, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[462, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[463, "polars.Expr.var"]], "where() (polars.expr method)": [[464, "polars.Expr.where"]], "all() (in module polars)": [[465, "polars.all"]], "any() (in module polars)": [[466, "polars.any"]], "apply() (in module polars)": [[467, "polars.apply"]], "arange() (in module polars)": [[468, "polars.arange"]], "argsort_by() (in module polars)": [[469, "polars.argsort_by"]], "avg() (in module polars)": [[470, "polars.avg"]], "coalesce() (in module polars)": [[471, "polars.coalesce"]], "col() (in module polars)": [[472, "polars.col"]], "concat_list() (in module polars)": [[473, "polars.concat_list"]], "concat_str() (in module polars)": [[474, "polars.concat_str"]], "count() (in module polars)": [[475, "polars.count"]], "cov() (in module polars)": [[476, "polars.cov"]], "cumfold() (in module polars)": [[477, "polars.cumfold"]], "cumreduce() (in module polars)": [[478, "polars.cumreduce"]], "cumsum() (in module polars)": [[479, "polars.cumsum"]], "date() (in module polars)": [[480, "polars.date"]], "datetime() (in module polars)": [[481, "polars.datetime"]], "duration() (in module polars)": [[482, "polars.duration"]], "element() (in module polars)": [[483, "polars.element"]], "exclude() (in module polars)": [[484, "polars.exclude"]], "first() (in module polars)": [[485, "polars.first"]], "fold() (in module polars)": [[486, "polars.fold"]], "format() (in module polars)": [[487, "polars.format"]], "groups() (in module polars)": [[488, "polars.groups"]], "head() (in module polars)": [[489, "polars.head"]], "list() (in module polars)": [[490, "polars.list"]], "lit() (in module polars)": [[491, "polars.lit"]], "map() (in module polars)": [[492, "polars.map"]], "max() (in module polars)": [[493, "polars.max"]], "mean() (in module polars)": [[494, "polars.mean"]], "median() (in module polars)": [[495, "polars.median"]], "min() (in module polars)": [[496, "polars.min"]], "n_unique() (in module polars)": [[497, "polars.n_unique"]], "pearson_corr() (in module polars)": [[498, "polars.pearson_corr"]], "quantile() (in module polars)": [[499, "polars.quantile"]], "reduce() (in module polars)": [[500, "polars.reduce"]], "repeat() (in module polars)": [[501, "polars.repeat"]], "select() (in module polars)": [[502, "polars.select"]], "spearman_rank_corr() (in module polars)": [[503, "polars.spearman_rank_corr"]], "std() (in module polars)": [[504, "polars.std"]], "struct() (in module polars)": [[505, "polars.struct"]], "sum() (in module polars)": [[506, "polars.sum"]], "tail() (in module polars)": [[507, "polars.tail"]], "var() (in module polars)": [[508, "polars.var"]], "when() (in module polars)": [[509, "polars.when"]], "cache() (polars.lazyframe method)": [[528, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[529, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[530, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[531, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[532, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[533, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[534, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[535, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[536, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[537, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[538, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[539, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[540, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[541, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[542, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[543, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[544, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[545, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[546, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[547, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[548, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[549, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[550, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[551, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[552, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[553, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[554, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[555, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[556, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[557, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[558, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[559, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[560, "polars.LazyFrame.melt"]], "min() (polars.lazyframe method)": [[561, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[562, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[563, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[564, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[565, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[566, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[567, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[568, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[569, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[570, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[571, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[572, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[573, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[574, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[575, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[576, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[577, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[578, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[579, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[580, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[581, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[582, "polars.LazyFrame.width"]], "with_column() (polars.lazyframe method)": [[583, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[584, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[585, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[586, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[587, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[588, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[589, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[590, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[591, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[599, "polars.Series.abs"]], "alias() (polars.series method)": [[600, "polars.Series.alias"]], "all() (polars.series method)": [[601, "polars.Series.all"]], "any() (polars.series method)": [[602, "polars.Series.any"]], "append() (polars.series method)": [[603, "polars.Series.append"]], "apply() (polars.series method)": [[604, "polars.Series.apply"]], "arccos() (polars.series method)": [[605, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[606, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[607, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[608, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[609, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[610, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[611, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[612, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[613, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[614, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[615, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[616, "polars.Series.argsort"]], "arr (polars.series attribute)": [[617, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[618, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[619, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[620, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[621, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[622, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[623, "polars.Series.arr.eval"]], "first() (polars.series.arr method)": [[624, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[625, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[626, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[627, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[628, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[629, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[630, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[631, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[632, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[633, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[634, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[635, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[636, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[637, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[638, "polars.Series.arr.tail"]], "to_struct() (polars.series.arr method)": [[639, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[640, "polars.Series.arr.unique"]], "cast() (polars.series method)": [[641, "polars.Series.cast"]], "cat (polars.series attribute)": [[642, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[643, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[644, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[645, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[646, "polars.Series.cleared"]], "clip() (polars.series method)": [[647, "polars.Series.clip"]], "clip_max() (polars.series method)": [[648, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[649, "polars.Series.clip_min"]], "clone() (polars.series method)": [[650, "polars.Series.clone"]], "cos() (polars.series method)": [[651, "polars.Series.cos"]], "cosh() (polars.series method)": [[652, "polars.Series.cosh"]], "cummax() (polars.series method)": [[653, "polars.Series.cummax"]], "cummin() (polars.series method)": [[654, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[655, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[656, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[657, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[658, "polars.Series.describe"]], "diff() (polars.series method)": [[659, "polars.Series.diff"]], "dot() (polars.series method)": [[660, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[661, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[662, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[663, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[664, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[665, "polars.Series.dt.cast_time_zone"]], "day() (polars.series.dt method)": [[666, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[667, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[668, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[669, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[670, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[671, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[672, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[673, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[674, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[675, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[676, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[677, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[678, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[679, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[680, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[681, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[682, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[683, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[684, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[685, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[686, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[687, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[688, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[689, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[690, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[691, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[692, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[693, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[694, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[695, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[696, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[697, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[698, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[699, "polars.Series.dt.year"]], "dtype (polars.series property)": [[700, "polars.Series.dtype"]], "entropy() (polars.series method)": [[701, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[702, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[703, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[704, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[705, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[706, "polars.Series.exp"]], "explode() (polars.series method)": [[707, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[708, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[709, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[710, "polars.Series.fill_null"]], "filter() (polars.series method)": [[711, "polars.Series.filter"]], "flags (polars.series property)": [[712, "polars.Series.flags"]], "floor() (polars.series method)": [[713, "polars.Series.floor"]], "has_validity() (polars.series method)": [[714, "polars.Series.has_validity"]], "hash() (polars.series method)": [[715, "polars.Series.hash"]], "head() (polars.series method)": [[716, "polars.Series.head"]], "inner_dtype (polars.series property)": [[717, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[718, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[719, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[720, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[721, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[722, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[723, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[724, "polars.Series.is_first"]], "is_float() (polars.series method)": [[725, "polars.Series.is_float"]], "is_in() (polars.series method)": [[726, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[727, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[728, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[729, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[730, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[731, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[732, "polars.Series.is_numeric"]], "is_unique() (polars.series method)": [[733, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[734, "polars.Series.is_utf8"]], "kurtosis() (polars.series method)": [[735, "polars.Series.kurtosis"]], "len() (polars.series method)": [[736, "polars.Series.len"]], "limit() (polars.series method)": [[737, "polars.Series.limit"]], "log() (polars.series method)": [[738, "polars.Series.log"]], "log10() (polars.series method)": [[739, "polars.Series.log10"]], "max() (polars.series method)": [[740, "polars.Series.max"]], "mean() (polars.series method)": [[741, "polars.Series.mean"]], "median() (polars.series method)": [[742, "polars.Series.median"]], "min() (polars.series method)": [[743, "polars.Series.min"]], "mode() (polars.series method)": [[744, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[745, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[746, "polars.Series.n_unique"]], "name (polars.series property)": [[747, "polars.Series.name"]], "nan_max() (polars.series method)": [[748, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[749, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[750, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[751, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[752, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[753, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[754, "polars.Series.peak_min"]], "product() (polars.series method)": [[755, "polars.Series.product"]], "quantile() (polars.series method)": [[756, "polars.Series.quantile"]], "rank() (polars.series method)": [[757, "polars.Series.rank"]], "rechunk() (polars.series method)": [[758, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[759, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[760, "polars.Series.rename"]], "reshape() (polars.series method)": [[761, "polars.Series.reshape"]], "reverse() (polars.series method)": [[762, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[763, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[764, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[765, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[766, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[767, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[768, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[769, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[770, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[771, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[772, "polars.Series.rolling_var"]], "round() (polars.series method)": [[773, "polars.Series.round"]], "sample() (polars.series method)": [[774, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[775, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[776, "polars.Series.series_equal"]], "set() (polars.series method)": [[777, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[778, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[779, "polars.Series.set_sorted"]], "shape (polars.series property)": [[780, "polars.Series.shape"]], "shift() (polars.series method)": [[781, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[782, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[783, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[784, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[785, "polars.Series.shuffle"]], "sign() (polars.series method)": [[786, "polars.Series.sign"]], "sin() (polars.series method)": [[787, "polars.Series.sin"]], "sinh() (polars.series method)": [[788, "polars.Series.sinh"]], "skew() (polars.series method)": [[789, "polars.Series.skew"]], "slice() (polars.series method)": [[790, "polars.Series.slice"]], "sort() (polars.series method)": [[791, "polars.Series.sort"]], "sqrt() (polars.series method)": [[792, "polars.Series.sqrt"]], "std() (polars.series method)": [[793, "polars.Series.std"]], "str (polars.series attribute)": [[794, "polars.Series.str"]], "concat() (polars.series.str method)": [[795, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[796, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[797, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[798, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[799, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[800, "polars.Series.str.ends_with"]], "extract() (polars.series.str method)": [[801, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[802, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[803, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[804, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[805, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[806, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[807, "polars.Series.str.n_chars"]], "replace() (polars.series.str method)": [[808, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[809, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[810, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[811, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[812, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[813, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[814, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[815, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[816, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[817, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[818, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[819, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[820, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[821, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[822, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[823, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[824, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[825, "polars.Series.struct.to_frame"]], "sum() (polars.series method)": [[826, "polars.Series.sum"]], "tail() (polars.series method)": [[827, "polars.Series.tail"]], "take() (polars.series method)": [[828, "polars.Series.take"]], "take_every() (polars.series method)": [[829, "polars.Series.take_every"]], "tan() (polars.series method)": [[830, "polars.Series.tan"]], "tanh() (polars.series method)": [[831, "polars.Series.tanh"]], "time_unit (polars.series property)": [[832, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[833, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[834, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[835, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[836, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[837, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[838, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[839, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[840, "polars.Series.top_k"]], "unique() (polars.series method)": [[841, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[842, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[843, "polars.Series.value_counts"]], "var() (polars.series method)": [[844, "polars.Series.var"]], "view() (polars.series method)": [[845, "polars.Series.view"]], "zip_with() (polars.series method)": [[846, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[860, "polars.SQLContext"]]}})